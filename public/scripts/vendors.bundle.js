(self["webpackChunkparcel_lab_shopify_app_frontend"] = self["webpackChunkparcel_lab_shopify_app_frontend"] || []).push([[216],{

/***/ 7228:
/***/ ((module) => {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;

/***/ }),

/***/ 2858:
/***/ ((module) => {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),

/***/ 3646:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeToArray = __webpack_require__(7228);

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ 1506:
/***/ ((module) => {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ 8926:
/***/ ((module) => {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ 4575:
/***/ ((module) => {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ 3913:
/***/ ((module) => {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ 9713:
/***/ ((module) => {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),

/***/ 6525:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var superPropBase = __webpack_require__(8331);

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    module.exports = _get = Reflect.get;
  } else {
    module.exports = _get = function _get(target, property, receiver) {
      var base = superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

module.exports = _get;

/***/ }),

/***/ 9754:
/***/ ((module) => {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ 2205:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var setPrototypeOf = __webpack_require__(9489);

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ 6860:
/***/ ((module) => {

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ 3884:
/***/ ((module) => {

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),

/***/ 521:
/***/ ((module) => {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;

/***/ }),

/***/ 8206:
/***/ ((module) => {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ 8585:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = __webpack_require__(8);

var assertThisInitialized = __webpack_require__(1506);

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ 9489:
/***/ ((module) => {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ 3038:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayWithHoles = __webpack_require__(2858);

var iterableToArrayLimit = __webpack_require__(3884);

var unsupportedIterableToArray = __webpack_require__(379);

var nonIterableRest = __webpack_require__(521);

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),

/***/ 8331:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getPrototypeOf = __webpack_require__(9754);

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

module.exports = _superPropBase;

/***/ }),

/***/ 319:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayWithoutHoles = __webpack_require__(3646);

var iterableToArray = __webpack_require__(6860);

var unsupportedIterableToArray = __webpack_require__(379);

var nonIterableSpread = __webpack_require__(8206);

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ 8:
/***/ ((module) => {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ 379:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeToArray = __webpack_require__(7228);

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;

/***/ }),

/***/ 7757:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(5666);


/***/ }),

/***/ 6906:
/***/ ((module) => {

module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}


/***/ }),

/***/ 9718:
/***/ ((module) => {

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};


/***/ }),

/***/ 9599:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "X": () => /* binding */ Bs4ShareComponent
/* harmony export */ });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7757);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8926);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6525);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3913);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2205);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8585);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9754);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _ribajs_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(425);
/* harmony import */ var _ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(5263);
/* harmony import */ var _bs4_share_component_html__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(4091);
/* harmony import */ var _bs4_share_component_html__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_bs4_share_component_html__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _bs4_share_label_html__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5588);
/* harmony import */ var _bs4_share_label_html__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_bs4_share_label_html__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _ribajs_bs4__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(686);
/* harmony import */ var _ribajs_utils_src_dom__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(8277);











function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }








/**
 * Component to share the a link
 * Similar projects wich are can share stuff:
 *  * https://github.com/nimiq/web-share-shim
 *  * http://webintents.org/
 *  * http://chriswren.github.io/native-social-interactions/
 *  * https://www.sharethis.com/platform/share-buttons/
 *  * https://github.com/dimsemenov/PhotoSwipe/blob/master/src/js/ui/photoswipe-ui-default.js
 *
 */
var Bs4ShareComponent = /*#__PURE__*/function (_Component) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default()(Bs4ShareComponent, _Component);

  var _super = _createSuper(Bs4ShareComponent);

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default()(Bs4ShareComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["type", "title", "text", "url", "media-url", "label", "dropdown-direction"];
    }
  }]);

  function Bs4ShareComponent(element) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, Bs4ShareComponent);

    _this = _super.call(this, element);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3___default()(_this), "_debug", false);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3___default()(_this), "dropdown", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3___default()(_this), "scope", void 0);

    _this.scope = _this.getScopeDefaults();

    _this.debug("constructor", _this.scope);

    Bs4ShareComponent.count++;
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default()(Bs4ShareComponent, [{
    key: "getDefaultShareServices",
    value: function getDefaultShareServices() {
      var newLine = "%0A";
      var shareItems = [{
        id: "facebook",
        label: "Facebook",
        // It is not possible to add a message on facebook sharer.php but with the Dialog API, see https://developers.facebook.com/docs/javascript/reference/FB.ui
        urlTemplate: "https://www.facebook.com/sharer/sharer.php?u={{url}}",
        mediaUrlTemplate: "https://www.facebook.com/sharer/sharer.php?u={{media_url}}",
        type: "popup",
        url: "",
        availableFor: ["page", "image", "video"]
      }, {
        id: "twitter",
        label: "Twitter",
        urlTemplate: "https://twitter.com/intent/tweet?text={{text}}&url={{url}}",
        mediaUrlTemplate: "https://twitter.com/intent/tweet?text={{text}}&url={{media_url}}".concat(newLine, "({{url}})"),
        url: "",
        availableFor: ["page", "image", "video"]
      }, {
        id: "pinterest",
        label: "Pinterest",
        urlTemplate: "http://www.pinterest.com/pin/create/button/" + "?url={{url}}&media={{media_url}}&description={{text}}",
        type: "popup",
        url: "",
        availableFor: ["image", "video"]
      }, {
        id: "whatsapp",
        label: "WhatsApp",
        urlTemplate: "https://api.whatsapp.com/send?text={{text}}".concat(newLine).concat(newLine, "{{url}}"),
        mediaUrlTemplate: "https://api.whatsapp.com/send?text={{text}}".concat(newLine).concat(newLine, "{{media_url}}").concat(newLine, "({{url}})"),
        type: "popup",
        url: "",
        availableFor: ["page", "image", "video"]
      }, {
        id: "telegram",
        label: "Telegram",
        urlTemplate: "https://telegram.me/share/url?url={{media_url}}&text={{text}}",
        mediaUrlTemplate: "https://telegram.me/share/url?url={{media_url}}&text={{text}}".concat(newLine, "({{url}})"),
        type: "popup",
        url: "",
        availableFor: ["page", "image", "video"]
      }, {
        id: "email",
        label: "Email",
        urlTemplate: "mailto:?subject={{title}}&body={{text}}".concat(newLine).concat(newLine, "{{url}}"),
        mediaUrlTemplate: "mailto:?subject={{title}}&body={{text}}".concat(newLine).concat(newLine, "{{media_url}}").concat(newLine, "({{url}})"),
        type: "href",
        url: "",
        availableFor: ["page", "image", "video"]
      }, // {
      //   id: "sms",
      //   label: "SMS",
      //   urlTemplate: "sms:?body={{text}}",
      //   type: 'href',
      //   url: "",
      //   canPassUrl: false,
      //   availableFor: ['page', 'image', 'video'],
      // },
      {
        id: "download",
        label: "Download image",
        urlTemplate: "{{raw_media_url}}",
        type: "download",
        url: "",
        availableFor: ["image", "video"]
      }];
      return shareItems;
    }
  }, {
    key: "isIos",
    value: function isIos() {
      return navigator.userAgent.match(/iPhone|iPad|iPod/i) !== null;
    }
  }, {
    key: "isAndroid",
    value: function isAndroid() {
      return navigator.userAgent.match(/Android/i) !== null;
    }
  }, {
    key: "browserSupportsNativeShare",
    value: function browserSupportsNativeShare() {
      return typeof navigator.share === "function";
    }
  }, {
    key: "getScopeDefaults",
    value: function getScopeDefaults() {
      var scope = {
        type: "page",
        title: document.title,
        text: "Look at this! 👀🤩",
        url: window.location.href,
        label: "Share",
        labelTemplate: (_bs4_share_label_html__WEBPACK_IMPORTED_MODULE_12___default()),
        isAndroid: this.isAndroid(),
        isIos: this.isIos(),
        isDesktop: false,
        isNative: this.browserSupportsNativeShare(),
        dropdownId: "dropdownShare" + Bs4ShareComponent.count,
        shareItems: this.getDefaultShareServices(),
        dropdownDirection: "down",
        // Methods
        share: this.share,
        shareOnService: this.shareOnService
      }; // on those two support "mobile deep links", so HTTP based fallback for all others.

      scope.isDesktop = !scope.isIos && !scope.isAndroid;
      return scope;
    }
  }, {
    key: "onExternalOpenEvent",
    value: function onExternalOpenEvent() {
      var _this$dropdown;

      (_this$dropdown = this.dropdown) === null || _this$dropdown === void 0 ? void 0 : _this$dropdown.show();
    }
  }, {
    key: "onExternalCloseEvent",
    value: function onExternalCloseEvent() {
      var _this$dropdown2;

      (_this$dropdown2 = this.dropdown) === null || _this$dropdown2 === void 0 ? void 0 : _this$dropdown2.close();
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Bs4ShareComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4ShareComponent.observedAttributes);
      this.addEventListeners();
    }
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Bs4ShareComponent.prototype), "disconnectedCallback", this).call(this);

      this.removeEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      this.el.addEventListener("open", this.onExternalOpenEvent.bind(this));
      this.el.addEventListener("close", this.onExternalCloseEvent.bind(this));
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      this.el.removeEventListener("open", this.onExternalOpenEvent.bind(this));
      this.el.removeEventListener("close", this.onExternalOpenEvent.bind(this));
    }
  }, {
    key: "getURLForShare",
    value: function getURLForShare() {
      if (this.scope.type === "page" && this.scope.url) {
        return (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_15__/* .getUrl */ .Gr)(this.scope.url);
      }

      return window.location.href;
    }
  }, {
    key: "getMediaUrlForShare",
    value: function getMediaUrlForShare() {
      if (this.scope.type !== "page" && this.scope.url) {
        return (0,_ribajs_utils_src_url__WEBPACK_IMPORTED_MODULE_15__/* .getUrl */ .Gr)(this.scope.url);
      }

      return "";
    }
  }, {
    key: "getTextForShare",
    value: function getTextForShare() {
      return this.scope.text;
    }
    /**
     * Currently only used for email
     * @param appendUrl
     */

  }, {
    key: "getTitleForShare",
    value: function getTitleForShare() {
      return this.scope.title;
    }
  }, {
    key: "updateShareURLs",
    value: function updateShareURLs() {
      var _iterator = _createForOfIteratorHelper(this.scope.shareItems),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var shareItem = _step.value;
          var url = this.getURLForShare();
          var mediaUrl = this.getMediaUrlForShare();
          var shareText = this.getTextForShare();
          var shareTitle = this.getTitleForShare();
          var urlTemplate = shareItem.urlTemplate;

          if (this.scope.type !== "page" && shareItem.mediaUrlTemplate) {
            urlTemplate = shareItem.mediaUrlTemplate;
          }

          var shareURL = urlTemplate.replace("{{url}}", encodeURIComponent(url)).replace("{{url}}", encodeURIComponent(url)).replace("{{media_url}}", encodeURIComponent(mediaUrl)).replace("{{raw_media_url}}", mediaUrl).replace("{{text}}", encodeURIComponent(shareText)).replace("{{title}}", encodeURIComponent(shareTitle));
          shareItem.available = shareItem.availableFor.indexOf(this.scope.type) !== -1;
          shareItem.url = shareURL;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "initDropdown",
    value: function initDropdown() {
      var dropDownButtonElement = this.el.querySelector(".dropdown-toggle-share");

      if (!dropDownButtonElement) {
        console.warn('Element with selector ".dropdown-toggle-share" not found!', this.el);
        return;
      }

      this.dropdown = new _ribajs_bs4__WEBPACK_IMPORTED_MODULE_13__/* .DropdownService */ .Vn(dropDownButtonElement);
    }
    /**
     * New browser popup with the external site (e.g. Facebook) on you want to share your url
     * @param binding
     * @param event
     * @param controller
     * @param el
     */

  }, {
    key: "shareOnService",
    value: function shareOnService(event, controller, el) {
      var _this$dropdown3;

      this.debug("Open popup");
      (_this$dropdown3 = this.dropdown) === null || _this$dropdown3 === void 0 ? void 0 : _this$dropdown3.close();

      if (!el || !el.href) {
        console.error("No href attribute found");
        return false;
      } // We use the default browser anchor href logic for download and href


      if (el.hasAttribute("type") && el.getAttribute("type") === "download" || el.getAttribute("type") === "href") {
        return true;
      }

      event.preventDefault();
      event.stopPropagation(); // this.debug('Open popup');

      window.open(el.href, "Share", "scrollbars=yes,resizable=yes,toolbar=no," + "location=yes,width=550,height=420,top=100,left=" + (window.screen ? Math.round(screen.width / 2 - 275) : 100));
      return false;
    }
  }, {
    key: "share",
    value: function () {
      var _share = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(event) {
        var _this$dropdown4;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.debug("share", this.scope);
                event.preventDefault();
                event.stopPropagation();

                if (!(this.scope.isNative && !this.scope.isDesktop)) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return", navigator.share({
                  title: this.scope.title,
                  text: "".concat(this.scope.text, "\r\n\r\n"),
                  url: this.scope.url || window.location.href
                })["catch"](function (error) {
                  if (error.name === "AbortError") {
                    // TODO show flash message
                    // this.debug(error.message);
                    return;
                  }

                  console.error("Error ".concat(error.name, ": ").concat(error.message), error);
                }));

              case 7:
                this.updateShareURLs();
                return _context.abrupt("return", (_this$dropdown4 = this.dropdown) === null || _this$dropdown4 === void 0 ? void 0 : _this$dropdown4.toggle());

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function share(_x) {
        return _share.apply(this, arguments);
      }

      return share;
    }()
  }, {
    key: "beforeBind",
    value: function () {
      var _beforeBind = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee2() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Bs4ShareComponent.prototype), "beforeBind", this).call(this);

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function beforeBind() {
        return _beforeBind.apply(this, arguments);
      }

      return beforeBind;
    }()
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee3() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Bs4ShareComponent.prototype), "afterBind", this).call(this);

              case 2:
                this.initDropdown(); // this.debug('afterBind', this.scope);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return ["url"];
    }
  }, {
    key: "template",
    value: function template() {
      this.debug("template", this.el, (0,_ribajs_utils_src_dom__WEBPACK_IMPORTED_MODULE_14__/* .hasChildNodesTrim */ .Np)(this.el));

      if (this.el && (0,_ribajs_utils_src_dom__WEBPACK_IMPORTED_MODULE_14__/* .hasChildNodesTrim */ .Np)(this.el)) {
        // If a child is set, this is a custom label template
        this.scope.labelTemplate = this.el.innerHTML;
        this.debug("Custom label template: ", this.scope.labelTemplate);
      }

      return (_bs4_share_component_html__WEBPACK_IMPORTED_MODULE_11___default());
    }
  }]);

  return Bs4ShareComponent;
}(_ribajs_core__WEBPACK_IMPORTED_MODULE_10__.Component);

_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(Bs4ShareComponent, "tagName", "bs4-share");

_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_9___default()(Bs4ShareComponent, "count", 0);

/***/ }),

/***/ 686:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Vn": () => /* reexport */ DropdownService,
  "XJ": () => /* reexport */ PopoverService,
  "$": () => /* reexport */ bs4Module
});

// UNUSED EXPORTS: ARIA_ATTRIBUTE_PATTERN, Bs4AccordionComponent, Bs4ButtonComponent, Bs4CarouselComponent, Bs4ContentsComponent, Bs4DropdownComponent, Bs4FormComponent, Bs4IconComponent, Bs4ModalItemComponent, Bs4NavbarComponent, Bs4NotificationContainerComponent, Bs4ScrollspyComponent, Bs4ShareComponent, Bs4SidebarComponent, Bs4SlideshowComponent, Bs4TabsComponent, Bs4ToastItemComponent, Bs4ToggleButtonComponent, CollapseService, DATA_URL_PATTERN, Data, DefaultAllowlist, EventHandler, MILLISECONDS_MULTIPLIER, Manipulator, ModalService, NODE_TEXT, SAFE_URL_PATTERN, SelectorEngine, TOGGLE_ATTRIBUTE, TOGGLE_BUTTON, TOGGLE_CLASS, TRANSITION_END, ToastService, TooltipService, Utils, allowedAttribute, children, closest, collapseBinder, collapseOnUrlBinder, dropdownBinder, emulateTransitionEnd, expanOnUrlBinder, find, findOne, findShadowRoot, getData, getElementFromSelector, getSelector, getSelectorFromElement, getTransitionDurationFromElement, getjQuery, isElement, isVisible, makeArray, matches, noop, off, on, one, parents, popoverBinder, prev, reflow, removeData, sanitizeHtml, scrollToOnEventBinder, scrollspyClassBinder, setData, showToastOnEventBinder, toType, toggleAttributeBinder, toggleClassBinder, toggleCollapseOnEventBinder, tooltipBinder, trigger, triggerTransitionEnd, typeCheckConfig, uriAttrs

// NAMESPACE OBJECT: ./node_modules/@ribajs/bs4/src/services/index.ts
var services_namespaceObject = {};
__webpack_require__.r(services_namespaceObject);
__webpack_require__.d(services_namespaceObject, {
  "ARIA_ATTRIBUTE_PATTERN": () => ARIA_ATTRIBUTE_PATTERN,
  "CollapseService": () => CollapseService,
  "DATA_URL_PATTERN": () => DATA_URL_PATTERN,
  "Data": () => Data,
  "DefaultAllowlist": () => DefaultAllowlist,
  "DropdownService": () => DropdownService,
  "EventHandler": () => EventHandler,
  "MILLISECONDS_MULTIPLIER": () => MILLISECONDS_MULTIPLIER,
  "Manipulator": () => Manipulator,
  "ModalService": () => ModalService,
  "NODE_TEXT": () => NODE_TEXT,
  "PopoverService": () => PopoverService,
  "SAFE_URL_PATTERN": () => SAFE_URL_PATTERN,
  "SelectorEngine": () => SelectorEngine,
  "TRANSITION_END": () => TRANSITION_END,
  "ToastService": () => ToastService,
  "TooltipService": () => TooltipService,
  "Utils": () => Utils,
  "allowedAttribute": () => allowedAttribute,
  "children": () => children,
  "closest": () => closest,
  "emulateTransitionEnd": () => emulateTransitionEnd,
  "find": () => find,
  "findOne": () => findOne,
  "findShadowRoot": () => findShadowRoot,
  "getData": () => getData,
  "getElementFromSelector": () => getElementFromSelector,
  "getSelector": () => getSelector,
  "getSelectorFromElement": () => getSelectorFromElement,
  "getTransitionDurationFromElement": () => getTransitionDurationFromElement,
  "getjQuery": () => getjQuery,
  "isElement": () => isElement,
  "isVisible": () => isVisible,
  "makeArray": () => makeArray,
  "matches": () => matches,
  "noop": () => noop,
  "off": () => off,
  "on": () => on,
  "one": () => one,
  "parents": () => parents,
  "prev": () => prev,
  "reflow": () => reflow,
  "removeData": () => removeData,
  "sanitizeHtml": () => sanitizeHtml,
  "setData": () => setData,
  "toType": () => toType,
  "trigger": () => trigger,
  "triggerTransitionEnd": () => triggerTransitionEnd,
  "typeCheckConfig": () => typeCheckConfig,
  "uriAttrs": () => uriAttrs
});

// NAMESPACE OBJECT: ./node_modules/@ribajs/bs4/src/binders/index.ts
var binders_namespaceObject = {};
__webpack_require__.r(binders_namespaceObject);
__webpack_require__.d(binders_namespaceObject, {
  "collapseBinder": () => collapseBinder,
  "collapseOnUrlBinder": () => collapseOnUrlBinder,
  "dropdownBinder": () => dropdownBinder,
  "expanOnUrlBinder": () => expanOnUrlBinder,
  "popoverBinder": () => popoverBinder,
  "scrollToOnEventBinder": () => scrollToOnEventBinder,
  "scrollspyClassBinder": () => scrollspyClassBinder,
  "showToastOnEventBinder": () => showToastOnEventBinder,
  "toggleAttributeBinder": () => toggleAttributeBinder,
  "toggleClassBinder": () => toggleClassBinder,
  "toggleCollapseOnEventBinder": () => toggleCollapseOnEventBinder,
  "tooltipBinder": () => tooltipBinder
});

// NAMESPACE OBJECT: ./node_modules/@ribajs/extras/src/services/index.ts
var src_services_namespaceObject = {};
__webpack_require__.r(src_services_namespaceObject);
__webpack_require__.d(src_services_namespaceObject, {
  "Autoscroll": () => Autoscroll,
  "Dragscroll": () => Dragscroll,
  "FullscreenService": () => FullscreenService,
  "Gameloop": () => Gameloop,
  "ScrollEventsService": () => ScrollEventsService,
  "TouchEventsService": () => TouchEventsService,
  "TouchType": () => TouchType,
  "Utils": () => utils_service_Utils
});

// NAMESPACE OBJECT: ./node_modules/@ribajs/extras/src/binders/index.ts
var src_binders_namespaceObject = {};
__webpack_require__.r(src_binders_namespaceObject);
__webpack_require__.d(src_binders_namespaceObject, {
  "autoscrollBinder": () => autoscrollBinder,
  "dataScrollPositionYBinder": () => dataScrollPositionYBinder,
  "scrollEventsBinder": () => scrollEventsBinder,
  "scrollbarDraggableBinder": () => scrollbarDraggableBinder,
  "syncElementPropertyBinder": () => syncElementPropertyBinder,
  "touchEventsBinder": () => touchEventsBinder
});

// NAMESPACE OBJECT: ./node_modules/@ribajs/bs4/src/components/index.ts
var components_namespaceObject = {};
__webpack_require__.r(components_namespaceObject);
__webpack_require__.d(components_namespaceObject, {
  "Bs4AccordionComponent": () => Bs4AccordionComponent,
  "Bs4ButtonComponent": () => Bs4ButtonComponent,
  "Bs4CarouselComponent": () => Bs4CarouselComponent,
  "Bs4ContentsComponent": () => Bs4ContentsComponent,
  "Bs4DropdownComponent": () => Bs4DropdownComponent,
  "Bs4FormComponent": () => Bs4FormComponent,
  "Bs4IconComponent": () => Bs4IconComponent,
  "Bs4ModalItemComponent": () => Bs4ModalItemComponent,
  "Bs4NavbarComponent": () => Bs4NavbarComponent,
  "Bs4NotificationContainerComponent": () => Bs4NotificationContainerComponent,
  "Bs4ScrollspyComponent": () => Bs4ScrollspyComponent,
  "Bs4ShareComponent": () => bs4_share_component/* Bs4ShareComponent */.X,
  "Bs4SidebarComponent": () => Bs4SidebarComponent,
  "Bs4SlideshowComponent": () => Bs4SlideshowComponent,
  "Bs4TabsComponent": () => Bs4TabsComponent,
  "Bs4ToastItemComponent": () => Bs4ToastItemComponent,
  "Bs4ToggleButtonComponent": () => Bs4ToggleButtonComponent
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/dom/data.ts



/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): dom/data.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
var mapData = function () {
  var storeData = {};
  var id = 1;
  return {
    set: function set(element, key, data) {
      if (typeof element.dataset.key === "undefined") {
        element.dataset.key = key;
        element.dataset.id = id.toString();
        id++;
      }

      if (element.dataset.id) {
        storeData[element.dataset.id] = data;
      }
    },
    get: function get(element, key) {
      if (!element || typeof element.dataset.key === "undefined") {
        return null;
      }

      var keyProperties = {
        key: element.dataset.key,
        id: element.dataset.id
      };

      if (keyProperties.key === key && typeof keyProperties.id !== "undefined") {
        return storeData[keyProperties.id];
      }

      return null;
    },
    "delete": function _delete(element, key) {
      if (typeof element.dataset.key === "undefined") {
        return;
      }

      var keyProperties = {
        key: element.dataset.key,
        id: element.dataset.id
      };

      if (keyProperties.key === key && typeof keyProperties.id !== "undefined") {
        delete storeData[keyProperties.id];
        delete element.dataset.key;
      }
    }
  };
}();

var setData = function setData(instance, key, data) {
  mapData.set(instance, key, data);
};
var getData = function getData(instance, key) {
  return mapData.get(instance, key);
};
var removeData = function removeData(instance, key) {
  mapData["delete"](instance, key);
};
/**
 * @deprecated Import the methods directly instead of this class
 */

var Data = function Data() {
  classCallCheck_default()(this, Data);
};

defineProperty_default()(Data, "setData", setData);

defineProperty_default()(Data, "getData", getData);

defineProperty_default()(Data, "removeData", removeData);

/* harmony default export */ const dom_data = (Data);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/dom/event-handler.ts



/**
 * see see https://github.com/twbs/bootstrap/blob/master/js/src/dom/event-handler.js
 */
var on = function on(element, eventName, handler) {
  return element.addEventListener(eventName, handler, {});
};
var one = function one(element, eventName, handler) {
  return element.addEventListener(eventName, handler, {
    once: true
  });
};
var off = function off(element, originalTypeEvent, handler) {
  return element.removeEventListener(originalTypeEvent, handler);
};
var trigger = function trigger(element, eventName) {
  var extraParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var event = new CustomEvent(eventName, {
    detail: extraParameters,
    bubbles: true,
    cancelable: true
  });
  element.dispatchEvent(event);
  return event;
};
/**
 * @deprecated Import the methods directly instead of this class
 */

var EventHandler = function EventHandler() {
  classCallCheck_default()(this, EventHandler);
};

defineProperty_default()(EventHandler, "on", on);

defineProperty_default()(EventHandler, "one", one);

defineProperty_default()(EventHandler, "off", off);

defineProperty_default()(EventHandler, "trigger", trigger);

/* harmony default export */ const event_handler = (EventHandler);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/dom/manipulator.ts


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/dom/manipulator.js
 * --------------------------------------------------------------------------
 */
function normalizeData(val) {
  if (val === "true") {
    return true;
  }

  if (val === "false") {
    return false;
  }

  if (val === Number(val).toString()) {
    return Number(val);
  }

  if (val === "" || val === "null") {
    return null;
  }

  return val;
}

function normalizeDataKey(key) {
  return key.replace(/[A-Z]/g, function (chr) {
    return "-".concat(chr.toLowerCase());
  });
}

var Manipulator = {
  setDataAttribute: function setDataAttribute(element, key, value) {
    element.setAttribute("data-".concat(normalizeDataKey(key)), value);
  },
  removeDataAttribute: function removeDataAttribute(element, key) {
    element.removeAttribute("data-".concat(normalizeDataKey(key)));
  },
  getDataAttributes: function getDataAttributes(element) {
    if (!element) {
      return {};
    }

    var attributes = _objectSpread({}, element.dataset);

    Object.keys(attributes).forEach(function (key) {
      attributes[key] = normalizeData(attributes[key]);
    });
    return attributes;
  },
  getDataAttribute: function getDataAttribute(element, key) {
    return normalizeData(element.getAttribute("data-".concat(normalizeDataKey(key))));
  },
  offset: function offset(element) {
    var rect = element.getBoundingClientRect();
    return {
      top: rect.top + document.body.scrollTop,
      left: rect.left + document.body.scrollLeft
    };
  },
  position: function position(element) {
    return {
      top: element.offsetTop,
      left: element.offsetLeft
    };
  },
  toggleClass: function toggleClass(element, className) {
    if (!element) {
      return;
    }

    if (element.classList.contains(className)) {
      element.classList.remove(className);
    } else {
      element.classList.add(className);
    }
  }
};
/* harmony default export */ const manipulator = (Manipulator);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(2205);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(8585);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(9754);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/index.ts
var src = __webpack_require__(425);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/utils.service.ts






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var MILLISECONDS_MULTIPLIER = 1000;
var TRANSITION_END = "transitionend";
/**
 * Shoutout AngusCroll (https://goo.gl/pxwQGp)
 * @param obj
 */

var toType = function toType(obj) {
  var matches = {}.toString.call(obj).match(/\s([a-z]+)/i);
  return matches ? matches[1].toLowerCase() : null;
};
var getSelector = function getSelector(element) {
  var selector = element.getAttribute("data-target");

  if (!selector || selector === "#") {
    var hrefAttr = element.getAttribute("href");
    selector = hrefAttr && hrefAttr !== "#" ? hrefAttr.trim() : null;
  }

  return selector;
};
var getSelectorFromElement = function getSelectorFromElement(element) {
  var selector = Utils.getSelector(element);

  if (selector) {
    return document.querySelector(selector) ? selector : null;
  }

  return null;
};
var getElementFromSelector = function getElementFromSelector(element) {
  var selector = Utils.getSelector(element);
  return selector ? document.querySelector(selector) : null;
};
var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {
  if (!element) {
    return 0;
  } // Get transition-duration of the element


  var _window$getComputedSt = window.getComputedStyle(element),
      transitionDuration = _window$getComputedSt.transitionDuration,
      transitionDelay = _window$getComputedSt.transitionDelay;

  var floatTransitionDuration = parseFloat(transitionDuration);
  var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  } // If multiple durations are defined, take the first


  transitionDuration = transitionDuration.split(",")[0];
  transitionDelay = transitionDelay.split(",")[0];
  return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
};
var triggerTransitionEnd = function triggerTransitionEnd(element) {
  var evt = document.createEvent("HTMLEvents");
  evt.initEvent(TRANSITION_END, true, true);
  element.dispatchEvent(evt);
};
var isElement = function isElement(obj) {
  return (obj[0] || obj).nodeType;
};
var emulateTransitionEnd = function emulateTransitionEnd(element, duration) {
  var called = false;
  var durationPadding = 5;
  var emulatedDuration = duration + durationPadding;

  function listener() {
    called = true;
    element.removeEventListener(TRANSITION_END, listener);
  }

  element.addEventListener(TRANSITION_END, listener);
  setTimeout(function () {
    if (!called) {
      Utils.triggerTransitionEnd(element);
    }
  }, emulatedDuration);
};
/**
 *
 * @param componentName
 * @param config
 * @param configTypes
 */

var typeCheckConfig = function typeCheckConfig(componentName, config, configTypes) {
  for (var property in configTypes) {
    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
      var expectedTypes = configTypes[property];
      var value = config[property];
      var valueType = value && Utils.isElement(value) ? "element" : Utils.toType(value);

      if (!valueType || !new RegExp(expectedTypes).test(valueType)) {
        throw new Error("".concat(componentName.toUpperCase(), ": ") + "Option \"".concat(property, "\" provided type \"").concat(valueType, "\" ") + "but expected type \"".concat(expectedTypes, "\"."));
      }
    }
  }
};
var makeArray = function makeArray(nodeList) {
  if (!nodeList) {
    return [];
  }

  return [].slice.call(nodeList);
};
var isVisible = function isVisible(element) {
  if (!element) {
    return false;
  }

  if (element.style && element.parentNode && element.parentNode.style) {
    var elementStyle = getComputedStyle(element);
    var parentNodeStyle = getComputedStyle(element.parentNode);
    return elementStyle.display !== "none" && parentNodeStyle.display !== "none" && elementStyle.visibility !== "hidden";
  }

  return false;
};
var findShadowRoot = function findShadowRoot(element) {
  if (!document.documentElement.attachShadow) {
    return null;
  } // Can find the shadow root otherwise it'll return the document


  if (typeof element.getRootNode === "function") {
    var root = element.getRootNode();
    return root instanceof ShadowRoot ? root : null;
  }

  if (element instanceof ShadowRoot) {
    return element;
  } // when we don't find a shadow root


  if (!element.parentNode) {
    return null;
  }

  return Utils.findShadowRoot(element.parentNode);
};
var noop = function noop() {
  return function () {
    /** nothing */
  };
};
var reflow = function reflow(element) {
  return element.offsetHeight;
};
var getjQuery = function getjQuery() {
  var _ref = window,
      jQuery = _ref.jQuery;

  if (jQuery && !document.body.hasAttribute("data-no-jquery")) {
    return jQuery;
  }

  return null;
};
/**
 * @deprecated Import the methods directly instead of this Utils class
 * @see https://github.com/twbs/bootstrap/blob/master/js/src/util/index.js
 */

var Utils = /*#__PURE__*/function (_RibaUtils) {
  inherits_default()(Utils, _RibaUtils);

  var _super = _createSuper(Utils);

  function Utils() {
    classCallCheck_default()(this, Utils);

    return _super.apply(this, arguments);
  }

  return Utils;
}(src.Utils);

defineProperty_default()(Utils, "toType", toType);

defineProperty_default()(Utils, "getSelector", getSelector);

defineProperty_default()(Utils, "getSelectorFromElement", getSelectorFromElement);

defineProperty_default()(Utils, "getElementFromSelector", getElementFromSelector);

defineProperty_default()(Utils, "getTransitionDurationFromElement", getTransitionDurationFromElement);

defineProperty_default()(Utils, "triggerTransitionEnd", triggerTransitionEnd);

defineProperty_default()(Utils, "isElement", isElement);

defineProperty_default()(Utils, "emulateTransitionEnd", emulateTransitionEnd);

defineProperty_default()(Utils, "typeCheckConfig", typeCheckConfig);

defineProperty_default()(Utils, "makeArray", makeArray);

defineProperty_default()(Utils, "isVisible", isVisible);

defineProperty_default()(Utils, "findShadowRoot", findShadowRoot);

defineProperty_default()(Utils, "noop", noop);

defineProperty_default()(Utils, "reflow", reflow);

defineProperty_default()(Utils, "getjQuery", getjQuery);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/dom/selector-engine.ts



/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): dom/selector-engine.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * see https://github.com/twbs/bootstrap/blob/master/js/src/dom/selector-engine.js
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NODE_TEXT = 3;
var matches = function matches(element, selector) {
  return Element.prototype.matches.call(element, selector);
};
var find = function find(selector) {
  var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
  return Element.prototype.querySelectorAll.call(element, selector);
};
var findOne = function findOne(selector) {
  var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
  return Element.prototype.querySelector.call(element, selector);
};
var children = function children(element, selector) {
  var children = Utils.makeArray(element.children);
  return children.filter(function (child) {
    return matches(child, selector);
  });
};
var parents = function parents(element, selector) {
  var parents = [];
  var ancestor = element.parentNode;

  while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
    if (matches(ancestor, selector)) {
      parents.push(ancestor);
    }

    ancestor = ancestor.parentNode;
  }

  return parents;
};
var closest = function closest(element, selector) {
  return Element.prototype.closest.call(element, selector);
};
var prev = function prev(element, selector) {
  var siblings = [];
  var previous = element.previousSibling;

  while (previous && previous.nodeType === Node.ELEMENT_NODE && previous.nodeType !== NODE_TEXT) {
    if (matches(previous, selector)) {
      siblings.push(previous);
    }

    previous = previous.previousSibling;
  }

  return siblings;
};
/**
 * @deprecated Import the methods directly instead of this class
 */

var SelectorEngine = function SelectorEngine() {
  classCallCheck_default()(this, SelectorEngine);
};

defineProperty_default()(SelectorEngine, "matches", matches);

defineProperty_default()(SelectorEngine, "find", find);

defineProperty_default()(SelectorEngine, "findOne", findOne);

defineProperty_default()(SelectorEngine, "children", children);

defineProperty_default()(SelectorEngine, "parents", parents);

defineProperty_default()(SelectorEngine, "closest", closest);

defineProperty_default()(SelectorEngine, "prev", prev);

/* harmony default export */ const selector_engine = (SelectorEngine);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/dom/index.ts




// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/carousel.service.ts




function carousel_service_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function carousel_service_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { carousel_service_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { carousel_service_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */



/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME = "carousel";
var DATA_KEY = "bs.carousel";
var EVENT_KEY = ".".concat(DATA_KEY);
var DATA_API_KEY = ".data-api";
var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

var SWIPE_THRESHOLD = 40;
var Default = {
  interval: 5000,
  keyboard: true,
  slide: false,
  pause: "hover",
  wrap: true,
  touch: true
};
var DefaultType = {
  interval: "(number|boolean)",
  keyboard: "boolean",
  slide: "(boolean|string)",
  pause: "(string|boolean)",
  wrap: "boolean",
  touch: "boolean"
};
var Direction = {
  NEXT: "next",
  PREV: "prev",
  LEFT: "left",
  RIGHT: "right"
};
var Event = {
  SLIDE: "slide".concat(EVENT_KEY),
  SLID: "slid".concat(EVENT_KEY),
  KEYDOWN: "keydown".concat(EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY),
  TOUCHSTART: "touchstart".concat(EVENT_KEY),
  TOUCHMOVE: "touchmove".concat(EVENT_KEY),
  TOUCHEND: "touchend".concat(EVENT_KEY),
  POINTERDOWN: "pointerdown".concat(EVENT_KEY),
  POINTERUP: "pointerup".concat(EVENT_KEY),
  DRAG_START: "dragstart".concat(EVENT_KEY),
  LOAD_DATA_API: "load".concat(EVENT_KEY).concat(DATA_API_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY)
};
var ClassName = {
  CAROUSEL: "carousel",
  ACTIVE: "active",
  SLIDE: "slide",
  RIGHT: "carousel-item-right",
  LEFT: "carousel-item-left",
  NEXT: "carousel-item-next",
  PREV: "carousel-item-prev",
  ITEM: "carousel-item",
  POINTER_EVENT: "pointer-event"
};
var Selector = {
  ACTIVE: ".active",
  ACTIVE_ITEM: ".active.carousel-item",
  ITEM: ".carousel-item",
  ITEM_IMG: ".carousel-item img",
  NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
  INDICATORS: ".carousel-indicators"
};
var PointerType = {
  TOUCH: "touch",
  PEN: "pen"
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var CarouselService = /*#__PURE__*/function () {
  function CarouselService(element, config) {
    classCallCheck_default()(this, CarouselService);

    defineProperty_default()(this, "_items", null);

    defineProperty_default()(this, "_interval", null);

    defineProperty_default()(this, "_activeElement", null);

    defineProperty_default()(this, "_isPaused", false);

    defineProperty_default()(this, "_isSliding", false);

    defineProperty_default()(this, "_config", void 0);

    defineProperty_default()(this, "_element", void 0);

    defineProperty_default()(this, "_indicatorsElement", void 0);

    defineProperty_default()(this, "_touchSupported", void 0);

    defineProperty_default()(this, "_pointerEvent", void 0);

    defineProperty_default()(this, "touchTimeout", null);

    defineProperty_default()(this, "touchStartX", 0);

    defineProperty_default()(this, "touchDeltaX", 0);

    this._items = null;
    this._interval = null;
    this._activeElement = null;
    this._isPaused = false;
    this._isSliding = false;
    this.touchTimeout = null;
    this.touchStartX = 0;
    this.touchDeltaX = 0;
    this._config = this._getConfig(config);
    this._element = element;
    this._indicatorsElement = selector_engine.findOne(Selector.INDICATORS, this._element) || null;
    this._touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
    this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);
    console.debug("CarouselService", this);

    this._addEventListeners();
  } // Getters


  createClass_default()(CarouselService, [{
    key: "next",
    // Public
    value: function next() {
      if (!this._isSliding) {
        this._slide(Direction.NEXT);
      }
    }
  }, {
    key: "nextWhenVisible",
    value: function nextWhenVisible() {
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      if (!document.hidden && Utils.isVisible(this._element)) {
        this.next();
      }
    }
  }, {
    key: "prev",
    value: function prev() {
      if (!this._isSliding) {
        this._slide(Direction.PREV);
      }
    }
  }, {
    key: "pause",
    value: function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if (selector_engine.findOne(Selector.NEXT_PREV, this._element)) {
        Utils.triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval || undefined);
      this._interval = null;
    }
  }, {
    key: "cycle",
    value: function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config && this._config.interval && !this._isPaused) {
        this._interval = window.setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    }
  }, {
    key: "to",
    value: function to(index) {
      var _this = this;

      if (this._items === null) {
        throw new Error("No items found!");
      }

      this._activeElement = selector_engine.findOne(Selector.ACTIVE_ITEM, this._element) || null;

      if (this._activeElement === null) {
        throw new Error("Active element not found!");
      }

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        event_handler.one(this._element, Event.SLID, function () {
          return _this.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

      this._slide(direction, this._items[index]);
    }
  }, {
    key: "dispose",
    value: function dispose() {// EventHandler.off(this._element, EVENT_KEY)
      // this._items = null
      // this._config = null
      // this._element = null
      // this._interval = null
      // this._isPaused = null
      // this._isSliding = null
      // this._activeElement = null
      // this._indicatorsElement = null
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = carousel_service_objectSpread(carousel_service_objectSpread({}, Default), config);
      Utils.typeCheckConfig(NAME, config, DefaultType);
      return config;
    }
  }, {
    key: "_handleSwipe",
    value: function _handleSwipe() {
      var absDeltax = Math.abs(this.touchDeltaX);

      if (absDeltax <= SWIPE_THRESHOLD) {
        return;
      }

      var direction = absDeltax / this.touchDeltaX;
      this.touchDeltaX = 0; // swipe left

      if (direction > 0) {
        this.prev();
      } // swipe right


      if (direction < 0) {
        this.next();
      }
    }
  }, {
    key: "_addEventListeners",
    value: function _addEventListeners() {
      var _this2 = this;

      if (this._config.keyboard) {
        event_handler.on(this._element, Event.KEYDOWN, function (event) {
          return _this2._keydown(event);
        });
      }

      if (this._config.pause === "hover") {
        event_handler.on(this._element, Event.MOUSEENTER, function (event) {
          return _this2.pause(event);
        });
        event_handler.on(this._element, Event.MOUSELEAVE, function (event) {
          return _this2.cycle(event);
        });
      }

      if (this._config.touch && this._touchSupported) {
        this._addTouchEventListeners();
      }
    }
  }, {
    key: "_addTouchEventListeners",
    value: function _addTouchEventListeners() {
      var _this3 = this;

      var start = function start(event) {
        if (_this3._pointerEvent && PointerType[event.pointerType.toUpperCase()]) {
          _this3.touchStartX = event.clientX;
        } else if (!_this3._pointerEvent) {
          _this3.touchStartX = event.touches[0].clientX;
        }
      };

      var move = function move(event) {
        // ensure swiping with one touch and not pinching
        if (event.touches && event.touches.length > 1) {
          _this3.touchDeltaX = 0;
        } else {
          _this3.touchDeltaX = event.touches[0].clientX - _this3.touchStartX;
        }
      };

      var end = function end(event) {
        if (_this3._pointerEvent && PointerType[event.pointerType.toUpperCase()]) {
          _this3.touchDeltaX = event.clientX - _this3.touchStartX;
        }

        _this3._handleSwipe();

        if (_this3._config.pause === "hover") {
          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          _this3.pause();

          if (_this3.touchTimeout) {
            clearTimeout(_this3.touchTimeout);
          }

          _this3.touchTimeout = setTimeout(function (event) {
            return _this3.cycle(event);
          }, TOUCHEVENT_COMPAT_WAIT + (_this3._config.interval || 0));
        }
      };

      Utils.makeArray(selector_engine.find(Selector.ITEM_IMG, this._element)).forEach(function (itemImg) {
        event_handler.on(itemImg, Event.DRAG_START, function (event) {
          return event.preventDefault();
        });
      });

      if (this._pointerEvent) {
        event_handler.on(this._element, Event.POINTERDOWN, function (event) {
          return start(event);
        });
        event_handler.on(this._element, Event.POINTERUP, function (event) {
          return end(event);
        });

        this._element.classList.add(ClassName.POINTER_EVENT);
      } else {
        event_handler.on(this._element, Event.TOUCHSTART, function (event) {
          return start(event);
        });
        event_handler.on(this._element, Event.TOUCHMOVE, function (event) {
          return move(event);
        });
        event_handler.on(this._element, Event.TOUCHEND, function (event) {
          return end(event);
        });
      }
    }
  }, {
    key: "_keydown",
    value: function _keydown(event) {
      var _event$target;

      if (((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.tagName) && /input|textarea/i.test(event.target.tagName)) {
        return;
      }

      switch (event.which) {
        case ARROW_LEFT_KEYCODE:
          event.preventDefault();
          this.prev();
          break;

        case ARROW_RIGHT_KEYCODE:
          event.preventDefault();
          this.next();
          break;

        default:
      }
    }
  }, {
    key: "_getItemIndex",
    value: function _getItemIndex(element) {
      if (!element) {
        return -1;
      }

      this._items = element && element.parentNode ? Utils.makeArray(selector_engine.find(Selector.ITEM, element.parentNode)) : [];
      return this._items.indexOf(element);
    }
  }, {
    key: "_getItemByDirection",
    value: function _getItemByDirection(direction, activeElement) {
      if (this._items === null) {
        throw new Error("No items found!");
      }

      var isNextDirection = direction === Direction.NEXT;
      var isPrevDirection = direction === Direction.PREV;

      var activeIndex = this._getItemIndex(activeElement);

      var lastItemIndex = this._items.length - 1;
      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

      if (isGoingToWrap && !this._config.wrap) {
        return activeElement;
      }

      var delta = direction === Direction.PREV ? -1 : 1;
      var itemIndex = (activeIndex + delta) % this._items.length;
      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
    }
  }, {
    key: "_triggerSlideEvent",
    value: function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);

      var fromIndex = this._getItemIndex(selector_engine.findOne(Selector.ACTIVE_ITEM, this._element) || null);

      return event_handler.trigger(this._element, Event.SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
    }
  }, {
    key: "_setActiveIndicatorElement",
    value: function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        var indicators = selector_engine.find(Selector.ACTIVE, this._indicatorsElement);

        for (var i = 0; i < indicators.length; i++) {
          indicators[i].classList.remove(ClassName.ACTIVE);
        }

        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

        if (nextIndicator) {
          nextIndicator.classList.add(ClassName.ACTIVE);
        }
      }
    }
  }, {
    key: "_slide",
    value: function _slide(direction, element) {
      var _this4 = this;

      var activeElement = selector_engine.findOne(Selector.ACTIVE_ITEM, this._element);

      var activeElementIndex = this._getItemIndex(activeElement);

      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

      if (!nextElement) {
        throw new Error("Next element not found!");
      }

      var nextElementIndex = this._getItemIndex(nextElement);

      var isCycling = Boolean(this._interval);
      var directionalClassName;
      var orderClassName;
      var eventDirectionName;

      if (direction === Direction.NEXT) {
        directionalClassName = ClassName.LEFT;
        orderClassName = ClassName.NEXT;
        eventDirectionName = Direction.LEFT;
      } else {
        directionalClassName = ClassName.RIGHT;
        orderClassName = ClassName.PREV;
        eventDirectionName = Direction.RIGHT;
      }

      if (nextElement && nextElement.classList.contains(ClassName.ACTIVE)) {
        this._isSliding = false;
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.defaultPrevented) {
        return;
      }

      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      if (this._element.classList.contains(ClassName.SLIDE)) {
        nextElement.classList.add(orderClassName);
        Utils.reflow(nextElement);
        activeElement.classList.add(directionalClassName);
        nextElement.classList.add(directionalClassName);
        var nextElementInterval = parseInt(nextElement.getAttribute("data-interval") || "0", 10);

        if (nextElementInterval) {
          this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
          this._config.interval = nextElementInterval;
        } else {
          this._config.interval = this._config.defaultInterval || this._config.interval;
        }

        var transitionDuration = Utils.getTransitionDurationFromElement(activeElement);
        event_handler.one(activeElement, TRANSITION_END, function () {
          nextElement.classList.remove(directionalClassName);
          nextElement.classList.remove(orderClassName);
          nextElement.classList.add(ClassName.ACTIVE);
          activeElement.classList.remove(ClassName.ACTIVE);
          activeElement.classList.remove(orderClassName);
          activeElement.classList.remove(directionalClassName);
          _this4._isSliding = false;
          setTimeout(function () {
            event_handler.trigger(_this4._element, Event.SLID, {
              relatedTarget: nextElement,
              direction: eventDirectionName,
              from: activeElementIndex,
              to: nextElementIndex
            });
          }, 0);
        });
        Utils.emulateTransitionEnd(activeElement, transitionDuration);
      } else {
        activeElement.classList.remove(ClassName.ACTIVE);
        nextElement.classList.add(ClassName.ACTIVE);
        this._isSliding = false;
        event_handler.trigger(this._element, Event.SLID, {
          relatedTarget: nextElement,
          direction: eventDirectionName,
          from: activeElementIndex,
          to: nextElementIndex
        });
      }

      if (isCycling) {
        this.cycle();
      }
    }
  }], [{
    key: "Default",
    get: function get() {
      return Default;
    }
  }]);

  return CarouselService;
}();

/* harmony default export */ const carousel_service = (CarouselService);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js
var helpers_typeof = __webpack_require__(8);
var typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/collapse.service.ts





function collapse_service_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function collapse_service_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { collapse_service_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { collapse_service_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */





/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
var collapse_service_NAME = "collapse";
var VERSION = "4.3.1";
var collapse_service_DATA_KEY = "bs.collapse";
var collapse_service_EVENT_KEY = ".".concat(collapse_service_DATA_KEY);
var collapse_service_Default = {
  toggle: true,
  parent: ""
};
var collapse_service_DefaultType = {
  toggle: "boolean",
  parent: "(string|element)"
};
var EVENT_SHOW = "show".concat(collapse_service_EVENT_KEY);
var EVENT_SHOWN = "shown".concat(collapse_service_EVENT_KEY);
var EVENT_HIDE = "hide".concat(collapse_service_EVENT_KEY);
var EVENT_HIDDEN = "hidden".concat(collapse_service_EVENT_KEY);
var CLASS_NAME_SHOW = "show";
var CLASS_NAME_COLLAPSE = "collapse";
var CLASS_NAME_COLLAPSING = "collapsing";
var CLASS_NAME_COLLAPSED = "collapsed";
var WIDTH = "width";
var HEIGHT = "height";
var SELECTOR_ACTIVES = ".show, .collapsing"; // export const SELECTOR_DATA_TOGGLE = '[data-toggle="collapse"]'

/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var CollapseService = /*#__PURE__*/function () {
  function CollapseService(element, triggerList) {
    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    classCallCheck_default()(this, CollapseService);

    defineProperty_default()(this, "_isTransitioning", void 0);

    defineProperty_default()(this, "_element", null);

    defineProperty_default()(this, "_config", void 0);

    defineProperty_default()(this, "_triggerArray", null);

    defineProperty_default()(this, "_selector", null);

    defineProperty_default()(this, "_parent", null);

    this._isTransitioning = false;
    this._element = element;
    this._config = this._getConfig(config);
    this._triggerArray = Array.from(triggerList); // this._triggerArray = Array.from(SelectorEngine.find(
    //   `${SELECTOR_DATA_TOGGLE}[href="#${element.id}"],` +
    //   `${SELECTOR_DATA_TOGGLE}[data-target="#${element.id}"]`
    // )) as HTMLElement[];
    // const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE) as NodeListOf<HTMLElement>;
    // for (let i = 0, len = toggleList.length; i < len; i++) {
    //   const elem = toggleList[i]
    //   const selector = Utils.getSelectorFromElement(elem)
    //   const filterElement = !selector ? [] : Array.from(SelectorEngine.find(selector))
    //     .filter(foundElem => foundElem === element)
    //   if (selector !== null && filterElement.length) {
    //     this._selector = selector
    //     // this._triggerArray.push(elem)
    //   }
    // }

    this._parent = this._config.parent ? this._getParent() : null;

    if (!this._config.parent) {
      this._addAriaAndCollapsedClass(this._element, this._triggerArray); // this._addAriaAndCollapsedClass(this._element, [])

    }

    if (this._config.toggle) {
      this.toggle();
    }

    dom_data.setData(element, collapse_service_DATA_KEY, this);
  } // Getters


  createClass_default()(CollapseService, [{
    key: "isExpanded",
    // Public
    value: function isExpanded() {
      var _this$_element;

      return !!((_this$_element = this._element) === null || _this$_element === void 0 ? void 0 : _this$_element.classList.contains(CLASS_NAME_SHOW));
    }
  }, {
    key: "isCollapsed",
    value: function isCollapsed() {
      return !this.isExpanded();
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.isExpanded()) {
        this.hide();
      } else {
        this.show();
      }
    }
  }, {
    key: "show",
    value: function show() {
      var _this = this,
          _this$_triggerArray;

      if (!this._element) {
        console.warn("this._element not set!");
        return;
      }

      if (this._isTransitioning || this._element.classList.contains(CLASS_NAME_SHOW)) {
        return;
      }

      var actives = null;
      var activesData;

      if (this._parent) {
        actives = Array.from(selector_engine.find(SELECTOR_ACTIVES, this._parent)).filter(function (elem) {
          if (typeof _this._config.parent === "string") {
            return elem.getAttribute("data-parent") === _this._config.parent;
          }

          return elem.classList.contains(CLASS_NAME_COLLAPSE);
        });

        if (actives.length === 0) {
          actives = null;
        }
      }

      var container = this._selector ? selector_engine.findOne(this._selector) : null;

      if (actives) {
        var tempActiveData = actives.filter(function (elem) {
          return container !== elem;
        });
        activesData = tempActiveData[0] ? dom_data.getData(tempActiveData[0], collapse_service_DATA_KEY) : null;

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = event_handler.trigger(this._element, EVENT_SHOW);

      if (startEvent.defaultPrevented) {
        return;
      }

      if (actives) {
        actives.forEach(function (elemActive) {
          if (container !== elemActive) {
            CollapseService.collapseInterface(elemActive, "hide");
          }

          if (!activesData) {
            dom_data.setData(elemActive, collapse_service_DATA_KEY, null);
          }
        });
      }

      var dimension = this._getDimension();

      this._element.classList.remove(CLASS_NAME_COLLAPSE);

      this._element.classList.add(CLASS_NAME_COLLAPSING);

      this._element.style[dimension] = "0";

      if ((_this$_triggerArray = this._triggerArray) === null || _this$_triggerArray === void 0 ? void 0 : _this$_triggerArray.length) {
        this._triggerArray.forEach(function (element) {
          element.classList.remove(CLASS_NAME_COLLAPSED);
          element.setAttribute("aria-expanded", "true");
        });
      }

      this.setTransitioning(true);

      var complete = function complete() {
        if (!_this._element) {
          console.warn("this._element not set!");
          return;
        }

        _this._element.classList.remove(CLASS_NAME_COLLAPSING);

        _this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

        _this._element.style[dimension] = "";

        _this.setTransitioning(false);

        event_handler.trigger(_this._element, EVENT_SHOWN);
      };

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = "scroll".concat(capitalizedDimension);
      var transitionDuration = Utils.getTransitionDurationFromElement(this._element);
      event_handler.one(this._element, TRANSITION_END, complete);
      Utils.emulateTransitionEnd(this._element, transitionDuration);
      this._element.style[dimension] = "".concat(this._element[scrollSize], "px");

      if (!this._config.parent && this._triggerArray) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray, true); // this._addAriaAndCollapsedClass(this._element, [])

      }
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this$_triggerArray2,
          _this2 = this;

      if (!this._element) {
        console.warn("this._element not set!");
        return;
      }

      if (this._isTransitioning || !this._element.classList.contains(CLASS_NAME_SHOW)) {
        return;
      }

      var startEvent = event_handler.trigger(this._element, EVENT_HIDE);

      if (startEvent.defaultPrevented) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
      Utils.reflow(this._element);

      this._element.classList.add(CLASS_NAME_COLLAPSING);

      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW);

      var triggerArrayLength = (_this$_triggerArray2 = this._triggerArray) === null || _this$_triggerArray2 === void 0 ? void 0 : _this$_triggerArray2.length;

      if (triggerArrayLength && this._triggerArray && triggerArrayLength > 0) {
        for (var i = 0; i < triggerArrayLength; i++) {
          var trigger = this._triggerArray[i];
          var elem = Utils.getElementFromSelector(trigger);

          if (elem && !elem.classList.contains(CLASS_NAME_SHOW)) {
            trigger.classList.add(CLASS_NAME_COLLAPSED);
            trigger.setAttribute("aria-expanded", "false");
          }
        }
      }

      this.setTransitioning(true);

      var complete = function complete() {
        _this2.setTransitioning(false);

        if (!_this2._element) {
          console.warn("this._element not set!");
          return;
        }

        _this2._element.classList.remove(CLASS_NAME_COLLAPSING);

        _this2._element.classList.add(CLASS_NAME_COLLAPSE);

        event_handler.trigger(_this2._element, EVENT_HIDDEN);
      };

      this._element.style[dimension] = "";
      var transitionDuration = Utils.getTransitionDurationFromElement(this._element);
      event_handler.one(this._element, TRANSITION_END, complete);
      Utils.emulateTransitionEnd(this._element, transitionDuration);

      if (!this._config.parent && this._triggerArray) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray, false); // this._addAriaAndCollapsedClass(this._element, [])

      }
    }
  }, {
    key: "setTransitioning",
    value: function setTransitioning(isTransitioning) {
      this._isTransitioning = isTransitioning;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (this._element) {
        dom_data.removeData(this._element, collapse_service_DATA_KEY);
      }

      this._config = null;
      this._parent = null;
      this._element = null; // this._triggerArray = null

      this._isTransitioning = false;
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = collapse_service_objectSpread(collapse_service_objectSpread({}, collapse_service_Default), config);
      config.toggle = Boolean(config.toggle); // Coerce string values

      Utils.typeCheckConfig(collapse_service_NAME, config, collapse_service_DefaultType);
      return config;
    }
  }, {
    key: "_getDimension",
    value: function _getDimension() {
      var hasWidth = this._element ? this._element.classList.contains(WIDTH) : false;
      return hasWidth ? WIDTH : HEIGHT;
    }
  }, {
    key: "_getParent",
    value: function _getParent() {
      var _this3 = this;

      var parent = this._config.parent;

      if (Utils.isElement(parent)) {
        // it's a jQuery object
        if (typeof parent.jquery !== "undefined" || typeof parent[0] !== "undefined") {
          parent = parent[0];
        }
      } else {
        parent = selector_engine.findOne(parent);
      } // const selector = `${SELECTOR_DATA_TOGGLE}[data-parent="${parent}"]`


      var selector = "[data-parent=\"".concat(parent, "\"]");
      selector_engine.find(selector, parent).forEach(function (element) {
        var selected = Utils.getElementFromSelector(element);

        if (selected) {
          _this3._addAriaAndCollapsedClass(selected, [element]);
        } else {
          console.warn();
        }
      });
      return parent;
    }
  }, {
    key: "_addAriaAndCollapsedClass",
    value: function _addAriaAndCollapsedClass(element, triggerArray, isOpen) {
      // console.debug('_addAriaAndCollapsedClass', element, triggerArray);
      if (element) {
        if (typeof isOpen !== "boolean") {
          isOpen = element.classList.contains(CLASS_NAME_SHOW);
        }

        if (triggerArray.length) {
          triggerArray.forEach(function (elem) {
            if (isOpen) {
              elem.classList.remove(CLASS_NAME_COLLAPSED);
            } else {
              elem.classList.add(CLASS_NAME_COLLAPSED);
            }

            elem.setAttribute("aria-expanded", (!!isOpen).toString());
          });
        }
      }
    } // Static

  }], [{
    key: "collapseInterface",
    value: function collapseInterface(element, config) {
      var data = dom_data.getData(element, collapse_service_DATA_KEY);

      var _config = collapse_service_objectSpread(collapse_service_objectSpread(collapse_service_objectSpread({}, collapse_service_Default), element.dataset), typeof_default()(config) === "object" && config ? config : {});

      if (!data && _config.toggle && /show|hide/.test(config)) {
        _config.toggle = false;
      }

      if (!data) {
        data = new CollapseService(element, [], _config);
      }

      if (typeof config === "string") {
        if (typeof data[config] === "undefined") {
          throw new TypeError("No method named \"".concat(config, "\""));
        }

        data[config]();
      }
    }
  }, {
    key: "getInstance",
    value: function getInstance(element) {
      return dom_data.getData(element, collapse_service_DATA_KEY);
    }
  }, {
    key: "VERSION",
    get: function get() {
      return VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return collapse_service_Default;
    }
  }]);

  return CollapseService;
}();
// CONCATENATED MODULE: ./node_modules/popper.js/dist/esm/popper.js
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

var timeoutDuration = function () {
  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      return 1;
    }
  }
  return 0;
}();

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */
function getReferenceNode(reference) {
  return reference && reference.referenceNode ? reference.referenceNode : reference;
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent || null;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var popper_classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var popper_createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var popper_defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.width;
  var height = sizes.height || element.clientHeight || result.height;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop);
    var marginLeft = parseFloat(styles.marginLeft);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function popper_find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = popper_find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicitly asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var round = Math.round,
      floor = Math.floor;

  var noRound = function noRound(v) {
    return v;
  };

  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);

  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;

  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = popper_find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = popper_find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, popper_defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), popper_defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

    // flips variation if reference element overflows boundaries
    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    // flips variation if popper content overflows boundaries
    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

    var flippedVariation = flippedVariationByRef || flippedVariationByContent;

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(popper_find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return popper_defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return popper_defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: popper_defineProperty({}, side, reference[side]),
      end: popper_defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = popper_find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport',
    /**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariations: false,
    /**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariationsByContent: false
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    popper_classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  popper_createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : __webpack_require__.g).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

/* harmony default export */ const popper = (Popper);
//# sourceMappingURL=popper.js.map

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/dropdown.service.ts




function dropdown_service_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function dropdown_service_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { dropdown_service_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { dropdown_service_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

 // /dist/umd/popper


/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.1.3): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/dropdown.js
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var dropdown_service_NAME = "dropdown";
var dropdown_service_VERSION = "4.1.3";
var dropdown_service_DATA_KEY = "bs.dropdown";
var dropdown_service_EVENT_KEY = ".".concat(dropdown_service_DATA_KEY);
var dropdown_service_DATA_API_KEY = ".data-api";
var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

var REGEXP_KEYDOWN = new RegExp("".concat(ARROW_UP_KEYCODE, "|").concat(ARROW_DOWN_KEYCODE, "|").concat(ESCAPE_KEYCODE));
var EVENT = {
  HIDE: "hide".concat(dropdown_service_EVENT_KEY),
  HIDDEN: "hidden".concat(dropdown_service_EVENT_KEY),
  SHOW: "show".concat(dropdown_service_EVENT_KEY),
  SHOWN: "shown".concat(dropdown_service_EVENT_KEY),
  CLICK: "click".concat(dropdown_service_EVENT_KEY),
  CLICK_DATA_API: "click".concat(dropdown_service_EVENT_KEY).concat(dropdown_service_DATA_API_KEY),
  KEYDOWN_DATA_API: "keydown".concat(dropdown_service_EVENT_KEY).concat(dropdown_service_DATA_API_KEY),
  KEYUP_DATA_API: "keyup".concat(dropdown_service_EVENT_KEY).concat(dropdown_service_DATA_API_KEY)
};
var CLASSNAME = {
  DISABLED: "disabled",
  SHOW: "show",
  DROPUP: "dropup",
  DROPRIGHT: "dropright",
  DROPLEFT: "dropleft",
  MENURIGHT: "dropdown-menu-right",
  MENULEFT: "dropdown-menu-left",
  POSITION_STATIC: "position-static"
};
var SELECTOR = {
  DATA_TOGGLE: "bs4-dropdown .dropdown-toggle",
  FORM_CHILD: ".dropdown form",
  MENU: ".dropdown-menu",
  NAVBAR_NAV: ".navbar-nav",
  VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"
};
var ATTACHMENTMAP = {
  TOP: "top-start",
  TOPEND: "top-end",
  BOTTOM: "bottom-start",
  BOTTOMEND: "bottom-end",
  RIGHT: "right-start",
  RIGHTEND: "right-end",
  LEFT: "left-start",
  LEFTEND: "left-end"
};
var DEFAULT = {
  offset: 0,
  flip: true,
  boundary: "scrollParent",
  reference: "toggle",
  display: "dynamic"
};
var DEFAULTTYPE = {
  offset: "(number|string|function)",
  flip: "boolean",
  boundary: "(string|element)",
  reference: "(string|element)",
  display: "string"
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var DropdownService = /*#__PURE__*/function () {
  createClass_default()(DropdownService, null, [{
    key: "closeAll",
    // Static
    value: function closeAll() {
      var _this = this;

      var buttons = document.querySelectorAll(SELECTOR.DATA_TOGGLE);
      buttons.forEach(function (button) {
        if (button.parentElement) {
          var menu = button.parentElement.querySelector(SELECTOR.MENU + "." + CLASSNAME.SHOW) || undefined;

          if (menu) {
            return _this.close(button, menu, button);
          }
        }

        _this.close(button, button);
      });
    }
  }, {
    key: "close",
    value: function close(triggerCloseElement, menu, dropdown) {
      var relatedTarget = {
        relatedTarget: triggerCloseElement
      };

      if (menu && menu.classList.contains(CLASSNAME.SHOW)) {
        menu.classList.remove(CLASSNAME.SHOW);
      }

      if (dropdown && dropdown.classList.contains(CLASSNAME.SHOW)) {
        dropdown.classList.remove(CLASSNAME.SHOW);
        dropdown.dispatchEvent(new CustomEvent(EVENT.HIDDEN, {
          detail: relatedTarget
        }));
      }

      var parent = DropdownService._getParentFromElement(triggerCloseElement);

      if (parent && parent.classList.contains(CLASSNAME.SHOW)) {
        parent.classList.remove(CLASSNAME.SHOW);
        parent.dispatchEvent(new CustomEvent(EVENT.HIDDEN, {
          detail: relatedTarget
        }));
      }
    }
  }, {
    key: "_clearMenus",
    value: function _clearMenus() {
      return this.closeAll();
    }
  }, {
    key: "_getParentFromElement",
    value: function _getParentFromElement(element) {
      if (!element.parentElement) {
        throw new Error("Parent element not found!");
      }

      return element.parentElement;
    }
  }, {
    key: "VERSION",
    // Getters
    get: function get() {
      return dropdown_service_VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return DEFAULT;
    }
  }, {
    key: "DefaultType",
    get: function get() {
      return DEFAULTTYPE;
    }
  }]);

  function DropdownService(elements, config) {
    classCallCheck_default()(this, DropdownService);

    defineProperty_default()(this, "_element", void 0);

    defineProperty_default()(this, "_popper", void 0);

    defineProperty_default()(this, "_config", void 0);

    defineProperty_default()(this, "_menu", void 0);

    defineProperty_default()(this, "_inNavbar", void 0);

    this._element = elements;
    this._popper = null;
    this._config = this._getConfig(config);
    this._menu = this._getMenuElement();
    this._inNavbar = this._detectNavbar();
    this.clouseOnClickOutsite(DropdownService._getParentFromElement(this._element));
  } // Public


  createClass_default()(DropdownService, [{
    key: "close",
    value: function close() {
      return DropdownService.close(this._element, this._menu);
    }
  }, {
    key: "show",
    value: function show() {
      var relatedTarget = {
        relatedTarget: this._element
      };

      var parent = DropdownService._getParentFromElement(this._element);

      if (!this._menu.classList.contains(CLASSNAME.SHOW)) {
        this._menu.classList.add(CLASSNAME.SHOW);
      }

      if (parent && !parent.classList.contains(CLASSNAME.SHOW)) {
        parent.classList.add(CLASSNAME.SHOW);
        parent.dispatchEvent(new CustomEvent(EVENT.SHOWN, {
          detail: relatedTarget
        }));
      }
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this._element.disabled || this._element.classList.contains(CLASSNAME.DISABLED)) {
        return;
      }

      var parent = DropdownService._getParentFromElement(this._element);

      var isActive = this._menu.classList.contains(CLASSNAME.SHOW);

      DropdownService._clearMenus();

      if (isActive) {
        this.close();
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var showEvent = new CustomEvent(EVENT.SHOW, {
        detail: relatedTarget
      });

      if (parent) {
        parent.dispatchEvent(showEvent);

        if (showEvent.defaultPrevented) {
          return;
        }
      }

      this.clouseOnClickOutsite(DropdownService._getParentFromElement(this._element)); // Disable totally Popper.js for Dropdown in Navbar

      if (!this._inNavbar) {
        /**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */
        if (typeof popper === "undefined") {
          throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
        }

        var referenceElement = this._element;

        if (this._config.reference === "parent") {
          referenceElement = parent;
        } else if (isElement(this._config.reference)) {
          referenceElement = this._config.reference; // Check if it's jQuery element

          if (typeof this._config.reference.jquery !== "undefined") {
            referenceElement = this._config.reference[0];
          }
        } // If boundary is not `scrollParent`, then set position to `static`
        // to allow the menu to "escape" the scroll parent's boundaries
        // https://github.com/twbs/bootstrap/issues/24251


        if (parent && this._config.boundary !== "scrollParent") {
          parent.classList.add(CLASSNAME.POSITION_STATIC);
        }

        this._popper = new popper(referenceElement, this._menu, this._getPopperConfig());
      }

      this.clouseOnClickOutsite(DropdownService._getParentFromElement(this._element));

      this._element.focus();

      this._element.setAttribute("aria-expanded", "true");

      if (this._menu.classList.contains(CLASSNAME.SHOW)) {
        this._menu.classList.remove(CLASSNAME.SHOW);
      } else {
        this._menu.classList.add(CLASSNAME.SHOW);
      }

      this._menu.dispatchEvent(new CustomEvent(EVENT.SHOWN, {
        detail: relatedTarget
      }));
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this._element.removeAttribute("data-" + dropdown_service_DATA_KEY); // delete this._element;
      // delete this._menu;


      if (this._popper !== null) {
        this._popper.destroy();

        this._popper = null;
      }
    }
  }, {
    key: "update",
    value: function update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Private

  }, {
    key: "outsideClickListener",
    value: function outsideClickListener(element, event) {
      var target = event.target || event.srcElement || event.currentTarget;

      if (target && !element.contains(target)) {
        this.close();
        document.removeEventListener("click", this.outsideClickListener.bind(this, element));
      }
    }
    /**
     * @see https://stackoverflow.com/questions/152975/how-do-i-detect-a-click-outside-an-element
     * @param selector
     */

  }, {
    key: "clouseOnClickOutsite",
    value: function clouseOnClickOutsite(element) {
      document.addEventListener("click", this.outsideClickListener.bind(this, element));
    }
  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = dropdown_service_objectSpread(dropdown_service_objectSpread(dropdown_service_objectSpread({}, DropdownService.Default), this._element.dataset), config);
      typeCheckConfig(dropdown_service_NAME, config, DropdownService.DefaultType);
      return config;
    }
  }, {
    key: "_getMenuElement",
    value: function _getMenuElement() {
      if (!this._menu) {
        var parent = DropdownService._getParentFromElement(this._element);

        if (parent) {
          var menu = parent.querySelector(SELECTOR.MENU);

          if (!menu) {
            throw new Error("Menu not found!");
          }

          this._menu = menu;
        }
      }

      return this._menu;
    }
  }, {
    key: "_getPlacement",
    value: function _getPlacement() {
      var parentDropdown = this._element.parentElement;
      var placement = ATTACHMENTMAP.BOTTOM;

      if (!parentDropdown) {
        throw new Error("Parent of element not found!");
      } // Handle dropup


      if (parentDropdown.classList.contains(CLASSNAME.DROPUP)) {
        placement = ATTACHMENTMAP.TOP;

        if (this._menu.classList.contains(CLASSNAME.MENURIGHT)) {
          placement = ATTACHMENTMAP.TOPEND;
        }
      } else if (parentDropdown.classList.contains(CLASSNAME.DROPRIGHT)) {
        placement = ATTACHMENTMAP.RIGHT;
      } else if (parentDropdown.classList.contains(CLASSNAME.DROPLEFT)) {
        placement = ATTACHMENTMAP.LEFT;
      } else if (this._menu.classList.contains(CLASSNAME.MENURIGHT)) {
        placement = ATTACHMENTMAP.BOTTOMEND;
      }

      return placement;
    }
  }, {
    key: "_detectNavbar",
    value: function _detectNavbar() {
      return this._element.closest && this._element.closest(".navbar") !== null;
    }
  }, {
    key: "_getPopperConfig",
    value: function _getPopperConfig() {
      var _this2 = this;

      var offsetConf = {};

      if (typeof this._config.offset === "function") {
        offsetConf.fn = function (data) {
          data.offsets = dropdown_service_objectSpread(dropdown_service_objectSpread({}, data.offsets), _this2._config.offset(data.offsets) || {});
          return data;
        };
      } else {
        offsetConf.offset = this._config.offset;
      }

      var popperConfig = {
        placement: this._getPlacement(),
        modifiers: {
          offset: offsetConf,
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      }; // Disable Popper.js if we have a static display

      if (this._config.display === "static") {
        popperConfig.modifiers.applyStyle = {
          enabled: false
        };
      }

      return popperConfig;
    }
  }]);

  return DropdownService;
}();
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/modal.service.ts




function modal_service_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function modal_service_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { modal_service_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { modal_service_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Fork of https://github.com/twbs/bootstrap/blob/main/js/src/modal.js

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */


 // import Manipulator from "./dom/manipulator";



/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
var modal_service_NAME = "modal";
var modal_service_VERSION = "5.0.0-alpha1";
var modal_service_DATA_KEY = "bs.modal";
var modal_service_EVENT_KEY = ".".concat(modal_service_DATA_KEY);
var ESCAPE_KEY = "Escape";
var modal_service_Default = {
  backdrop: true,
  keyboard: true,
  focus: true,
  show: true
};
var modal_service_DefaultType = {
  backdrop: "(boolean|string)",
  keyboard: "boolean",
  focus: "boolean",
  show: "boolean"
};
var modal_service_EVENT_HIDE = "hide".concat(modal_service_EVENT_KEY);
var EVENT_HIDE_PREVENTED = "hidePrevented".concat(modal_service_EVENT_KEY);
var modal_service_EVENT_HIDDEN = "hidden".concat(modal_service_EVENT_KEY);
var modal_service_EVENT_SHOW = "show".concat(modal_service_EVENT_KEY);
var modal_service_EVENT_SHOWN = "shown".concat(modal_service_EVENT_KEY);
var EVENT_FOCUSIN = "focusin".concat(modal_service_EVENT_KEY);
var EVENT_RESIZE = "resize".concat(modal_service_EVENT_KEY);
var EVENT_CLICK_DISMISS = "click.dismiss".concat(modal_service_EVENT_KEY);
var EVENT_KEYDOWN_DISMISS = "keydown.dismiss".concat(modal_service_EVENT_KEY);
var EVENT_MOUSEUP_DISMISS = "mouseup.dismiss".concat(modal_service_EVENT_KEY);
var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss".concat(modal_service_EVENT_KEY);
var CLASS_NAME_SCROLLBAR_MEASURER = "modal-scrollbar-measure";
var CLASS_NAME_BACKDROP = "modal-backdrop";
var CLASS_NAME_OPEN = "modal-open";
var CLASS_NAME_FADE = "fade";
var modal_service_CLASS_NAME_SHOW = "show";
var CLASS_NAME_STATIC = "modal-static";
var SELECTOR_DIALOG = ".modal-dialog";
var SELECTOR_MODAL_BODY = ".modal-body";
var SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
var SELECTOR_STICKY_CONTENT = ".sticky-top";
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var ModalService = /*#__PURE__*/function () {
  function ModalService(element, config) {
    classCallCheck_default()(this, ModalService);

    defineProperty_default()(this, "_config", void 0);

    defineProperty_default()(this, "_element", void 0);

    defineProperty_default()(this, "_dialog", void 0);

    defineProperty_default()(this, "_backdrop", void 0);

    defineProperty_default()(this, "_isShown", void 0);

    defineProperty_default()(this, "_isBodyOverflowing", void 0);

    defineProperty_default()(this, "_ignoreBackdropClick", void 0);

    defineProperty_default()(this, "_isTransitioning", void 0);

    defineProperty_default()(this, "_scrollbarWidth", void 0);

    this._config = this._getConfig(config);
    this._element = element;
    this._dialog = selector_engine.findOne(SELECTOR_DIALOG, element);
    this._backdrop = null;
    this._isShown = false;
    this._isBodyOverflowing = false;
    this._ignoreBackdropClick = false;
    this._isTransitioning = false;
    this._scrollbarWidth = 0;
    dom_data.setData(element, modal_service_DATA_KEY, this);
  } // Getters


  createClass_default()(ModalService, [{
    key: "toggle",
    // Public
    value: function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
  }, {
    key: "show",
    value: function show(relatedTarget) {
      var _this = this;

      if (this._isShown || this._isTransitioning) {
        return;
      }

      if (this._element.classList.contains(CLASS_NAME_FADE)) {
        this._isTransitioning = true;
      }

      var showEvent = event_handler.trigger(this._element, modal_service_EVENT_SHOW, {
        relatedTarget: relatedTarget
      });

      if (this._isShown || showEvent.defaultPrevented) {
        return;
      }

      this._isShown = true;

      this._checkScrollbar();

      this._setScrollbar();

      this._adjustDialog();

      this._setEscapeEvent();

      this._setResizeEvent();

      event_handler.on(this._element, EVENT_CLICK_DISMISS, // SELECTOR_DATA_DISMISS,
      function (event) {
        return _this.hide(event);
      });

      if (this._dialog) {
        event_handler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, function () {
          event_handler.one(_this._element, EVENT_MOUSEUP_DISMISS, function (event) {
            if (event.target === _this._element) {
              _this._ignoreBackdropClick = true;
            }
          });
        });
      }

      this._showBackdrop(function () {
        return _this._showElement(relatedTarget);
      });
    }
  }, {
    key: "hide",
    value: function hide(event) {
      var _this2 = this;

      if (event) {
        event.preventDefault();
      }

      if (!this._isShown || this._isTransitioning) {
        return;
      }

      var hideEvent = event_handler.trigger(this._element, modal_service_EVENT_HIDE);

      if (hideEvent.defaultPrevented) {
        return;
      }

      this._isShown = false;

      var transition = this._element.classList.contains(CLASS_NAME_FADE);

      if (transition) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent(); // EventHandler.off(document, EVENT_FOCUSIN); TODO


      this._element.classList.remove(modal_service_CLASS_NAME_SHOW); // EventHandler.off(this._element, EVENT_CLICK_DISMISS); TODO
      // EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS); TODO


      if (transition) {
        var transitionDuration = Utils.getTransitionDurationFromElement(this._element);
        event_handler.one(this._element, TRANSITION_END, function () {
          return (
            /*event*/
            _this2._hideModal()
          );
        });
        Utils.emulateTransitionEnd(this._element, transitionDuration);
      } else {
        this._hideModal();
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      // TODO
      // [window, this._element, this._dialog].forEach((htmlElement) =>
      //   EventHandler.off(htmlElement, EVENT_KEY)
      // );

      /**
       * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `EVENT_CLICK_DATA_API` event that should remain
       */
      // EventHandler.off(document, EVENT_FOCUSIN); TODO
      dom_data.removeData(this._element, modal_service_DATA_KEY); // this._config = null;
      // this._element = null;
      // this._dialog = null;
      // this._backdrop = null;
      // this._isShown = null;
      // this._isBodyOverflowing = null;
      // this._ignoreBackdropClick = null;
      // this._isTransitioning = null;
      // this._scrollbarWidth = null;
    }
  }, {
    key: "handleUpdate",
    value: function handleUpdate() {
      this._adjustDialog();
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = modal_service_objectSpread(modal_service_objectSpread({}, modal_service_Default), config);
      Utils.typeCheckConfig(modal_service_NAME, config, modal_service_DefaultType);
      return config;
    }
  }, {
    key: "_showElement",
    value: function _showElement(relatedTarget) {
      var _this3 = this;

      var transition = this._element.classList.contains(CLASS_NAME_FADE);

      var modalBody = this._dialog ? selector_engine.findOne(SELECTOR_MODAL_BODY, this._dialog) : null;

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // Don't move modal's DOM position
        document.body.appendChild(this._element);
      }

      this._element.style.display = "block";

      this._element.removeAttribute("aria-hidden");

      this._element.setAttribute("aria-modal", "true");

      this._element.setAttribute("role", "dialog");

      this._element.scrollTop = 0;

      if (modalBody) {
        modalBody.scrollTop = 0;
      }

      if (transition) {
        Utils.reflow(this._element);
      }

      this._element.classList.add(modal_service_CLASS_NAME_SHOW);

      if (this._config.focus) {
        this._enforceFocus();
      }

      var transitionComplete = function transitionComplete() {
        if (_this3._config.focus) {
          _this3._element.focus();
        }

        _this3._isTransitioning = false;
        event_handler.trigger(_this3._element, modal_service_EVENT_SHOWN, {
          relatedTarget: relatedTarget
        });
      };

      if (transition) {
        if (!this._dialog) {
          console.warn("Dialog element not found!");
          return;
        }

        var transitionDuration = Utils.getTransitionDurationFromElement(this._dialog);
        event_handler.one(this._dialog, TRANSITION_END, transitionComplete);
        Utils.emulateTransitionEnd(this._dialog, transitionDuration);
      } else {
        transitionComplete();
      }
    }
  }, {
    key: "_enforceFocus",
    value: function _enforceFocus() {
      var _this4 = this;

      var onFocusIn = function onFocusIn(event) {
        if (event.target && document !== event.target && _this4._element !== event.target && !_this4._element.contains(event.target)) {
          _this4._element.focus();
        }
      };

      event_handler.off(document, EVENT_FOCUSIN, onFocusIn); // guard against infinite focus loou

      event_handler.on(document, EVENT_FOCUSIN, onFocusIn);
    }
  }, {
    key: "_setEscapeEvent",
    value: function _setEscapeEvent() {
      var _this5 = this;

      var onEscapeEvent = function onEscapeEvent(event) {
        if (_this5._config.keyboard && event.key === ESCAPE_KEY) {
          event.preventDefault();

          _this5.hide();
        } else if (!_this5._config.keyboard && event.key === ESCAPE_KEY) {
          _this5._triggerBackdropTransition();
        }
      };

      if (this._isShown) {
        event_handler.on(this._element, EVENT_KEYDOWN_DISMISS, onEscapeEvent);
      } else {
        event_handler.off(this._element, EVENT_KEYDOWN_DISMISS, onEscapeEvent);
      }
    }
  }, {
    key: "_setResizeEvent",
    value: function _setResizeEvent() {
      var _this6 = this;

      var onResizeEvent = function onResizeEvent() {
        return _this6._adjustDialog();
      };

      if (this._isShown) {
        event_handler.on(window, EVENT_RESIZE, onResizeEvent);
      } else {
        event_handler.off(window, EVENT_RESIZE, onResizeEvent);
      }
    }
  }, {
    key: "_hideModal",
    value: function _hideModal()
    /*event?: Event*/
    {
      var _this7 = this;

      this._element.style.display = "none";

      this._element.setAttribute("aria-hidden", "true");

      this._element.removeAttribute("aria-modal");

      this._element.removeAttribute("role");

      this._isTransitioning = false;

      this._showBackdrop(function () {
        document.body.classList.remove(CLASS_NAME_OPEN);

        _this7._resetAdjustments();

        _this7._resetScrollbar();

        event_handler.trigger(_this7._element, modal_service_EVENT_HIDDEN);
      });
    }
  }, {
    key: "_removeBackdrop",
    value: function _removeBackdrop() {
      var _this$_backdrop, _this$_backdrop$paren;

      (_this$_backdrop = this._backdrop) === null || _this$_backdrop === void 0 ? void 0 : (_this$_backdrop$paren = _this$_backdrop.parentNode) === null || _this$_backdrop$paren === void 0 ? void 0 : _this$_backdrop$paren.removeChild(this._backdrop);
      this._backdrop = null;
    }
  }, {
    key: "_showBackdrop",
    value: function _showBackdrop(callback) {
      var _this8 = this;

      var animate = this._element.classList.contains(CLASS_NAME_FADE) ? CLASS_NAME_FADE : "";

      if (this._isShown && this._config.backdrop) {
        this._backdrop = document.createElement("div");
        this._backdrop.className = CLASS_NAME_BACKDROP;

        if (animate) {
          this._backdrop.classList.add(animate);
        }

        document.body.appendChild(this._backdrop);
        event_handler.on(this._element, EVENT_CLICK_DISMISS, function (event) {
          if (_this8._ignoreBackdropClick) {
            _this8._ignoreBackdropClick = false;
            return;
          }

          if (event.target !== event.currentTarget) {
            return;
          }

          _this8._triggerBackdropTransition();
        });

        if (animate) {
          Utils.reflow(this._backdrop);
        }

        this._backdrop.classList.add(modal_service_CLASS_NAME_SHOW);

        if (!animate) {
          callback();
          return;
        }

        var backdropTransitionDuration = Utils.getTransitionDurationFromElement(this._backdrop);
        event_handler.one(this._backdrop, TRANSITION_END, callback);
        Utils.emulateTransitionEnd(this._backdrop, backdropTransitionDuration);
      } else if (!this._isShown && this._backdrop) {
        this._backdrop.classList.remove(modal_service_CLASS_NAME_SHOW);

        var callbackRemove = function callbackRemove() {
          _this8._removeBackdrop();

          callback();
        };

        if (this._element.classList.contains(CLASS_NAME_FADE)) {
          var _backdropTransitionDuration = Utils.getTransitionDurationFromElement(this._backdrop);

          event_handler.one(this._backdrop, TRANSITION_END, callbackRemove);
          Utils.emulateTransitionEnd(this._backdrop, _backdropTransitionDuration);
        } else {
          callbackRemove();
        }
      } else {
        callback();
      }
    }
  }, {
    key: "_triggerBackdropTransition",
    value: function _triggerBackdropTransition() {
      var _this9 = this;

      if (this._config.backdrop === "static") {
        if (!this._dialog) {
          console.error("Dialog element not found!");
          return;
        }

        var hideEvent = event_handler.trigger(this._element, EVENT_HIDE_PREVENTED);

        if (hideEvent.defaultPrevented) {
          return;
        }

        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

        if (!isModalOverflowing) {
          this._element.style.overflowY = "hidden";
        }

        this._element.classList.add(CLASS_NAME_STATIC);

        var modalTransitionDuration = Utils.getTransitionDurationFromElement(this._dialog);

        var onTransitionEnd = function onTransitionEnd() {
          _this9._element.classList.remove(CLASS_NAME_STATIC);

          if (!isModalOverflowing) {
            event_handler.one(_this9._element, TRANSITION_END, function () {
              _this9._element.style.overflowY = "";
            });
            Utils.emulateTransitionEnd(_this9._element, modalTransitionDuration);
          }
        };

        event_handler.off(this._element, TRANSITION_END, onTransitionEnd);
        event_handler.one(this._element, TRANSITION_END, onTransitionEnd);
        Utils.emulateTransitionEnd(this._element, modalTransitionDuration);

        this._element.focus();
      } else {
        this.hide();
      }
    } // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // ----------------------------------------------------------------------

  }, {
    key: "_adjustDialog",
    value: function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!this._isBodyOverflowing && isModalOverflowing) {
        this._element.style.paddingLeft = "".concat(this._scrollbarWidth, "px");
      }

      if (this._isBodyOverflowing && !isModalOverflowing) {
        this._element.style.paddingRight = "".concat(this._scrollbarWidth, "px");
      }
    }
  }, {
    key: "_resetAdjustments",
    value: function _resetAdjustments() {
      this._element.style.paddingLeft = "";
      this._element.style.paddingRight = "";
    }
  }, {
    key: "_checkScrollbar",
    value: function _checkScrollbar() {
      var rect = document.body.getBoundingClientRect();
      this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    }
  }, {
    key: "_setScrollbar",
    value: function _setScrollbar() {
      var _this10 = this;

      if (this._isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
        // Adjust fixed content padding
        selector_engine.find(SELECTOR_FIXED_CONTENT).forEach(function (element) {
          var actualPadding = element.style.paddingRight;
          var calculatedPadding = window.getComputedStyle(element)["padding-right"]; // Manipulator.setDataAttribute(element, "padding-right", actualPadding);

          element.dataset.paddingRight = actualPadding;
          element.style.paddingRight = "".concat(parseFloat(calculatedPadding) + _this10._scrollbarWidth, "px");
        }); // Adjust sticky content margin

        selector_engine.find(SELECTOR_STICKY_CONTENT).forEach(function (element) {
          var actualMargin = element.style.marginRight;
          var calculatedMargin = window.getComputedStyle(element)["margin-right"]; // Manipulator.setDataAttribute(element, "margin-right", actualMargin);

          element.dataset.marginRight = actualMargin;
          element.style.marginRight = "".concat(parseFloat(calculatedMargin) - _this10._scrollbarWidth, "px");
        }); // Adjust body padding

        var actualPadding = document.body.style.paddingRight;
        var calculatedPadding = window.getComputedStyle(document.body)["padding-right"]; // Manipulator.setDataAttribute(
        //   document.body,
        //   "padding-right",
        //   actualPadding
        // );

        document.body.dataset.paddingRight = actualPadding;
        document.body.style.paddingRight = "".concat(parseFloat(calculatedPadding) + this._scrollbarWidth, "px");
      }

      document.body.classList.add(CLASS_NAME_OPEN);
    }
  }, {
    key: "_resetScrollbar",
    value: function _resetScrollbar() {
      // Restore fixed content padding
      selector_engine.find(SELECTOR_FIXED_CONTENT).forEach(function (element) {
        // const padding = Manipulator.getDataAttribute(element, "padding-right");
        var padding = element.dataset.paddingRight;

        if (typeof padding !== "undefined") {
          // Manipulator.removeDataAttribute(element, "padding-right");
          delete element.dataset.paddingRight;
          element.style.paddingRight = padding;
        }
      }); // Restore sticky content and navbar-toggler margin

      selector_engine.find("".concat(SELECTOR_STICKY_CONTENT)).forEach(function (element) {
        // const margin = Manipulator.getDataAttribute(element, "margin-right");
        var margin = element.dataset.marginRight;

        if (typeof margin !== "undefined") {
          // Manipulator.removeDataAttribute(element, "margin-right");
          delete element.dataset.marginRight;
          element.style.marginRight = margin;
        }
      }); // Restore body padding
      // const padding = Manipulator.getDataAttribute(
      //   document.body,
      //   "padding-right"
      // );

      var padding = document.body.dataset.paddingRight;

      if (typeof padding === "undefined") {
        document.body.style.paddingRight = "";
      } else {
        // Manipulator.removeDataAttribute(document.body, "padding-right");
        delete document.body.dataset.paddingRight;
        document.body.style.paddingRight = padding;
      }
    }
  }, {
    key: "_getScrollbarWidth",
    value: function _getScrollbarWidth() {
      // thx d.walsh
      var scrollDiv = document.createElement("div");
      scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    } // Static

  }], [{
    key: "getInstance",
    value: function getInstance(element) {
      return dom_data.getData(element, modal_service_DATA_KEY);
    }
  }, {
    key: "VERSION",
    get: function get() {
      return modal_service_VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return modal_service_Default;
    }
  }]);

  return ModalService;
}();
/* harmony default export */ const modal_service = ((/* unused pure expression or super */ null && (ModalService)));
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/index.ts
var utils_src = __webpack_require__(25);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/sanitizer.ts
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): util/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/util/sanitizer.js
 * --------------------------------------------------------------------------
 */
var uriAttrs = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"];
var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
 */

var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 *
 * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
 */

var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i; // TODO check type

var allowedAttribute = function allowedAttribute(attr, allowedAttributeList) {
  var attrName = attr.nodeName.toLowerCase();

  if (allowedAttributeList.indexOf(attrName) !== -1) {
    if (uriAttrs.indexOf(attrName) !== -1) {
      var _attr$nodeValue, _attr$nodeValue2;

      return Boolean(((_attr$nodeValue = attr.nodeValue) === null || _attr$nodeValue === void 0 ? void 0 : _attr$nodeValue.match(SAFE_URL_PATTERN)) || ((_attr$nodeValue2 = attr.nodeValue) === null || _attr$nodeValue2 === void 0 ? void 0 : _attr$nodeValue2.match(DATA_URL_PATTERN)));
    }

    return true;
  }

  var regExp = allowedAttributeList.filter(function (attrRegex) {
    return attrRegex instanceof RegExp;
  }); // Check if a regular expression validates the attribute.

  for (var i = 0, len = regExp.length; i < len; i++) {
    if (attrName.match(regExp[i])) {
      return true;
    }
  }

  return false;
};
var DefaultAllowlist = {
  // Global attributes allowed on any supplied element below.
  "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
  a: ["target", "href", "title", "rel"],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  div: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ["src", "srcset", "alt", "title", "width", "height"],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};
function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {
  if (!unsafeHtml.length) {
    return unsafeHtml;
  }

  if (sanitizeFn && typeof sanitizeFn === "function") {
    return sanitizeFn(unsafeHtml);
  }

  var domParser = new window.DOMParser();
  var createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
  var allowlistKeys = Object.keys(allowList); // const elements = [].concat(...createdDocument.body.querySelectorAll("*"));

  var elements = Array.from(createdDocument.body.querySelectorAll("*"));

  var _loop = function _loop(i, len) {
    var el = elements[i];
    var elName = el.nodeName.toLowerCase();

    if (allowlistKeys.indexOf(elName) === -1) {
      var _el$parentNode;

      el === null || el === void 0 ? void 0 : (_el$parentNode = el.parentNode) === null || _el$parentNode === void 0 ? void 0 : _el$parentNode.removeChild(el);
      return "continue";
    } // const attributeList = [].concat(...el.attributes);


    var attributeList = Array.from(el.attributes); // const allowedAttributes = [].concat(
    //   allowList["*"] || [],
    //   allowList[elName] || []
    // );

    var allowedAttributes = allowList["*"] || allowList[elName] || [];
    attributeList.forEach(function (attr) {
      if (!allowedAttribute(attr, allowedAttributes)) {
        el.removeAttribute(attr.nodeName);
      }
    });
  };

  for (var i = 0, len = elements.length; i < len; i++) {
    var _ret = _loop(i, len);

    if (_ret === "continue") continue;
  }

  return createdDocument.body.innerHTML;
}
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/tooltip.service.ts





function tooltip_service_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function tooltip_service_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { tooltip_service_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { tooltip_service_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/tooltip.js
 * --------------------------------------------------------------------------
 */









/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
var tooltip_service_NAME = "tooltip";
var tooltip_service_VERSION = "5.0.0-alpha1";
var tooltip_service_DATA_KEY = "bs.tooltip";
var tooltip_service_EVENT_KEY = ".".concat(tooltip_service_DATA_KEY);
var CLASS_PREFIX = "bs-tooltip";
var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)".concat(CLASS_PREFIX, "\\S+"), "g");
var DISALLOWED_ATTRIBUTES = ["sanitize", "allowList", "sanitizeFn"];
var tooltip_service_DefaultType = {
  animation: "boolean",
  template: "string",
  title: "(string|element|function)",
  trigger: "string",
  delay: "(number|object)",
  html: "boolean",
  selector: "(string|boolean|undefined)",
  placement: "(string|function)",
  offset: "(number|string|function)",
  container: "(string|element|boolean|undefined)",
  fallbackPlacement: "(string|array)",
  boundary: "(string|element)",
  sanitize: "boolean",
  sanitizeFn: "(null|function)",
  allowList: "object",
  popperConfig: "(null|object)"
};
var AttachmentMap = {
  AUTO: "auto",
  TOP: "top",
  RIGHT: "right",
  BOTTOM: "bottom",
  LEFT: "left"
};
var tooltip_service_Default = {
  animation: true,
  container: undefined,
  delay: 0,
  html: false,
  placement: "top",
  selector: undefined,
  template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow arrow"></div>' + '<div class="tooltip-inner"></div></div>',
  title: "",
  trigger: "hover focus",
  offset: 0,
  fallbackPlacement: "flip",
  boundary: "scrollParent",
  sanitize: true,
  sanitizeFn: null,
  allowList: DefaultAllowlist,
  popperConfig: null
};
var tooltip_service_Event = {
  HIDE: "hide".concat(tooltip_service_EVENT_KEY),
  HIDDEN: "hidden".concat(tooltip_service_EVENT_KEY),
  SHOW: "show".concat(tooltip_service_EVENT_KEY),
  SHOWN: "shown".concat(tooltip_service_EVENT_KEY),
  INSERTED: "inserted".concat(tooltip_service_EVENT_KEY),
  CLICK: "click".concat(tooltip_service_EVENT_KEY),
  FOCUSIN: "focusin".concat(tooltip_service_EVENT_KEY),
  FOCUSOUT: "focusout".concat(tooltip_service_EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(tooltip_service_EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(tooltip_service_EVENT_KEY)
};
var tooltip_service_CLASS_NAME_FADE = "fade";
var CLASS_NAME_MODAL = "modal";
var tooltip_service_CLASS_NAME_SHOW = "show";
var HOVER_STATE_SHOW = "show";
var HOVER_STATE_OUT = "out";
var SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
var TRIGGER_HOVER = "hover";
var TRIGGER_FOCUS = "focus";
var TRIGGER_CLICK = "click";
var TRIGGER_MANUAL = "manual";
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var TooltipService = /*#__PURE__*/function () {
  function TooltipService(element, config) {
    classCallCheck_default()(this, TooltipService);

    defineProperty_default()(this, "_isEnabled", true);

    defineProperty_default()(this, "_timeout", 0);

    defineProperty_default()(this, "_hoverState", "");

    defineProperty_default()(this, "_activeTrigger", {});

    defineProperty_default()(this, "_popper", null);

    defineProperty_default()(this, "element", void 0);

    defineProperty_default()(this, "config", void 0);

    defineProperty_default()(this, "tip", null);

    if (typeof popper === "undefined") {
      throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org)");
    }

    this.element = element;
    this.config = this._getConfig(config);

    this._setListeners();

    dom_data.setData(element, TooltipService.DATA_KEY, this);
  } // Getters


  createClass_default()(TooltipService, [{
    key: "enable",
    // Public
    value: function enable() {
      this._isEnabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this._isEnabled = false;
    }
  }, {
    key: "toggleEnabled",
    value: function toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }
  }, {
    key: "toggle",
    value: function toggle(event) {
      if (!this._isEnabled) {
        return;
      }

      if (event) {
        var dataKey = TooltipService.DATA_KEY;
        var element = (0,utils_src.getElementFromEvent)(event);
        var context = dom_data.getData(element, dataKey);

        if (!context) {
          context = new TooltipService(element, this._getDelegateConfig());
          dom_data.setData(element, dataKey, context);
        }

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {
        if (this.getTipElement().classList.contains(tooltip_service_CLASS_NAME_SHOW)) {
          this._leave(undefined, this);

          return;
        }

        this._enter(undefined, this);
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      clearTimeout(this._timeout);
      dom_data.removeData(this.element, TooltipService.DATA_KEY); // EventHandler.off(this.element, TooltipService.EVENT_KEY);

      var modalElement = this.element.closest(".".concat(CLASS_NAME_MODAL));

      if (modalElement) {
        event_handler.off(modalElement, "hide.bs.modal", this._hideModalHandler);
      }

      if (this.tip) {
        var _this$tip$parentNode;

        (_this$tip$parentNode = this.tip.parentNode) === null || _this$tip$parentNode === void 0 ? void 0 : _this$tip$parentNode.removeChild(this.tip);
      } // this._isEnabled = null;
      // this._timeout = null;
      // this._hoverState = null;
      // this._activeTrigger = null;


      if (this._popper) {
        this._popper.destroy();
      } // this._popper = null;
      // this.element = null;
      // this.config = null;
      // this.tip = null;

    }
  }, {
    key: "show",
    value: function show() {
      var _this = this;

      if (this.element.style.display === "none") {
        throw new Error("Please use show on visible elements");
      }

      if (this.isWithContent() && this._isEnabled) {
        var _this$tip;

        var showEvent = event_handler.trigger(this.element, (0,utils_src.classOf)(this).Event.SHOW);
        var shadowRoot = findShadowRoot(this.element);
        var isInTheDom = shadowRoot === null ? this.element.ownerDocument.documentElement.contains(this.element) : shadowRoot.contains(this.element);

        if (showEvent.defaultPrevented || !isInTheDom) {
          return;
        }

        var tip = this.getTipElement();
        var tipId = (0,utils_src.getUID)(TooltipService.NAME);
        tip.setAttribute("id", tipId);
        this.element.setAttribute("aria-describedby", tipId);
        this.setContent();

        if (this.config.animation) {
          tip.classList.add(tooltip_service_CLASS_NAME_FADE);
        }

        var placement = typeof this.config.placement === "function" ? this.config.placement.call(this, tip, this.element) : this.config.placement;

        var attachment = this._getAttachment(placement || undefined);

        this._addAttachmentClass(attachment);

        var container = this._getContainer();

        dom_data.setData(tip, TooltipService.DATA_KEY, this);

        if (!this.element.ownerDocument.documentElement.contains(this.tip)) {
          container === null || container === void 0 ? void 0 : container.appendChild(tip);
        }

        event_handler.trigger(this.element, (0,utils_src.classOf)(this).Event.INSERTED);
        this._popper = new popper(this.element, tip, this._getPopperConfig(attachment));
        tip.classList.add(tooltip_service_CLASS_NAME_SHOW); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

        if ("ontouchstart" in document.documentElement) {
          Array.from(document.body.children).forEach(function (element) {
            event_handler.on(element, "mouseover", noop());
          });
        }

        var complete = function complete() {
          if (_this.config.animation) {
            _this._fixTransition();
          }

          var prevHoverState = _this._hoverState;
          _this._hoverState = "";
          event_handler.trigger(_this.element, (0,utils_src.classOf)(_this).Event.SHOWN);

          if (prevHoverState === HOVER_STATE_OUT) {
            _this._leave(undefined, _this);
          }
        };

        if ((_this$tip = this.tip) === null || _this$tip === void 0 ? void 0 : _this$tip.classList.contains(tooltip_service_CLASS_NAME_FADE)) {
          var transitionDuration = getTransitionDurationFromElement(this.tip);
          event_handler.one(this.tip, TRANSITION_END, complete);
          emulateTransitionEnd(this.tip, transitionDuration);
        } else {
          complete();
        }
      }
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this2 = this,
          _this$tip2;

      var tip = this.getTipElement();

      var complete = function complete() {
        var _this2$_popper;

        if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {
          tip.parentNode.removeChild(tip);
        }

        _this2._cleanTipClass();

        _this2.element.removeAttribute("aria-describedby");

        event_handler.trigger(_this2.element, (0,utils_src.classOf)(_this2).Event.HIDDEN);
        (_this2$_popper = _this2._popper) === null || _this2$_popper === void 0 ? void 0 : _this2$_popper.destroy();
      };

      var hideEvent = event_handler.trigger(this.element, (0,utils_src.classOf)(this).Event.HIDE);

      if (hideEvent.defaultPrevented) {
        return;
      }

      tip.classList.remove(tooltip_service_CLASS_NAME_SHOW); // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support

      if ("ontouchstart" in document.documentElement) {
        Array.from(document.body.children).forEach(function (element) {
          return event_handler.off(element, "mouseover", noop);
        });
      }

      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;

      if ((_this$tip2 = this.tip) === null || _this$tip2 === void 0 ? void 0 : _this$tip2.classList.contains(tooltip_service_CLASS_NAME_FADE)) {
        var transitionDuration = getTransitionDurationFromElement(tip);
        event_handler.one(tip, TRANSITION_END, complete);
        emulateTransitionEnd(tip, transitionDuration);
      } else {
        complete();
      }

      this._hoverState = "";
    }
  }, {
    key: "update",
    value: function update() {
      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Protected

  }, {
    key: "isWithContent",
    value: function isWithContent() {
      return Boolean(this.getTitle());
    }
  }, {
    key: "getTipElement",
    value: function getTipElement() {
      if (this.tip) {
        return this.tip;
      }

      var element = document.createElement("div");
      element.innerHTML = this.config.template;
      this.tip = element.children[0];

      if (!this.tip) {
        throw new Error("Tooltip not found!");
      }

      return this.tip;
    }
  }, {
    key: "setContent",
    value: function setContent() {
      var tip = this.getTipElement();
      this.setElementContent(findOne(SELECTOR_TOOLTIP_INNER, tip), this.getTitle());
      tip.classList.remove(tooltip_service_CLASS_NAME_FADE, tooltip_service_CLASS_NAME_SHOW);
    }
  }, {
    key: "setElementContent",
    value: function setElementContent(element, content) {
      if (element === null) {
        return;
      }

      if (typeof_default()(content) === "object" && content !== null && isElement(content)) {
        if (content.jquery) {
          content = content[0];
        }

        content = content; // content is a DOM node or a jQuery

        if (this.config.html) {
          if (content.parentNode !== element) {
            element.innerHTML = "";
            element.appendChild(content);
          }
        } else {
          element.textContent = content.textContent;
        }

        return;
      }

      content = content;

      if (this.config.html && this.config.sanitize) {
        content = sanitizeHtml(content, this.config.allowList, this.config.sanitizeFn || undefined);
      }

      element.innerHTML = content;
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      var title = this.element.getAttribute("data-original-title");

      if (!title) {
        title = typeof this.config.title === "function" ? this.config.title(this.element) : this.config.title;
      }

      return title;
    } // Private

  }, {
    key: "_getPopperConfig",
    value: function _getPopperConfig(attachment) {
      var _this3 = this;

      var defaultBsConfig = {
        placement: attachment,
        modifiers: {
          offset: this._getOffset(),
          flip: {
            behavior: this.config.fallbackPlacement
          },
          arrow: {
            element: ".".concat(TooltipService.NAME, "-arrow")
          },
          preventOverflow: {
            boundariesElement: this.config.boundary
          }
        },
        onCreate: function onCreate(data) {
          if (data.originalPlacement !== data.placement) {
            _this3._handlePopperPlacementChange(data);
          }
        },
        onUpdate: function onUpdate(data) {
          return _this3._handlePopperPlacementChange(data);
        }
      };
      return tooltip_service_objectSpread(tooltip_service_objectSpread({}, defaultBsConfig), this.config.popperConfig);
    }
  }, {
    key: "_addAttachmentClass",
    value: function _addAttachmentClass(attachment) {
      this.getTipElement().classList.add("".concat(CLASS_PREFIX, "-").concat(attachment));
    }
  }, {
    key: "_getOffset",
    value: function _getOffset() {
      var _this4 = this;

      var offset = {};

      if (this.config.offset && typeof this.config.offset === "function") {
        offset.fn = function (data) {
          data.offsets = tooltip_service_objectSpread(tooltip_service_objectSpread({}, data.offsets), _this4.config.offset(data.offsets, _this4.element) || {});
          return data;
        };
      } else {
        offset.offset = this.config.offset;
      }

      return offset;
    }
  }, {
    key: "_getContainer",
    value: function _getContainer() {
      if (!this.config.container) {
        return document.body;
      }

      if (isElement(this.config.container)) {
        return this.config.container;
      }

      if (typeof this.config.container === "string") {
        return findOne(this.config.container);
      }

      return null;
    }
  }, {
    key: "_getAttachment",
    value: function _getAttachment() {
      var placement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "AUTO";
      return AttachmentMap[placement.toUpperCase() || "BOTTOM" || "LEFT"];
    }
  }, {
    key: "_setListeners",
    value: function _setListeners() {
      var _this5 = this;

      var triggers = this.config.trigger.split(" ");
      /*
        TODO: TooltipService.Event.[...] constants replaced here with standard events.
        How are the TooltipService.Events made to work as event names in Bootstrap, and should we use the same way?
      */

      triggers.forEach(function (trigger) {
        if (trigger === "click") {
          event_handler.on(_this5.element, "click", // TooltipService.Event.CLICK,
          // this.config.selector,
          function (event) {
            return _this5.toggle(event);
          });
        } else if (trigger !== TRIGGER_MANUAL) {
          var eventIn = trigger === TRIGGER_HOVER ? "mouseover" // TooltipService.Event.MOUSEENTER
          : "focus"; // TooltipService.Event.FOCUSIN;

          var eventOut = trigger === TRIGGER_HOVER ? "mouseout" // TooltipService.Event.MOUSELEAVE
          : "blur"; // TooltipService.Event.FOCUSOUT;

          event_handler.on(_this5.element, eventIn
          /*, this.config.selector*/
          , function (event) {
            return _this5._enter(event);
          });
          event_handler.on(_this5.element, eventOut
          /*, this.config.selector*/
          , function (event) {
            return _this5._leave(event);
          });
        }
      }); // this._hideModalHandler = () => {
      //   if (this.element) {
      //     this.hide();
      //   }
      // };

      var closestModalEl = this.element.closest(".".concat(CLASS_NAME_MODAL));

      if (closestModalEl) {
        event_handler.on(closestModalEl, "hide.bs.modal", this._hideModalHandler);
      }

      if (this.config.selector) {
        this.config = tooltip_service_objectSpread(tooltip_service_objectSpread({}, this.config), {}, {
          trigger: "manual",
          selector: ""
        });
      } else {
        this._fixTitle();
      }
    }
  }, {
    key: "_hideModalHandler",
    value: function _hideModalHandler() {
      if (this.element) {
        this.hide();
      }
    }
  }, {
    key: "_fixTitle",
    value: function _fixTitle() {
      var titleType = typeof_default()(this.element.getAttribute("data-original-title"));

      if (this.element.getAttribute("title") || titleType !== "string") {
        this.element.setAttribute("data-original-title", this.element.getAttribute("title") || "");
        this.element.setAttribute("title", "");
      }
    }
  }, {
    key: "_enter",
    value: function _enter(event, context) {
      var dataKey = TooltipService.DATA_KEY;

      if (event) {
        var el = event.delegateTarget || (0,utils_src.getElementFromEvent)(event);
        context = context || dom_data.getData(el, dataKey);

        if (!context) {
          context = new TooltipService(el, this._getDelegateConfig());
          dom_data.setData(el, dataKey, context);
        }

        context._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
      }

      if (context.getTipElement().classList.contains(tooltip_service_CLASS_NAME_SHOW) || context._hoverState === HOVER_STATE_SHOW) {
        context._hoverState = HOVER_STATE_SHOW;
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_SHOW;

      if (!context.config.delay || !context.config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HOVER_STATE_SHOW) {
          context.show();
        }
      }, context.config.delay.show);
    }
  }, {
    key: "_leave",
    value: function _leave(event, context) {
      var dataKey = TooltipService.DATA_KEY;

      if (event) {
        var el = event.delegateTarget || (0,utils_src.getElementFromEvent)(event);
        context = context || dom_data.getData(el, dataKey);

        if (!context) {
          context = new TooltipService(el, this._getDelegateConfig());
          dom_data.setData(el, dataKey, context);
        }
      }

      if (event) {
        context._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_OUT;

      if (!context.config.delay || !context.config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HOVER_STATE_OUT) {
          context.hide();
        }
      }, context.config.delay.hide);
    }
  }, {
    key: "_isWithActiveTrigger",
    value: function _isWithActiveTrigger() {
      for (var trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      var dataAttributes = manipulator.getDataAttributes(this.element);
      Object.keys(dataAttributes).forEach(function (dataAttr) {
        if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
          delete dataAttributes[dataAttr];
        }
      });

      if (config && typeof_default()(config.container) === "object" && config.container.jquery // TODO?
      ) {
          config.container = config.container[0]; // TODO?
        }

      config = tooltip_service_objectSpread(tooltip_service_objectSpread(tooltip_service_objectSpread({}, TooltipService.Default), dataAttributes), typeof_default()(config) === "object" && config ? config : {});

      if (typeof config.delay === "number") {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (config.title && typeof config.title === "number") {
        config.title = config.title.toString();
      }

      if (config.content && typeof config.content === "number") {
        config.content = config.content.toString();
      }

      typeCheckConfig(tooltip_service_NAME, config, TooltipService.DefaultType);

      if (config.sanitize) {
        config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn || undefined) || "";
      }

      return config;
    }
  }, {
    key: "_getDelegateConfig",
    value: function _getDelegateConfig() {
      var config = {};

      if (this.config) {
        for (var _key in this.config) {
          // TODO fix types
          if (this.config[_key] !== TooltipService.Default[_key]) {
            config[_key] = this.config[_key]; // TODO fix types
          }
        }
      }

      return config;
    }
  }, {
    key: "_cleanTipClass",
    value: function _cleanTipClass() {
      var _tip$getAttribute;

      var tip = this.getTipElement();
      var tabClass = (_tip$getAttribute = tip.getAttribute("class")) === null || _tip$getAttribute === void 0 ? void 0 : _tip$getAttribute.match(BSCLS_PREFIX_REGEX);

      if (tabClass && tabClass.length > 0) {
        tabClass.map(function (token) {
          return token.trim();
        }).forEach(function (tClass) {
          return tip.classList.remove(tClass);
        });
      }
    }
  }, {
    key: "_handlePopperPlacementChange",
    value: function _handlePopperPlacementChange(popperData) {
      this.tip = popperData.instance.popper;

      this._cleanTipClass();

      this._addAttachmentClass(this._getAttachment(popperData.placement));
    }
  }, {
    key: "_fixTransition",
    value: function _fixTransition() {
      var tip = this.getTipElement();
      var initConfigAnimation = this.config.animation;

      if (tip.getAttribute("x-placement") !== null) {
        return;
      }

      tip.classList.remove(tooltip_service_CLASS_NAME_FADE);
      this.config.animation = false;
      this.hide();
      this.show();
      this.config.animation = initConfigAnimation;
    } // Static

  }], [{
    key: "getInstance",
    value: function getInstance(element) {
      return dom_data.getData(element, tooltip_service_DATA_KEY);
    }
  }, {
    key: "VERSION",
    get: function get() {
      return tooltip_service_VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return tooltip_service_Default;
    }
  }, {
    key: "NAME",
    get: function get() {
      return tooltip_service_NAME;
    }
  }, {
    key: "DATA_KEY",
    get: function get() {
      return tooltip_service_DATA_KEY;
    }
  }, {
    key: "Event",
    get: function get() {
      return tooltip_service_Event;
    }
  }, {
    key: "EVENT_KEY",
    get: function get() {
      return tooltip_service_EVENT_KEY;
    }
  }, {
    key: "DefaultType",
    get: function get() {
      return tooltip_service_DefaultType;
    }
  }]);

  return TooltipService;
}();

defineProperty_default()(TooltipService, "CONSTANTS", {
  NAME: tooltip_service_NAME,
  VERSION: tooltip_service_VERSION,
  DATA_KEY: tooltip_service_DATA_KEY,
  EVENT_KEY: tooltip_service_EVENT_KEY,
  CLASS_PREFIX: CLASS_PREFIX,
  BSCLS_PREFIX_REGEX: BSCLS_PREFIX_REGEX,
  DISALLOWED_ATTRIBUTES: DISALLOWED_ATTRIBUTES,
  DefaultType: tooltip_service_DefaultType,
  AttachmentMap: AttachmentMap,
  Default: tooltip_service_Default,
  Event: tooltip_service_Event,
  CLASS_NAME_FADE: tooltip_service_CLASS_NAME_FADE,
  CLASS_NAME_MODAL: CLASS_NAME_MODAL,
  CLASS_NAME_SHOW: tooltip_service_CLASS_NAME_SHOW,
  HOVER_STATE_SHOW: HOVER_STATE_SHOW,
  HOVER_STATE_OUT: HOVER_STATE_OUT,
  SELECTOR_TOOLTIP_INNER: SELECTOR_TOOLTIP_INNER,
  TRIGGER_HOVER: TRIGGER_HOVER,
  TRIGGER_FOCUS: TRIGGER_FOCUS,
  TRIGGER_CLICK: TRIGGER_CLICK,
  TRIGGER_MANUAL: TRIGGER_MANUAL
});

/* harmony default export */ const tooltip_service = ((/* unused pure expression or super */ null && (TooltipService)));
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(6525);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/popover.service.ts








function popover_service_createSuper(Derived) { var hasNativeReflectConstruct = popover_service_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function popover_service_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function popover_service_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function popover_service_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { popover_service_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { popover_service_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * @see https://github.com/twbs/bootstrap/blob/main/js/src/popover.js
 * --------------------------------------------------------------------------
 */




/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
var popover_service_NAME = "popover";
var popover_service_VERSION = "5.0.0-alpha1";
var popover_service_DATA_KEY = "bs.popover";
var popover_service_EVENT_KEY = ".".concat(popover_service_DATA_KEY);
var popover_service_CLASS_PREFIX = "bs-popover";
var popover_service_BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)".concat(popover_service_CLASS_PREFIX, "\\S+"), "g");

var popover_service_Default = popover_service_objectSpread(popover_service_objectSpread({}, TooltipService.Default), {}, {
  placement: "right",
  trigger: "click",
  content: "",
  template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
});

var popover_service_DefaultType = popover_service_objectSpread(popover_service_objectSpread({}, TooltipService.DefaultType), {}, {
  content: "(string|element|function)"
});

var popover_service_Event = {
  HIDE: "hide".concat(popover_service_EVENT_KEY),
  HIDDEN: "hidden".concat(popover_service_EVENT_KEY),
  SHOW: "show".concat(popover_service_EVENT_KEY),
  SHOWN: "shown".concat(popover_service_EVENT_KEY),
  INSERTED: "inserted".concat(popover_service_EVENT_KEY),
  CLICK: "click".concat(popover_service_EVENT_KEY),
  FOCUSIN: "focusin".concat(popover_service_EVENT_KEY),
  FOCUSOUT: "focusout".concat(popover_service_EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(popover_service_EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(popover_service_EVENT_KEY)
};
var popover_service_CLASS_NAME_FADE = "fade";
var popover_service_CLASS_NAME_SHOW = "show";
var SELECTOR_TITLE = ".popover-header";
var SELECTOR_CONTENT = ".popover-body";
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var PopoverService = /*#__PURE__*/function (_TooltipService) {
  inherits_default()(PopoverService, _TooltipService);

  var _super = popover_service_createSuper(PopoverService);

  createClass_default()(PopoverService, null, [{
    key: "VERSION",
    // Export constants defined above as static members of the service class, to avoid name collisions in the global namespace.
    // Getters
    get: function get() {
      return popover_service_VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return popover_service_Default;
    }
  }, {
    key: "NAME",
    get: function get() {
      return popover_service_NAME;
    }
  }, {
    key: "DATA_KEY",
    get: function get() {
      return popover_service_DATA_KEY;
    }
  }, {
    key: "Event",
    get: function get() {
      return popover_service_Event;
    }
  }, {
    key: "EVENT_KEY",
    get: function get() {
      return popover_service_EVENT_KEY;
    }
  }, {
    key: "DefaultType",
    get: function get() {
      return popover_service_DefaultType;
    } // Overrides

  }]);

  function PopoverService(element, config) {
    var _this;

    classCallCheck_default()(this, PopoverService);

    _this = _super.call(this, element, config);
    element.style.backgroundColor = "#ffff00";
    return _this;
  }

  createClass_default()(PopoverService, [{
    key: "isWithContent",
    value: function isWithContent() {
      return Boolean(this.getTitle() || this._getContent());
    }
  }, {
    key: "setContent",
    value: function setContent(content) {
      var tip = this.getTipElement(); // we use append for html objects to maintain js events

      this.setElementContent(findOne(SELECTOR_TITLE, tip), this.getTitle());

      if (!content) {
        content = this._getContent();
      }

      if (typeof content === "function") {
        content = content(this.element);
      }

      if (content) {
        this.setElementContent(findOne(SELECTOR_CONTENT, tip), content);
      }

      tip.classList.remove(popover_service_CLASS_NAME_FADE, popover_service_CLASS_NAME_SHOW);
    } // Private

  }, {
    key: "_addAttachmentClass",
    value: function _addAttachmentClass(attachment) {
      this.getTipElement().classList.add("".concat(popover_service_CLASS_PREFIX, "-").concat(attachment));
    }
  }, {
    key: "_getContent",
    value: function _getContent() {
      return this.element.getAttribute("data-content") || this.config.content;
    }
  }, {
    key: "_cleanTipClass",
    value: function _cleanTipClass() {
      var _tip$getAttribute;

      var tip = this.getTipElement();
      var tabClass = tip === null || tip === void 0 ? void 0 : (_tip$getAttribute = tip.getAttribute("class")) === null || _tip$getAttribute === void 0 ? void 0 : _tip$getAttribute.match(popover_service_BSCLS_PREFIX_REGEX);

      if (tabClass && tabClass.length > 0) {
        tabClass.map(function (token) {
          return token.trim();
        }).forEach(function (tClass) {
          return tip.classList.remove(tClass);
        });
      }
    }
  }, {
    key: "_getPopperConfig",
    value: function _getPopperConfig(attachment) {
      var config = get_default()(getPrototypeOf_default()(PopoverService.prototype), "_getPopperConfig", this).call(this, attachment);

      config.modifiers.arrow.element = ".".concat(PopoverService.NAME, "-arrow");
      return config;
    } // Static

  }], [{
    key: "getInstance",
    value: function getInstance(element) {
      return getData(element, popover_service_DATA_KEY);
    }
  }]);

  return PopoverService;
}(TooltipService);

defineProperty_default()(PopoverService, "CONSTANTS", {
  NAME: popover_service_NAME,
  VERSION: popover_service_VERSION,
  DATA_KEY: popover_service_DATA_KEY,
  EVENT_KEY: popover_service_EVENT_KEY,
  CLASS_PREFIX: popover_service_CLASS_PREFIX,
  BSCLS_PREFIX_REGEX: popover_service_BSCLS_PREFIX_REGEX,
  Default: popover_service_Default,
  DefaultType: popover_service_DefaultType,
  Event: popover_service_Event,
  CLASS_NAME_FADE: popover_service_CLASS_NAME_FADE,
  CLASS_NAME_SHOW: popover_service_CLASS_NAME_SHOW,
  SELECTOR_TITLE: SELECTOR_TITLE,
  SELECTOR_CONTENT: SELECTOR_CONTENT
});

/* harmony default export */ const popover_service = ((/* unused pure expression or super */ null && (PopoverService)));
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/toast.service.ts





function toast_service_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function toast_service_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { toast_service_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { toast_service_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Fork of https://github.com/twbs/bootstrap/blob/main/js/src/toast.js

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.0.0-alpha1): toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */



/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var toast_service_NAME = "toast";
var toast_service_VERSION = "5.0.0-alpha1-riba";
var toast_service_DATA_KEY = "bs.toast";
var toast_service_EVENT_KEY = ".".concat(toast_service_DATA_KEY);
var toast_service_EVENT_CLICK_DISMISS = "click.dismiss".concat(toast_service_EVENT_KEY);
var toast_service_EVENT_HIDE = "hide".concat(toast_service_EVENT_KEY);
var toast_service_EVENT_HIDDEN = "hidden".concat(toast_service_EVENT_KEY);
var toast_service_EVENT_SHOW = "show".concat(toast_service_EVENT_KEY);
var toast_service_EVENT_SHOWN = "shown".concat(toast_service_EVENT_KEY);
var toast_service_CLASS_NAME_FADE = "fade";
var CLASS_NAME_HIDE = "hide";
var toast_service_CLASS_NAME_SHOW = "show";
var CLASS_NAME_SHOWING = "showing";
var toast_service_DefaultType = {
  animation: "boolean",
  autohide: "boolean",
  delay: "number"
};
var toast_service_Default = {
  animation: true,
  autohide: true,
  delay: 2000
}; // const SELECTOR_DATA_DISMISS = '[data-dismiss="toast"]';

/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var ToastService = /*#__PURE__*/function () {
  function ToastService(element, config) {
    classCallCheck_default()(this, ToastService);

    defineProperty_default()(this, "_element", void 0);

    defineProperty_default()(this, "_config", {});

    defineProperty_default()(this, "_timeout", null);

    this._element = element;
    this._config = this._getConfig(config);
    this._timeout = null;

    this._setListeners();

    dom_data.setData(element, toast_service_DATA_KEY, this);
  } // Getters


  createClass_default()(ToastService, [{
    key: "show",
    // Public
    value: function show() {
      var _this = this;

      var showEvent = event_handler.trigger(this._element, toast_service_EVENT_SHOW);

      if (showEvent.defaultPrevented) {
        return;
      }

      if (this._config.animation) {
        this._element.classList.add(toast_service_CLASS_NAME_FADE);
      }

      var complete = function complete() {
        if (!_this._element) {
          return;
        }

        _this._element.classList.remove(CLASS_NAME_SHOWING);

        _this._element.classList.add(toast_service_CLASS_NAME_SHOW);

        event_handler.trigger(_this._element, toast_service_EVENT_SHOWN);

        if (_this._config.autohide) {
          _this._timeout = setTimeout(function () {
            _this.hide();
          }, _this._config.delay);
        }
      };

      this._element.classList.remove(CLASS_NAME_HIDE);

      Utils.reflow(this._element);

      this._element.classList.add(CLASS_NAME_SHOWING);

      if (this._config.animation) {
        var transitionDuration = Utils.getTransitionDurationFromElement(this._element);
        event_handler.one(this._element, TRANSITION_END, complete);
        Utils.emulateTransitionEnd(this._element, transitionDuration);
      } else {
        complete();
      }
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this2 = this;

      if (!this._element.classList.contains(toast_service_CLASS_NAME_SHOW)) {
        return;
      }

      var hideEvent = event_handler.trigger(this._element, toast_service_EVENT_HIDE);

      if (hideEvent.defaultPrevented) {
        return;
      }

      var complete = function complete() {
        if (!_this2._element) {
          return;
        }

        _this2._element.classList.add(CLASS_NAME_HIDE);

        event_handler.trigger(_this2._element, toast_service_EVENT_HIDDEN);
      };

      this._element.classList.remove(toast_service_CLASS_NAME_SHOW);

      if (this._config.animation) {
        var transitionDuration = Utils.getTransitionDurationFromElement(this._element);
        event_handler.one(this._element, TRANSITION_END, complete);
        Utils.emulateTransitionEnd(this._element, transitionDuration);
      } else {
        complete();
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }

      this._timeout = null;

      if (this._element.classList.contains(toast_service_CLASS_NAME_SHOW)) {
        this._element.classList.remove(toast_service_CLASS_NAME_SHOW);
      } // EventHandler.off(this._element, EVENT_CLICK_DISMISS);


      dom_data.removeData(this._element, toast_service_DATA_KEY); // this._element = null;
      // this._config = null;
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      var _this$_element;

      config = toast_service_objectSpread(toast_service_objectSpread(toast_service_objectSpread({}, toast_service_Default), ((_this$_element = this._element) === null || _this$_element === void 0 ? void 0 : _this$_element.dataset) || {}), typeof_default()(config) === "object" && config ? config : {});
      Utils.typeCheckConfig(toast_service_NAME, config, ToastService.DefaultType);
      return config;
    }
  }, {
    key: "_setListeners",
    value: function _setListeners() {
      var _this3 = this;

      if (!this._element) {
        return;
      }

      event_handler.on(this._element, toast_service_EVENT_CLICK_DISMISS, // SELECTOR_DATA_DISMISS,
      function () {
        var _this3$_element;

        // const SELECTOR_DATA_DISMISS = '[data-dismiss="toast"]';
        if (((_this3$_element = _this3._element) === null || _this3$_element === void 0 ? void 0 : _this3$_element.dataset.dismiss) === "toast") {
          _this3.hide();
        }
      });
    } // Static

  }], [{
    key: "getInstance",
    value: function getInstance(element) {
      return dom_data.getData(element, toast_service_DATA_KEY);
    }
  }, {
    key: "VERSION",
    get: function get() {
      return toast_service_VERSION;
    }
  }, {
    key: "DefaultType",
    get: function get() {
      return toast_service_DefaultType;
    }
  }, {
    key: "Default",
    get: function get() {
      return toast_service_Default;
    }
  }]);

  return ToastService;
}();
/* harmony default export */ const toast_service = ((/* unused pure expression or super */ null && (ToastService)));
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/services/index.ts











// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/url.ts
var src_url = __webpack_require__(5263);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/bs4-collapse-on-url.binder.ts



/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/collapse/
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/js/src/collapse.js
 */

var collapseOnUrlBinder = {
  name: "bs4-collapse-on-url",
  routine: function routine(el, url) {
    var collapseService = new CollapseService(this.el, [], {
      toggle: false
    });
    var dispatcher = new src.EventDispatcher("main");

    var checkURL = function checkURL(urlToCheck) {
      if (urlToCheck && (0,src_url/* onRoute */.k9)(urlToCheck)) {
        collapseService.hide();
        return true;
      } // collapseService.show();


      return false;
    };

    dispatcher.on("newPageReady", function () {
      return checkURL(url);
    });
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/bs4-collapse.binder.ts
// import { CollapseService } from '../services/collapse.service';

/**
 * @deprecated
 */

var collapseBinder = {
  name: "bs4-collapse",
  bind: function bind() {
    console.warn("bs4-collapse is deprecated, use bs4-toggle-collapse-on-click instead.");
  },
  routine: function routine(el, targetSelector) {
    var targets = document.querySelectorAll(targetSelector);
    var collapseServices = [];
    targets.forEach(function (target) {
      collapseServices.push(new CollapseService(target, [el], {
        toggle: false
      }));
    });
    el.addEventListener("click", function (event) {
      event.preventDefault();
      collapseServices.forEach(function (collapseService) {
        collapseService.toggle();
      });
    });
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/bs4-toggle-collapse-on-event.binder.ts
// import { CollapseService } from '../services/collapse.service';


/**
 *
 */
var toggleCollapseOnEventBinder = {
  name: "bs4-toggle-collapse-on-*",
  collapseServices: [],
  targets: null,
  onEvent: function onEvent(event) {
    var self = this.binder || this;
    event.preventDefault(); // console.debug('[toggleCollapseOnEventBinder] onEvent', self.collapseServices);

    self.collapseServices.forEach(function (collapseService) {
      collapseService.toggle();
    });
  },
  bind: function bind() {
    /**/
  },
  unbind: function unbind() {
    var self = this.binder || this;
    var eventName = this.args[0];
    this.el.removeEventListener(eventName, self.onEvent.bind(this));
  },
  routine: function routine(el, targetSelector) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    var self = this.binder || this;
    var eventName = this.args[0];
    self.targets = document.querySelectorAll(targetSelector);

    if (self.targets.length <= 0) {
      console.warn("[toggleCollapseOnEventBinder] No element with selector \"".concat(targetSelector, "\" found."));
    }

    self.targets.forEach(function (target) {
      self.collapseServices.push(new CollapseService(target, [el], {
        toggle: false
      }));
    });
    el.addEventListener(eventName, self.onEvent.bind(this)); // onStateChange();
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/bs4-dropdown.binder.ts

/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/dropdown/
 */

var dropdownBinder = {
  name: "bs4-",
  routine: function routine(el) {
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var toggler;

    if (el.classList.contains("dropdown-toggle")) {
      toggler = el;
    } else {
      toggler = el.querySelector(".dropdown-toggle");
    }

    if (!toggler) {
      toggler = el;
    }

    var dropdownService = new DropdownService(toggler, option);
    toggler.addEventListener("click", function () {
      dropdownService.toggle();
    });
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/bs4-expan-on-url.binder.ts



/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/collapse/
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/js/src/collapse.js
 */

var expanOnUrlBinder = {
  name: "bs4-expan-on-url",
  routine: function routine(el, url) {
    var collapseService = new CollapseService(el, [], {
      toggle: false
    });
    var dispatcher = new src.EventDispatcher("main");

    var checkURL = function checkURL(urlToCheck) {
      if (urlToCheck && (0,src_url/* onRoute */.k9)(urlToCheck)) {
        collapseService.show();
        return true;
      }

      collapseService.hide();
      return false;
    };

    dispatcher.on("newPageReady", function () {
      return checkURL(url);
    });
    checkURL(url);
  }
};
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(3038);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/bs4-popover.binder.ts




function bs4_popover_binder_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function bs4_popover_binder_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { bs4_popover_binder_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { bs4_popover_binder_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


/**
 *
 */

/**
 *
 */
var popoverBinder = {
  name: "bs4-popover",
  block: false,
  routine: function routine(el, optionsOrContent) {
    var options = {};

    if (typeof optionsOrContent === "string") {
      options.content = optionsOrContent;
    } else if (typeof_default()(optionsOrContent) === "object") {
      options = bs4_popover_binder_objectSpread({}, optionsOrContent);
    }

    options.placement = options.placement || "auto";
    var popover = new PopoverService(el, bs4_popover_binder_objectSpread(bs4_popover_binder_objectSpread({}, PopoverService.Default), options)); // destroy previous popover if it already exists

    if (this.customData.popover) {
      this.customData.popover.dispose();
    }

    this.customData.popover = popover;
    /*
     * Methods "show", "hide", etc. of the PopoverService can be called by dispatching an
     * event `trigger-${methodName}` on the bound element.
     * All these methods have no arguments.
     */

    var methodNames = ["show", "hide", "toggle", "dispose", "enable", "disable", "toggleEnabled", "update" // render update
    ]; // remove listeners of previous Popover if there already was one

    if (this.customData.listeners) {
      for (var _i = 0, _Object$entries = Object.entries(this.customData.listeners); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = slicedToArray_default()(_Object$entries[_i], 2),
            trigger = _Object$entries$_i[0],
            listener = _Object$entries$_i[1];

        this.el.removeEventListener(trigger, listener);
      }
    }

    this.customData.listeners = Object.create(null);

    for (var _i2 = 0, _methodNames = methodNames; _i2 < _methodNames.length; _i2++) {
      var methodName = _methodNames[_i2];

      var _trigger = "trigger-".concat(methodName);

      var _listener = popover[methodName].bind(popover);

      this.el.addEventListener(_trigger, _listener);
      this.customData.listeners[_trigger] = _listener;
    }
  },
  bind: function bind(el) {
    // inform ancestors that this popover was bound
    // Event name in same style as the other popover CustomEvents from Bootstrap
    el.dispatchEvent(new CustomEvent("bound.bs.popover", {
      bubbles: true,
      cancelable: true
    }));
  },
  unbind: function unbind() {
    // destroy Popover if it already exists
    if (this.customData.popover) {
      this.customData.popover.dispose();
    } // remove listeners if there are any


    if (this.customData.listeners) {
      for (var _i3 = 0, _Object$entries2 = Object.entries(this.customData.listeners); _i3 < _Object$entries2.length; _i3++) {
        var _Object$entries2$_i = slicedToArray_default()(_Object$entries2[_i3], 2),
            trigger = _Object$entries2$_i[0],
            listener = _Object$entries2$_i[1];

        this.el.removeEventListener(trigger, listener);
      }
    }
  }
};
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/interfaces/index.ts
var interfaces = __webpack_require__(9888);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/bs4-show-toast-on.binder.ts


var showToastOnEventBinder = {
  name: "show-toast-on-*",
  onEvent: function onEvent(event) {
    console.debug("[show-toast-on-*] event.detail:", event.detail);
    this.customData.toastData.$event = event;
    this.customData.toastData.$context = this.view.models;
    console.debug(this.customData.toastData);
    var toastData = new interfaces.Toast(this.customData.toastData);
    var notificationDispatcher = new src.EventDispatcher(toastData.channel || "toast");
    notificationDispatcher.trigger("show-notification", toastData);
  },
  bind: function bind(el) {
    this.customData = {};
    var eventName = this.args[0];
    el.addEventListener(eventName, this.binder.onEvent.bind(this));
  },
  routine: function routine(el, toastData) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    this.customData.toastData = toastData;
  },
  unbind: function unbind(el) {
    var eventName = this.args[0];
    el.removeEventListener(eventName, this.binder.onEvent.bind(this));
  }
};
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/control.ts
var control = __webpack_require__(417);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/bs4-scrollspy-class.binder.ts

/**
 * scrollspy-class
 * @see https://getbootstrap.com/docs/4.1/components/scrollspy/
 */

var scrollspyClassBinder = {
  name: "bs4-scrollspy-*",
  bind: function bind(el) {
    var _this = this;

    this.customData = {};
    /**
     * Determine if an element is in the viewport
     * @param elem The element
     * @return Returns true if element is in the viewport
     */

    this.customData.isInViewport = function (elem) {
      if (!elem) {
        return false;
      }

      var distance = elem.getBoundingClientRect();
      _this.customData.offsetTop = Number(el.dataset.offset || 0);
      _this.customData.offsetBottom = Number(el.dataset.offsetBottom || 0);
      return distance.top + distance.height >= _this.customData.offsetBottom && distance.bottom - distance.height <= _this.customData.offsetTop;
    };

    this.customData.onScroll = function () {
      var target = _this.customData.target;
      var className = _this.customData.className;

      if (!_this.customData.target) {
        return;
      }
      /**
       * Because we are looking if the element is in viewport we should use the parent wrapper instead of header elements
       */
      // if (target.tagName === 'H1' || target.tagName === 'H2' || target.tagName === 'H3' || target.tagName === 'H4' || target.tagName === 'H5' || target.tagName === 'H6') {
      //   if (target.parentElement.tagName === 'SECTION') {
      //     target = target.parentElement;
      //   }
      // }


      if (_this.customData.isInViewport(target)) {
        el.classList.add(className);

        if (el.type === "radio") {
          el.checked = true;
        }
      } else {
        el.classList.remove(className);

        if (el.type === "radio") {
          el.checked = false;
        }
      }
    };

    window.addEventListener("scroll", (0,control/* debounce */.Ds)(this.customData.onScroll.bind(this)), {
      passive: true
    });
    this.customData.onScroll();
  },
  routine: function routine(el, targetSelector) {
    var nativeIDTargetSelector = targetSelector.replace("#", "");
    this.customData.target = document.getElementById(nativeIDTargetSelector);
    this.customData.className = this.args[0];
  },
  unbind: function unbind() {
    window.removeEventListener("scroll", (0,control/* debounce */.Ds)(this.customData.onScroll.bind(this)));
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/bs4-tooltip.binder.ts
 // /dist/umd/popper

/**
 *
 * @see https://getbootstrap.com/docs/4.1/components/tooltips/
 * @see https://github.com/twbs/bootstrap/blob/v4-dev/js/src/tooltip.js
 */

var template = document.createElement("div");
template.classList.add("tooltip");
template.setAttribute("role", "tooltip");
var bs4_tooltip_binder_arrow = document.createElement("div");
bs4_tooltip_binder_arrow.classList.add("arrow");
template.appendChild(bs4_tooltip_binder_arrow);
var bs4_tooltip_binder_inner = document.createElement("div");
bs4_tooltip_binder_inner.classList.add("tooltip-inner");
template.appendChild(bs4_tooltip_binder_inner);
/**
 *
 */

var tooltipBinder = {
  name: "bs4-tooltip",
  block: false,
  bind: function bind(el) {
    var _this = this;

    // this.customData.$tip = $(template);
    this.customData.tip = template.cloneNode(true);

    this.customData.show = function () {
      var placement = _this.el.dataset.placement || "top";
      var offset = 0;
      _this.customData.popper = new popper(el, _this.customData.tip, {
        placement: placement,
        modifiers: {
          offset: {
            offset: offset
          },
          flip: {
            behavior: "flip"
          },
          arrow: {
            element: ".arrow"
          },
          preventOverflow: {
            boundariesElement: "scrollParent"
          }
        }
      });
      document.body.appendChild(_this.customData.tip);

      _this.customData.tip.classList.add("show");

      _this.customData.tip.classList.add("bs-tooltip-" + placement);
    };

    this.customData.hide = function () {
      _this.customData.tip.classList.remove("show");

      if (_this.customData.popper) {
        _this.customData.popper.destroy();
      }
    };

    el.addEventListener("mouseenter", this.customData.show);
    el.addEventListener("mouseleave", this.customData.hide);
  },
  routine: function routine(el, text) {
    var innerEl = this.customData.tip.querySelector(".tooltip-inner");
    innerEl.innerHTML = text;
  },
  unbind: function unbind() {
    this.customData.hide();
    this.el.removeEventListener("mouseenter", this.customData.show);
    this.el.removeEventListener("mouseleave", this.customData.hide);
  }
};
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/dom.ts
var dom = __webpack_require__(8277);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/scroll-to-on-event.binder.ts

var scrollToOnEventBinder = {
  name: "scroll-to-on-*",
  bind: function bind(el) {
    var _this = this;

    this.customData = {};

    this.customData.onEvent = function (event) {
      var offset = Number(el.dataset.offset || 0);
      var scrollElement = el.dataset.scrollElement ? document.querySelector(el.dataset.scrollElement) : window;
      (0,dom/* scrollTo */.X5)(_this.customData.target, offset, scrollElement);
      event.preventDefault();
    };

    var eventName = this.args[0];
    el.addEventListener(eventName, this.customData.onEvent);
  },
  routine: function routine(el, targetSelector) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    var eventName = this.args[0];
    this.customData.target = document.querySelector(targetSelector);
    el.addEventListener(eventName, this.customData.onEvent);
  },
  unbind: function unbind(el) {
    var eventName = this.args[0];
    el.removeEventListener(eventName, this.customData.onEvent);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/constants.ts
// EventDispatcher events
var TOGGLE_BUTTON = {
  nsPrefix: "bs4-toggle-button:",
  eventNames: {
    toggle: "toggle",
    toggled: "toggled",
    init: "init",
    state: "state"
  }
};
var TOGGLE_ATTRIBUTE = {
  elEventNames: {
    removed: "removed",
    added: "added"
  }
};
var TOGGLE_CLASS = {
  elEventNames: {
    removed: "removed",
    added: "added"
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/toggle-attribute.binder.ts


/**
 * Adds / removes the attribute on click on the bs4-toggle-button with the same id
 * E.g. with this binder you can toggle a hidden attribute to show / hide the element
 * Events
 * * `off`
 * * `on`
 */

var toggleAttributeBinder = {
  name: "bs4-toggle-attribute-*",
  toggleButtonEvents: null,
  state: "off",
  triggerState: function triggerState() {
    var _self$toggleButtonEve;

    var self = this.binder || this;
    (_self$toggleButtonEve = self.toggleButtonEvents) === null || _self$toggleButtonEve === void 0 ? void 0 : _self$toggleButtonEve.trigger(TOGGLE_BUTTON.eventNames.state, self.state);
  },
  onToggle: function onToggle() {
    var self = this.binder || this; // console.debug('onToggle', (this.binder as Bs4ToggleAttribute));

    self.toggle.bind(this)(this.el);
  },
  toggle: function toggle(el) {
    var self = this.binder || this;

    if (self.state === "removed") {
      self.add.bind(this)(el);
    } else {
      self.remove.bind(this)(el);
    }
  },
  remove: function remove(el) {
    var self = this.binder || this;
    var attributeName = this.args[0];
    el.removeAttribute(attributeName);
    self.state = "removed";
    el.dispatchEvent(new CustomEvent(TOGGLE_ATTRIBUTE.elEventNames.removed, {
      detail: {
        attributeName: attributeName
      }
    }));
    self.triggerState();
  },
  add: function add(el) {
    var self = this.binder || this;
    var attributeName = this.args[0];
    el.setAttribute(attributeName, attributeName);
    self.state = "added";
    el.dispatchEvent(new CustomEvent(TOGGLE_ATTRIBUTE.elEventNames.added, {
      detail: {
        attributeName: attributeName
      }
    }));
    self.triggerState();
  },
  bind: function bind(el) {
    var self = this.binder || this;
    var attributeName = this.args[0];
    self.state = el.hasAttribute(attributeName) ? "added" : "removed";
  },
  unbind: function unbind() {
    var _self$toggleButtonEve2, _self$toggleButtonEve3;

    var self = this.binder || this;
    (_self$toggleButtonEve2 = self.toggleButtonEvents) === null || _self$toggleButtonEve2 === void 0 ? void 0 : _self$toggleButtonEve2.off(TOGGLE_BUTTON.eventNames.toggle, self.onToggle.bind(this));
    (_self$toggleButtonEve3 = self.toggleButtonEvents) === null || _self$toggleButtonEve3 === void 0 ? void 0 : _self$toggleButtonEve3.off(TOGGLE_BUTTON.eventNames.init, self.triggerState.bind(this));
  },
  routine: function routine(el, newId) {
    var oldId = this.getValue(el);
    var self = this.binder || this;
    var toggleButton = self.toggleButtonEvents;

    if (oldId && toggleButton) {
      toggleButton.off(TOGGLE_BUTTON.eventNames.toggle, self.onToggle.bind(this));
      toggleButton.off(TOGGLE_BUTTON.eventNames.init, self.triggerState.bind(this));
    }

    if (!self.toggleButtonEvents) {
      self.toggleButtonEvents = new src.EventDispatcher(TOGGLE_BUTTON.nsPrefix + newId);
      toggleButton = self.toggleButtonEvents;
      toggleButton.on(TOGGLE_BUTTON.eventNames.toggle, self.onToggle.bind(this));
      toggleButton.on(TOGGLE_BUTTON.eventNames.init, self.triggerState.bind(this));
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/toggle-class.binder.ts


/**
 * Adds / removes the class on click on the bs4-toggle-button with the same id
 *
 * Events
 * * `off`
 * * `on`
 */

var toggleClassBinder = {
  name: "bs4-toggle-class-*",
  toggleButtonEvents: null,
  state: "off",
  triggerState: function triggerState() {
    var _self$toggleButtonEve;

    var self = this.binder || this;
    (_self$toggleButtonEve = self.toggleButtonEvents) === null || _self$toggleButtonEve === void 0 ? void 0 : _self$toggleButtonEve.trigger(TOGGLE_BUTTON.eventNames.state, self.state);
  },
  onToggle: function onToggle() {
    var self = this.binder || this; // console.debug('onToggle', (this.binder as Bs4ToggleClass));

    self.toggle.bind(this)(this.el);
  },
  toggle: function toggle(el) {
    var self = this.binder || this;

    if (self.state === "removed") {
      self.add.bind(this)(el);
    } else {
      self.remove.bind(this)(el);
    }
  },
  remove: function remove(el) {
    var self = this.binder || this;
    var className = this.args[0];
    el.classList.remove(className);
    self.state = "removed";
    el.dispatchEvent(new CustomEvent(TOGGLE_CLASS.elEventNames.removed, {
      detail: {
        className: className
      }
    }));
    self.triggerState();
  },
  add: function add(el) {
    var self = this.binder || this;
    var className = this.args[0];
    el.classList.add(className, className);
    self.state = "added";
    el.dispatchEvent(new CustomEvent(TOGGLE_CLASS.elEventNames.added, {
      detail: {
        className: className
      }
    }));
    self.triggerState();
  },
  bind: function bind(el) {
    var self = this.binder || this;
    var className = this.args[0];
    self.state = el.classList.contains(className) ? "added" : "removed";
  },
  unbind: function unbind() {
    var _self$toggleButtonEve2, _self$toggleButtonEve3;

    var self = this.binder || this;
    (_self$toggleButtonEve2 = self.toggleButtonEvents) === null || _self$toggleButtonEve2 === void 0 ? void 0 : _self$toggleButtonEve2.off(TOGGLE_BUTTON.eventNames.toggle, self.onToggle.bind(this));
    (_self$toggleButtonEve3 = self.toggleButtonEvents) === null || _self$toggleButtonEve3 === void 0 ? void 0 : _self$toggleButtonEve3.off(TOGGLE_BUTTON.eventNames.init, self.triggerState.bind(this));
  },
  routine: function routine(el, newId) {
    var oldId = this.getValue(el);
    var self = this.binder || this;
    var toggleButton = self.toggleButtonEvents;

    if (oldId && toggleButton) {
      toggleButton.off(TOGGLE_BUTTON.eventNames.toggle, self.onToggle.bind(this));
      toggleButton.off(TOGGLE_BUTTON.eventNames.init, self.triggerState.bind(this));
    }

    if (!self.toggleButtonEvents) {
      self.toggleButtonEvents = new src.EventDispatcher(TOGGLE_BUTTON.nsPrefix + newId);
      toggleButton = self.toggleButtonEvents;
      toggleButton.on(TOGGLE_BUTTON.eventNames.toggle, self.onToggle.bind(this));
      toggleButton.on(TOGGLE_BUTTON.eventNames.init, self.triggerState.bind(this));
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/binders/index.ts












// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-dropdown/bs4-dropdown.component.ts









function bs4_dropdown_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_dropdown_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_dropdown_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }



var Bs4DropdownComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4DropdownComponent, _Component);

  var _super = bs4_dropdown_component_createSuper(Bs4DropdownComponent);

  createClass_default()(Bs4DropdownComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return [];
    }
  }]);

  function Bs4DropdownComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4DropdownComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      toggle: _this.toggle
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "dropdownService", void 0);

    return _this;
  }

  createClass_default()(Bs4DropdownComponent, [{
    key: "toggle",
    value: function toggle(event) {
      event.preventDefault();
      event.stopPropagation();

      if (!this.dropdownService) {
        throw new Error("DropdownService not ready!");
      }

      return this.dropdownService.toggle();
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4DropdownComponent.prototype), "connectedCallback", this).call(this);

      this.dropdownService = new DropdownService(this.el.querySelector(".dropdown-toggle"));
      this.init(Bs4DropdownComponent.observedAttributes);
    }
  }, {
    key: "template",
    value: function template() {
      return null;
    }
  }]);

  return Bs4DropdownComponent;
}(src.Component);

defineProperty_default()(Bs4DropdownComponent, "tagName", "bs4-dropdown");
// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/components/templates/templates.component.ts









function templates_component_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function templates_component_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { templates_component_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { templates_component_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function templates_component_createSuper(Derived) { var hasNativeReflectConstruct = templates_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function templates_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


 // import { hasChildNodesTrim } from "@ribajs/utils/src/dom";

var TemplatesComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(TemplatesComponent, _Component);

  var _super = templates_component_createSuper(TemplatesComponent);

  function TemplatesComponent() {
    var _this;

    classCallCheck_default()(this, TemplatesComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    defineProperty_default()(assertThisInitialized_default()(_this), "templateAttributes", []);

    defineProperty_default()(assertThisInitialized_default()(_this), "templateReady", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", void 0);

    return _this;
  }

  createClass_default()(TemplatesComponent, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      this.addItemsByTemplate();

      get_default()(getPrototypeOf_default()(TemplatesComponent.prototype), "connectedCallback", this).call(this);

      this.removeTemplates();
      this.bindIfReady();
    }
  }, {
    key: "ready",
    value: function ready() {
      return get_default()(getPrototypeOf_default()(TemplatesComponent.prototype), "ready", this).call(this) && this.templateReady;
    }
    /**
     * Called before getting attribute value, use this method to tramsform the attribute value if you wish
     * @param name Attribute name
     * @param value Attribute value
     */

  }, {
    key: "transformTemplateAttribute",
    value: function transformTemplateAttribute(name, value, type) {
      switch (type) {
        case "number":
          value = Number(value);
          break;

        case "boolean":
          value = value === "true";
          break;

        case "string":
        default:
          break;
      }

      return value;
    }
    /**
     * Called before getting all attribute values, use this method to tramsform the attribute values if you wish
     * @param attributes
     */

  }, {
    key: "transformTemplateAttributes",
    value: function transformTemplateAttributes(attributes, index) {
      attributes.index = attributes.index || index;
      return attributes;
    }
  }, {
    key: "getTemplateAttributes",
    value: function getTemplateAttributes(tpl, index) {
      var attributes = {};

      var _iterator = _createForOfIteratorHelper(this.templateAttributes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var attribute = _step.value;
          var attrValue = tpl.getAttribute(attribute.name);

          if (typeof attrValue !== "string" && attribute.required) {
            console.error(new Error("template \"".concat(attribute.name, "\" attribute is required!")));
          } else {
            attributes[(0,type/* camelCase */.eV)(attribute.name)] = this.transformTemplateAttribute(attribute.name, tpl.getAttribute(attribute.name));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return this.transformTemplateAttributes(attributes, index);
    }
  }, {
    key: "addItemByTemplate",
    value: function addItemByTemplate(tpl, index) {
      var attributes = this.getTemplateAttributes(tpl, index);
      var content = tpl.innerHTML;
      this.scope.items.push(templates_component_objectSpread(templates_component_objectSpread({}, attributes), {}, {
        content: content
      }));
    }
  }, {
    key: "addItemsByTemplate",
    value: function addItemsByTemplate() {
      var templates = this.el.querySelectorAll("template");

      for (var index = 0; index < templates.length; index++) {
        var tpl = templates[index];
        this.addItemByTemplate(tpl, index);
      }

      this.templateReady = true;
    }
  }, {
    key: "removeTemplates",
    value: function removeTemplates() {
      var templates = this.el.querySelectorAll("template");

      for (var index = 0; index < templates.length; index++) {
        var tpl = templates[index];
        this.el.removeChild(tpl);
      }
    }
  }, {
    key: "hasOnlyTemplateChilds",
    value: function hasOnlyTemplateChilds() {
      return !Array.from(this.el.childNodes).some(function (child) {
        return child.nodeName !== "TEMPLATE" && child.nodeName !== "#text";
      });
    } // protected template() {
    //   // Only set the component template if there no childs or the childs are templates
    //   if (!hasChildNodesTrim(this.el) || this.hasOnlyTemplateChilds()) {
    //     return template;
    //   } else {
    //     return null;
    //   }
    // }

  }]);

  return TemplatesComponent;
}(src.Component);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/templates/templates.component.ts
/**
 * @deprecated Moved abstract TemplatesComponent to core module
 */

// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-accordion/bs4-accordion.component.html
var bs4_accordion_component = __webpack_require__(8129);
var bs4_accordion_component_default = /*#__PURE__*/__webpack_require__.n(bs4_accordion_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-accordion/bs4-accordion.component.ts











function bs4_accordion_component_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = bs4_accordion_component_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function bs4_accordion_component_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return bs4_accordion_component_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return bs4_accordion_component_arrayLikeToArray(o, minLen); }

function bs4_accordion_component_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function bs4_accordion_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_accordion_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_accordion_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }






var handleize = src.handleizeFormatter.read;
var Bs4AccordionComponent = /*#__PURE__*/function (_TemplatesComponent) {
  inherits_default()(Bs4AccordionComponent, _TemplatesComponent);

  var _super = bs4_accordion_component_createSuper(Bs4AccordionComponent);

  createClass_default()(Bs4AccordionComponent, null, [{
    key: "observedAttributes",
    // protected collapseServices: CollapseService[] = [];
    get: function get() {
      return ["collapse-icon-src", "collapse-icon-size", "show-only-one"];
    }
  }]);

  function Bs4AccordionComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4AccordionComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "templateAttributes", [{
      name: "title",
      required: true
    }, {
      name: "show",
      required: false
    }, {
      name: "icon-direction",
      required: false
    }]);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      items: [],
      toggle: _this.toggle,
      show: _this.show,
      hide: _this.hide,
      collapseIconSize: 16,
      showOnlyOne: true
    });

    return _this;
  }

  createClass_default()(Bs4AccordionComponent, [{
    key: "hide",
    value: function hide(item, index) {
      var target = this.el.querySelector("[data-index=\"".concat(index, "\"]"));

      if (target) {
        this.initItemEventListeners(item, target);
        new CollapseService(target, [this.el], {
          toggle: false
        }).hide();
      }
    }
  }, {
    key: "show",
    value: function show(item, index) {
      var target = this.el.querySelector("[data-index=\"".concat(index, "\"]"));
      var others = Array.from(this.el.querySelectorAll("[data-index]:not([data-index=\"".concat(index, "\"])")));

      if (others && this.scope.showOnlyOne) {
        var _iterator = bs4_accordion_component_createForOfIteratorHelper(others),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var other = _step.value;
            new CollapseService(other, [], {
              toggle: false
            }).hide();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      if (target) {
        this.initItemEventListeners(item, target);
        new CollapseService(target, [], {
          toggle: false
        }).show();
      }
    }
  }, {
    key: "toggle",
    value: function toggle(item, index) {
      var target = this.el.querySelector("[data-index=\"".concat(index, "\"]"));
      var others = Array.from(this.el.querySelectorAll("[data-index]:not([data-index=\"".concat(index, "\"])")));

      if (others && this.scope.showOnlyOne) {
        var _iterator2 = bs4_accordion_component_createForOfIteratorHelper(others),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var other = _step2.value;
            new CollapseService(other, [], {
              toggle: false
            }).hide();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      if (target) {
        this.initItemEventListeners(item, target);
        new CollapseService(target, [], {
          toggle: false
        }).toggle();
      }
    }
  }, {
    key: "initItemEventListeners",
    value: function initItemEventListeners(item, element) {
      element.removeEventListener(EVENT_HIDE, this.onHide.bind(this, element, item));
      element.removeEventListener(EVENT_SHOW, this.onShow.bind(this, element, item));
      element.addEventListener(EVENT_HIDE, this.onHide.bind(this, element, item), {
        once: true
      });
      element.addEventListener(EVENT_SHOW, this.onShow.bind(this, element, item), {
        once: true
      });
    }
  }, {
    key: "getContentChildByIndex",
    value: function getContentChildByIndex() {
      return this.el.querySelector(".card-body > *") || undefined;
    }
  }, {
    key: "onShow",
    value: function onShow(element, item) {
      item.show = true;
      item.iconDirection = "up";
      var firstContentChild = this.getContentChildByIndex();

      if (firstContentChild) {
        this.triggerVisibilityChangedForElement(firstContentChild, item.show);
      }
    }
  }, {
    key: "onHide",
    value: function onHide(element, item) {
      item.show = false;
      item.iconDirection = "down";
      var firstContentChild = this.getContentChildByIndex();

      if (firstContentChild) {
        this.triggerVisibilityChangedForElement(firstContentChild, item.show);
      }
    }
  }, {
    key: "transformTemplateAttributes",
    value: function transformTemplateAttributes(attributes) {
      attributes.handle = attributes.handle || handleize(attributes.title);
      attributes.show = !!attributes.show;
      attributes.iconDirection = attributes.iconDirection || attributes.show ? "up" : "down";
      return attributes;
    }
    /**
     * Trigger `visibility-changed` for components that need to update if visibility changes.
     * Se also bsf-tabs
     * @param element
     * @param visibile
     */

  }, {
    key: "triggerVisibilityChangedForElement",
    value: function triggerVisibilityChangedForElement(element, visibile) {
      setTimeout(function () {
        // Use this event to update any custom element when it becomes visibile
        element.dispatchEvent(new CustomEvent("visibility-changed", {
          detail: {
            visibile: visibile
          }
        }));
      }, 200);
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4AccordionComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4AccordionComponent.observedAttributes);
    }
  }, {
    key: "init",
    value: function () {
      var _init = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(observedAttributes) {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", get_default()(getPrototypeOf_default()(Bs4AccordionComponent.prototype), "init", this).call(this, observedAttributes).then(function (view) {
                  return view;
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "beforeBind",
    value: function () {
      var _beforeBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4AccordionComponent.prototype), "beforeBind", this).call(this);

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function beforeBind() {
        return _beforeBind.apply(this, arguments);
      }

      return beforeBind;
    }()
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4AccordionComponent.prototype), "afterBind", this).call(this);

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return [];
    }
  }, {
    key: "parsedAttributeChangedCallback",
    value: function parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      get_default()(getPrototypeOf_default()(Bs4AccordionComponent.prototype), "parsedAttributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);
    } // deconstructor

  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4AccordionComponent.prototype), "disconnectedCallback", this).call(this);
    }
  }, {
    key: "template",
    value: function template() {
      // Only set the component template if there no childs or the childs are templates
      if (!(0,dom/* hasChildNodesTrim */.Np)(this.el) || this.hasOnlyTemplateChilds()) {
        return (bs4_accordion_component_default());
      } else {
        return null;
      }
    }
  }]);

  return Bs4AccordionComponent;
}(TemplatesComponent);

defineProperty_default()(Bs4AccordionComponent, "tagName", "bs4-accordion");
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-button/bs4-button.component.ts











function bs4_button_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_button_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_button_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var Bs4ButtonComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4ButtonComponent, _Component);

  var _super = bs4_button_component_createSuper(Bs4ButtonComponent);

  createClass_default()(Bs4ButtonComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["animation-class"];
    }
  }]);

  function Bs4ButtonComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4ButtonComponent);

    _this = _super.call(this, element); // console.debug('constructor', this);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      animationClass: "btn-animation-start",
      onClick: _this.onClick
    });

    return _this;
  }

  createClass_default()(Bs4ButtonComponent, [{
    key: "onClick",
    value: function onClick() {
      // console.debug('onClick');
      this.startAnimation();
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4ButtonComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4ButtonComponent.observedAttributes);
    }
  }, {
    key: "startAnimation",
    value: function startAnimation() {
      this.el.classList.add(this.scope.animationClass);
    }
  }, {
    key: "onStartAnimation",
    value: function onStartAnimation() {// console.debug('onStartAnimation');
    }
  }, {
    key: "onEndAnimation",
    value: function onEndAnimation() {
      var _this2 = this;

      // window.getComputedStyle(this.el)
      // console.debug('onEndAnimation', event, window.getComputedStyle(this.el));
      setTimeout(function () {
        _this2.el.classList.remove(_this2.scope.animationClass);
      });
    }
  }, {
    key: "init",
    value: function () {
      var _init = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(observedAttributes) {
        var _this3 = this;

        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", get_default()(getPrototypeOf_default()(Bs4ButtonComponent.prototype), "init", this).call(this, observedAttributes).then(function (view) {
                  _this3.el.addEventListener("webkitAnimationStart", _this3.onStartAnimation.bind(_this3));

                  _this3.el.addEventListener("animationstart", _this3.onStartAnimation.bind(_this3));

                  _this3.el.addEventListener("webkitAnimationEnd", _this3.onEndAnimation.bind(_this3));

                  _this3.el.addEventListener("animationend", _this3.onEndAnimation.bind(_this3));

                  _this3.el.addEventListener("click", _this3.onClick.bind(_this3));

                  return view;
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "beforeBind",
    value: function () {
      var _beforeBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4ButtonComponent.prototype), "beforeBind", this).call(this);

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function beforeBind() {
        return _beforeBind.apply(this, arguments);
      }

      return beforeBind;
    }()
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4ButtonComponent.prototype), "afterBind", this).call(this);

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return [];
    }
  }, {
    key: "parsedAttributeChangedCallback",
    value: function parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      get_default()(getPrototypeOf_default()(Bs4ButtonComponent.prototype), "parsedAttributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);
    } // deconstructor

  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4ButtonComponent.prototype), "disconnectedCallback", this).call(this);

      this.el.removeEventListener("webkitAnimationStart", this.onStartAnimation.bind(this));
      this.el.removeEventListener("animationstart", this.onStartAnimation.bind(this));
      this.el.removeEventListener("webkitAnimationEnd", this.onEndAnimation.bind(this));
      this.el.removeEventListener("animationend", this.onEndAnimation.bind(this));
      this.el.removeEventListener("click", this.onClick.bind(this));
    }
  }, {
    key: "template",
    value: function template() {
      return null;
    }
  }]);

  return Bs4ButtonComponent;
}(src.Component);

defineProperty_default()(Bs4ButtonComponent, "tagName", "bs4-button");
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-carousel/bs4-carousel.component.ts











function bs4_carousel_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_carousel_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_carousel_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }



var Bs4CarouselComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4CarouselComponent, _Component);

  var _super = bs4_carousel_component_createSuper(Bs4CarouselComponent);

  createClass_default()(Bs4CarouselComponent, [{
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return [];
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ["interval", "keyboard", "slide", "pauseOn", "wrap", "touch", "ride", "fade"];
    }
  }]);

  function Bs4CarouselComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4CarouselComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      // Properties
      interval: carousel_service.Default.interval,
      keyboard: carousel_service.Default.keyboard,
      slide: carousel_service.Default.slide,
      pauseOn: carousel_service.Default.pause || false,
      // changed from pause to pauseOn
      wrap: carousel_service.Default.wrap,
      touch: carousel_service.Default.touch,
      ride: carousel_service.Default.touch || false,
      fade: false,
      // Methods
      next: _this.next,
      nextWhenVisible: _this.nextWhenVisible,
      prev: _this.prev,
      pause: _this.pause,
      cycle: _this.cycle,
      to: _this.to,
      dispose: _this.dispose
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "carouselService", void 0);

    return _this;
  }

  createClass_default()(Bs4CarouselComponent, [{
    key: "beforeBind",
    value: function () {
      var _beforeBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4CarouselComponent.prototype), "beforeBind", this).call(this);

              case 2:
                this.el.classList.add("carousel", "slide");

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function beforeBind() {
        return _beforeBind.apply(this, arguments);
      }

      return beforeBind;
    }()
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4CarouselComponent.prototype), "afterBind", this).call(this);

              case 2:
                this.carouselService = new carousel_service(this.el, {
                  interval: this.scope.interval,
                  keyboard: this.scope.keyboard,
                  slide: this.scope.slide,
                  pause: this.scope.pauseOn,
                  wrap: this.scope.wrap,
                  touch: this.scope.touch
                });

                if (this.scope.fade) {
                  this.el.classList.add("carousel-fade");
                } // TODO make this configurateable?


                this.carouselService.cycle();

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "next",
    value: function next() {
      if (this.carouselService) {
        this.carouselService.next();
      }
    }
  }, {
    key: "nextWhenVisible",
    value: function nextWhenVisible() {
      if (this.carouselService) {
        this.carouselService.nextWhenVisible();
      }
    }
  }, {
    key: "prev",
    value: function prev() {
      if (this.carouselService) {
        this.carouselService.prev();
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this.carouselService) {
        this.carouselService.pause();
      }
    }
  }, {
    key: "cycle",
    value: function cycle(event) {
      if (this.carouselService) {
        this.carouselService.cycle(event);
      }
    }
  }, {
    key: "to",
    value: function to(index) {
      if (this.carouselService) {
        this.carouselService.to(index);
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (this.carouselService) {
        this.carouselService.dispose();
      }
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4CarouselComponent.prototype), "connectedCallback", this).call(this);

      get_default()(getPrototypeOf_default()(Bs4CarouselComponent.prototype), "init", this).call(this, Bs4CarouselComponent.observedAttributes);
    }
  }, {
    key: "template",
    value: function template() {
      return null;
    }
  }]);

  return Bs4CarouselComponent;
}(src.Component);

defineProperty_default()(Bs4CarouselComponent, "tagName", "bs4-carousel");
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-contents/bs4-contents.component.html
var bs4_contents_component = __webpack_require__(3090);
var bs4_contents_component_default = /*#__PURE__*/__webpack_require__.n(bs4_contents_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-contents/bs4-contents.component.ts











function bs4_contents_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_contents_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_contents_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }




var Bs4ContentsComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4ContentsComponent, _Component);

  var _super = bs4_contents_component_createSuper(Bs4ContentsComponent);

  createClass_default()(Bs4ContentsComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["headers-start", "headers-depth", "find-header-id-depth", "header-parent-selector", "scroll-offset", "scroll-element"];
    }
  }]);

  function Bs4ContentsComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4ContentsComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "wrapperElement", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      headersDepth: 1,
      headersStart: 2,
      findHeaderIdDepth: 1,
      headerParentSelector: undefined,
      scrollOffset: 0,
      anchors: []
    });

    return _this;
  }

  createClass_default()(Bs4ContentsComponent, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4ContentsComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4ContentsComponent.observedAttributes);
    }
  }, {
    key: "getIdFromElementOrParent",
    value: function getIdFromElementOrParent(element) {
      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      if (element.id) {
        return element.id;
      }

      if (depth <= this.scope.findHeaderIdDepth) {
        if (element.parentElement) {
          return this.getIdFromElementOrParent(element.parentElement, ++depth);
        }
      }

      return null;
    }
  }, {
    key: "pushHeaders",
    value: function pushHeaders(wrapperElement, headersStart, headersDepth, pushTo) {
      var _this2 = this;

      var headerElements = wrapperElement.querySelectorAll("h" + headersStart);
      headerElements.forEach(function (headerElement) {
        var id = _this2.getIdFromElementOrParent(headerElement);

        if (!id) {
          return;
        }

        pushTo.push({
          element: headerElement,
          href: "#" + id,
          title: headerElement.innerHTML,
          childs: []
        });

        if (headerElement.parentElement && headersDepth >= headersStart + 1) {
          _this2.pushHeaders(headerElement.parentElement, headersStart + 1, headersDepth, pushTo[pushTo.length - 1].childs);
        }
      });
    }
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4ContentsComponent.prototype), "afterBind", this).call(this);

              case 2:
                if (!(this.scope.headerParentSelector && this.scope.headersStart && this.scope.headersDepth)) {
                  _context.next = 9;
                  break;
                }

                this.wrapperElement = document.querySelector(this.scope.headerParentSelector) || undefined;
                this.scope.anchors = [];

                if (this.wrapperElement) {
                  _context.next = 8;
                  break;
                }

                console.error("No wrapper element found!");
                return _context.abrupt("return");

              case 8:
                this.pushHeaders(this.wrapperElement, this.scope.headersStart, this.scope.headersDepth, this.scope.anchors);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return ["headersStart", "headersDepth", "headerParentSelector"];
    }
  }, {
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      get_default()(getPrototypeOf_default()(Bs4ContentsComponent.prototype), "attributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);
    } // deconstructor

  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4ContentsComponent.prototype), "disconnectedCallback", this).call(this);

      this.scope.anchors = [];
    }
  }, {
    key: "template",
    value: function template() {
      // Only set the component template if there no childs already
      if ((0,dom/* hasChildNodesTrim */.Np)(this.el)) {
        return null;
      } else {
        return (bs4_contents_component_default());
      }
    }
  }]);

  return Bs4ContentsComponent;
}(src.Component);

defineProperty_default()(Bs4ContentsComponent, "tagName", "bs4-contents");
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-icon/bs4-icon.component.ts









function bs4_icon_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_icon_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_icon_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var Bs4IconComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4IconComponent, _Component);

  var _super = bs4_icon_component_createSuper(Bs4IconComponent);

  createClass_default()(Bs4IconComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["size", "width", "height", "src", "color", "direction"];
    }
  }]);

  function Bs4IconComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4IconComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {});

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", false);

    return _this;
  }

  createClass_default()(Bs4IconComponent, [{
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(name, oldValue, newValue, namespace) {
      var _this2 = this;

      // injects the changed attributes to scope
      get_default()(getPrototypeOf_default()(Bs4IconComponent.prototype), "attributeChangedCallback", this).call(this, name, oldValue, newValue, namespace);

      if (name === "src") {
        if (!newValue) {
          console.warn("The src attribute must have a value!", this.scope);
          return "";
        }

        if (fetch) {
          fetch(newValue).then(function (response) {
            var _response$headers$get;

            // console.debug('response.headers.get("content-type")', response.headers.get('content-type'));
            if (response.status !== 200) {
              console.error(response.statusText);
              return "";
            }

            if (((_response$headers$get = response.headers.get("content-type")) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.indexOf("image/svg+xml")) !== -1) {
              return response.text();
            } else {
              console.error("[bs4-icon] Only svg's are supported! But content-type is " + response.headers.get("content-type"));
            }

            return "";
          }).then(function (response) {
            _this2.el.innerHTML = response;
          })["catch"](function (error) {
            console.error(error);
          });
        }
      }

      if (name === "title") {
        var title = document.createElementNS("http://www.w3.org/2000/svg", "title");
        title.textContent = newValue;
        var svg = this.el.firstElementChild;

        if (svg) {
          svg.appendChild(title);
        }
      }

      if (name === "color") {
        if (newValue.indexOf(",") !== -1) {
          newValue = newValue.split(",");

          if (newValue.length > 0) {
            this.el.className = this.el.className.replace(/(^|\s)color-\S+/g, "");

            for (var i = 0; i < newValue.length; i++) {
              var newColor = newValue[i];

              if (newColor.startsWith("#") || newColor.startsWith("rgb")) {
                this.el.style.color = newColor;
              }

              this.el.classList.add("color-".concat(newColor));
            }
          }
        } else {
          this.el.style.color = newValue;
          this.el.className = this.el.className.replace(/(^|\s)color-\S+/g, "");
          this.el.classList.add("color-".concat(newValue));
        }
      }

      if (name === "size") {
        var size = newValue;
        this.el.style.height = size + "px";
        this.el.style.width = size + "px";
        this.el.className = this.el.className.replace(/(^|\s)size-\S+/g, "");
        this.el.classList.add("size-".concat(size));
      }

      if (name === "width") {
        var width = newValue;
        this.el.style.width = width + "px";
        this.el.className = this.el.className.replace(/(^|\s)width-\S+/g, "");
        this.el.classList.add("width-".concat(width));
      }

      if (name === "height") {
        var height = newValue;
        this.el.style.height = height + "px";
        this.el.className = this.el.className.replace(/(^|\s)height-\S+/g, "");
        this.el.classList.add("height-".concat(height));
      }

      if (name === "direction") {
        var direction = newValue;
        var classString = "direction-".concat(direction);

        if (direction === "left") {
          classString += " rotate-270";
        } else if (direction === "left-top" || direction === "left-up" || direction === "top-left" || direction === "up-left") {
          classString += " rotate-315";
        } else if (direction === "top" || direction === "up") {
          classString += " rotate-0";
        } else if (direction === "top-right" || direction === "up-right" || direction === "right-top" || direction === "right-up") {
          classString += " rotate-45";
        } else if (direction === "right") {
          classString += " rotate-90";
        } else if (direction === "right-bottom" || direction === "right-down" || direction === "bottom-right" || direction === "down-right") {
          classString += " rotate-135";
        } else if (direction === "bottom" || direction === "down") {
          classString += " rotate-180";
        } else if (direction === "left-bottom" || direction === "left-down" || direction === "bottom-left" || direction === "down-left") {
          classString += " rotate-225";
        }

        this.el.className = this.el.className.replace(/(^|\s)direction-\S+/g, "");
        this.el.className = this.el.className.replace(/(^|\s)rotate-\S+/g, "");
        this.el.className += " " + classString;
      }
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4IconComponent.prototype), "connectedCallback", this).call(this);

      this.el.setAttribute("aria-hidden", "true");
      this.el.setAttribute("role", "img");
      this.el.classList.add("iconset");
      this.init(Bs4IconComponent.observedAttributes); // set default values

      if (!this.scope.direction) {
        this.scope.direction = "up";
        this.attributeChangedCallback("direction", null, this.scope.direction, null);
      }
    }
  }, {
    key: "template",
    value: function template() {
      return null;
    }
  }]);

  return Bs4IconComponent;
}(src.Component);

defineProperty_default()(Bs4IconComponent, "tagName", "bs4-icon");
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.html
var bs4_scrollspy_component = __webpack_require__(9566);
var bs4_scrollspy_component_default = /*#__PURE__*/__webpack_require__.n(bs4_scrollspy_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-scrollspy/bs4-scrollspy.component.ts









function bs4_scrollspy_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_scrollspy_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_scrollspy_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }




var Bs4ScrollspyComponent = /*#__PURE__*/function (_Bs4ContentsComponent) {
  inherits_default()(Bs4ScrollspyComponent, _Bs4ContentsComponent);

  var _super = bs4_scrollspy_component_createSuper(Bs4ScrollspyComponent);

  createClass_default()(Bs4ScrollspyComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["headers-start", "headers-depth", "find-header-id-depth", "header-parent-selector", "offset", "offset-bottom", "scroll-offset"];
    }
  }]);

  function Bs4ScrollspyComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4ScrollspyComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "wrapperElement", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      headersDepth: 1,
      headersStart: 2,
      findHeaderIdDepth: 1,
      headerParentSelector: undefined,
      offset: 0,
      offsetBottom: 0,
      scrollOffset: 0,
      anchors: []
    });

    return _this;
  }

  createClass_default()(Bs4ScrollspyComponent, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4ScrollspyComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4ScrollspyComponent.observedAttributes);
    }
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return ["headersStart", "headersDepth", "headerParentSelector"];
    }
  }, {
    key: "template",
    value: function template() {
      // Only set the component template if there no childs already
      if ((0,dom/* hasChildNodesTrim */.Np)(this.el)) {
        return null;
      } else {
        return (bs4_scrollspy_component_default());
      }
    }
  }]);

  return Bs4ScrollspyComponent;
}(Bs4ContentsComponent);

defineProperty_default()(Bs4ScrollspyComponent, "tagName", "bs4-scrollspy");
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-share/bs4-share.component.ts
var bs4_share_component = __webpack_require__(9599);
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-sidebar/bs4-sidebar.component.ts











function bs4_sidebar_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_sidebar_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_sidebar_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }



var Bs4SidebarComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4SidebarComponent, _Component);

  var _super = bs4_sidebar_component_createSuper(Bs4SidebarComponent);

  createClass_default()(Bs4SidebarComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["id", "container-selector", "position", "width", "auto-show-on-wider-than", "auto-hide-on-slimmer-than", "force-hide-on-location-pathnames", "force-show-on-location-pathnames", "overlay-on-slimmer-than", "watch-new-page-ready-event"];
    }
  }]);

  function Bs4SidebarComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4SidebarComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "style", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "toggleButtonEvents", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "routerEvents", new src.EventDispatcher("main"));

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      // template properties
      containerSelector: undefined,
      state: "hidden",
      id: undefined,
      width: "250px",
      // Options
      position: "left",
      autoShowOnWiderThan: 1199,
      autoHideOnSlimmerThan: 1200,
      watchNewPageReadyEvent: true,
      forceHideOnLocationPathnames: [],
      forceShowOnLocationPathnames: [],
      overlayOnSlimmerThan: 1200,
      // template methods
      hide: _this.hide,
      show: _this.show,
      toggle: _this.toggle
    });

    return _this;
  }

  createClass_default()(Bs4SidebarComponent, [{
    key: "setState",
    value: function setState(state) {
      this.scope.state = state;
    }
  }, {
    key: "getState",
    value: function getState() {
      return this.scope.state;
    }
  }, {
    key: "hide",
    value: function hide() {
      this.scope.state = "hidden";
      this.onStateChange();
    }
  }, {
    key: "show",
    value: function show() {
      var vw = (0,dom/* getViewportDimensions */.cc)().w;

      if (vw < this.scope.overlayOnSlimmerThan) {
        this.scope.state = "overlay-" + this.scope.position;
      } else {
        this.scope.state = "side-" + this.scope.position;
      }

      this.onStateChange();
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.scope.state === "hidden") {
        this.show();
      } else {
        this.hide();
      }
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4SidebarComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4SidebarComponent.observedAttributes);
      this.style = window.getComputedStyle(this.el);
      window.addEventListener("resize", this.onEnviromentChanges.bind(this), false); // inital

      this.onEnviromentChanges();
    }
  }, {
    key: "onToggle",
    value: function onToggle() {
      this.toggle();
    }
  }, {
    key: "initToggleButtonEventDispatcher",
    value: function initToggleButtonEventDispatcher() {
      if (this.toggleButtonEvents) {
        this.toggleButtonEvents.off("toggle", this.onToggle.bind(this));
        this.toggleButtonEvents.off("init", this.triggerState.bind(this));
      }

      this.toggleButtonEvents = new src.EventDispatcher("bs4-toggle-button:" + this.scope.id);
      this.toggleButtonEvents.on("toggle", this.onToggle.bind(this));
      this.toggleButtonEvents.on("init", this.triggerState.bind(this));
    }
  }, {
    key: "initRouterEventDispatcher",
    value: function initRouterEventDispatcher() {
      if (this.scope.watchNewPageReadyEvent) {
        this.routerEvents.on("newPageReady", this.onEnviromentChanges.bind(this));
      }
    }
  }, {
    key: "onHidden",
    value: function onHidden() {
      this.setContainersStyle();
      var translateX = this.scope.position === "left" ? "-100%" : "100%";
      this.el.setAttribute("style", "transform:translateX(".concat(translateX, ");width:").concat(this.scope.width, ";"));
    }
  }, {
    key: "onSide",
    value: function onSide(directon) {
      this.setContainersStyle(undefined, "", directon);
      this.el.setAttribute("style", "transform:translateX(0);width:".concat(this.scope.width, ";"));
    }
  }, {
    key: "onOverlay",
    value: function onOverlay(directon) {
      this.setContainersStyle(undefined, "", directon);
      this.el.setAttribute("style", "transform:translateX(0);width:".concat(this.scope.width, ";"));
    }
  }, {
    key: "triggerState",
    value: function triggerState() {
      var _this$toggleButtonEve;

      (_this$toggleButtonEve = this.toggleButtonEvents) === null || _this$toggleButtonEve === void 0 ? void 0 : _this$toggleButtonEve.trigger("state", this.scope.state);
    }
  }, {
    key: "onStateChange",
    value: function onStateChange() {
      switch (this.scope.state) {
        case "side-left":
        case "side-right":
          this.onSide(this.scope.state);
          break;

        case "overlay-left":
        case "overlay-right":
          this.onOverlay(this.scope.state);
          break;

        default:
          this.onHidden();
          break;
      }

      if (this.toggleButtonEvents) {
        this.toggleButtonEvents.trigger("toggled", this.scope.state);
      }
    }
  }, {
    key: "setStateByEnviroment",
    value: function setStateByEnviroment() {
      if (this.scope.forceHideOnLocationPathnames.indexOf(window.location.pathname) !== -1) {
        return this.hide();
      }

      if (this.scope.forceShowOnLocationPathnames.indexOf(window.location.pathname) !== -1) {
        return this.show();
      }

      var vw = (0,dom/* getViewportDimensions */.cc)().w;

      if (this.scope.autoHideOnSlimmerThan > -1 && vw < this.scope.autoHideOnSlimmerThan) {
        return this.hide();
      }

      if (this.scope.autoShowOnWiderThan > -1 && vw > this.scope.autoShowOnWiderThan) {
        return this.show();
      }
    }
    /**
     * If vieport size changes, location url changes or something else
     */

  }, {
    key: "onEnviromentChanges",
    value: function onEnviromentChanges() {
      this.setStateByEnviroment();
    }
  }, {
    key: "getContainers",
    value: function getContainers() {
      return this.scope.containerSelector ? document.querySelectorAll(this.scope.containerSelector) : undefined;
    }
  }, {
    key: "initContainers",
    value: function initContainers() {
      var containers = this.getContainers();
      this.setContainersStyle(containers);
    }
  }, {
    key: "setContainersStyle",
    value: function setContainersStyle(containers, style, move) {
      if (!containers) {
        containers = this.getContainers();
      }

      if (containers) {
        for (var i = 0; i < containers.length; i++) {
          var container = containers[i];
          this.setContainerStyle(container, style, move);
        }
      }
    }
    /**
     * Sets the container style, takes overs always the transition style of this sidebar
     * @param container
     * @param style
     * @param move
     */

  }, {
    key: "setContainerStyle",
    value: function setContainerStyle(container) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var move = arguments.length > 2 ? arguments[2] : undefined;

      if (move) {
        var width = this.width;
        var conStyle = window.getComputedStyle(container);

        switch (move) {
          case "side-left":
            switch (conStyle.position) {
              case "fixed":
                style += "left:" + width;
                break;

              default:
                style += "margin-left:" + width;
                break;
            }

            break;

          case "side-right":
            switch (conStyle.position) {
              case "fixed":
                style += "right:" + width;
                break;

              default:
                style += "margin-right:" + width;
                break;
            }

            break;

          default:
            break;
        }
      }

      return container.setAttribute("style", "transition:".concat(this.style ? this.style.transition : "", ";").concat(style));
    }
  }, {
    key: "beforeBind",
    value: function () {
      var _beforeBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4SidebarComponent.prototype), "beforeBind", this).call(this);

              case 2:
                this.initRouterEventDispatcher();
                return _context.abrupt("return", this.onEnviromentChanges());

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function beforeBind() {
        return _beforeBind.apply(this, arguments);
      }

      return beforeBind;
    }()
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4SidebarComponent.prototype), "afterBind", this).call(this);

              case 2:
                return _context2.abrupt("return", this.onEnviromentChanges());

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return ["id"];
    }
  }, {
    key: "parsedAttributeChangedCallback",
    value: function parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      get_default()(getPrototypeOf_default()(Bs4SidebarComponent.prototype), "parsedAttributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);

      if (attributeName === "containerSelector") {
        this.initContainers();
      }

      if (attributeName === "id") {
        this.initToggleButtonEventDispatcher();
      }
    } // deconstructor

  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      var _this$toggleButtonEve2, _this$toggleButtonEve3, _this$toggleButtonEve4;

      get_default()(getPrototypeOf_default()(Bs4SidebarComponent.prototype), "disconnectedCallback", this).call(this);

      (_this$toggleButtonEve2 = this.toggleButtonEvents) === null || _this$toggleButtonEve2 === void 0 ? void 0 : _this$toggleButtonEve2.off("init", this.triggerState.bind(this));
      (_this$toggleButtonEve3 = this.toggleButtonEvents) === null || _this$toggleButtonEve3 === void 0 ? void 0 : _this$toggleButtonEve3.off("toggle", this.onToggle.bind(this));
      (_this$toggleButtonEve4 = this.toggleButtonEvents) === null || _this$toggleButtonEve4 === void 0 ? void 0 : _this$toggleButtonEve4.off("init", this.triggerState.bind(this));
      this.routerEvents.off("newPageReady", this.onEnviromentChanges.bind(this));
      window.removeEventListener("resize", this.onEnviromentChanges.bind(this), false);
    }
  }, {
    key: "template",
    value: function template() {
      if (!(0,dom/* hasChildNodesTrim */.Np)(this.el)) {
        console.warn("No child elements found, this component as no template so you need to define your own as child of this component.");
      }

      return null;
    }
  }, {
    key: "width",
    get: function get() {
      return this.el.offsetWidth ? this.el.offsetWidth + "px" : this.scope.width;
    }
  }]);

  return Bs4SidebarComponent;
}(src.Component);

defineProperty_default()(Bs4SidebarComponent, "tagName", "bs4-sidebar");
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/services/utils.service.ts


var utils_service_Utils = /*#__PURE__*/function () {
  function Utils() {
    classCallCheck_default()(this, Utils);
  }

  createClass_default()(Utils, null, [{
    key: "linear",
    // easings methods, see https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/
    value: function linear(t) {
      return t;
    }
  }, {
    key: "easeInQuad",
    value: function easeInQuad(t) {
      return t * t;
    }
  }, {
    key: "easeOutQuad",
    value: function easeOutQuad(t) {
      return t * (2 - t);
    }
  }, {
    key: "easeInOutQuad",
    value: function easeInOutQuad(t) {
      return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    }
  }, {
    key: "easeInCubic",
    value: function easeInCubic(t) {
      return t * t * t;
    }
  }, {
    key: "easeOutCubic",
    value: function easeOutCubic(t) {
      return --t * t * t + 1;
    }
  }, {
    key: "easeInOutCubic",
    value: function easeInOutCubic(t) {
      return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    }
  }, {
    key: "easeInQuart",
    value: function easeInQuart(t) {
      return t * t * t * t;
    }
  }, {
    key: "easeOutQuart",
    value: function easeOutQuart(t) {
      return 1 - --t * t * t * t;
    }
  }, {
    key: "easeInOutQuart",
    value: function easeInOutQuart(t) {
      return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
    }
  }, {
    key: "easeInQuint",
    value: function easeInQuint(t) {
      return t * t * t * t * t;
    }
  }, {
    key: "easeOutQuint",
    value: function easeOutQuint(t) {
      return 1 + --t * t * t * t * t;
    }
  }, {
    key: "easeInOutQuint",
    value: function easeInOutQuint(t) {
      return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    }
  }, {
    key: "getScrollPosition",
    value: function getScrollPosition(element) {
      var scrollPosition = {
        /** horizontal: left / right / width */
        x: element.scrollLeft,

        /** vertical: top / bottom / height */
        y: element.scrollTop,

        /** horizontal: left / right / width */
        maxX: element.scrollWidth - element.clientWidth,

        /** vertical: top / bottom / height */
        maxY: element.scrollHeight - element.clientHeight
      };
      return scrollPosition;
    }
  }, {
    key: "isScrollable",
    value: function isScrollable(element) {
      var scrollPosition = this.getScrollPosition(element);
      return scrollPosition.maxX > 0 || scrollPosition.maxY > 0;
    }
    /**
     * Similar to JQuerys `$(el).index();`
     * @param el
     */

  }, {
    key: "getElementIndex",
    value: function getElementIndex(el) {
      if (!el) {
        return -1;
      }

      var i = 0;

      do {
        i++;
        el = el.previousElementSibling;
      } while (el);

      return i;
    }
  }]);

  return Utils;
}();
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/services/gameloop.service.ts





/**
 * @see https://www.sitepoint.com/quick-tip-game-loop-in-javascript/
 * @see https://isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing#fps-control
 */
var Gameloop = /*#__PURE__*/function () {
  createClass_default()(Gameloop, null, [{
    key: "getFps",
    value: function getFps() {
      return this.fps;
    }
  }, {
    key: "startLoop",
    value: function startLoop() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setOptions(options);

      if (!this.loopStarted) {
        this.loopStarted = true;
        window.requestAnimationFrame(this.loop.bind(this));
      }
    }
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      this.maxFPS = typeof options.maxFPS === "number" ? options.maxFPS : this.maxFPS;
    }
    /**
     * The main / game loop
     * @param timestamp
     */

  }, {
    key: "loop",
    value: function loop(timestamp) {
      // Throttle the frame rate.
      if (timestamp < this.lastFrameTimeMs + 1000 / this.maxFPS) {
        this.frameID = requestAnimationFrame(this.loop.bind(this));
        return;
      }

      var progress = timestamp - this.lastFrameTimeMs;
      this.delta += progress;
      this.lastFrameTimeMs = timestamp;
      this.begin(timestamp, this.delta);

      if (timestamp > this.lastFpsUpdate + 1000) {
        this.fps = 0.25 * this.framesThisSecond + 0.75 * this.fps;
        this.lastFpsUpdate = timestamp;
        this.framesThisSecond = 0;
      }

      this.framesThisSecond++;
      var numUpdateSteps = 0;

      while (this.delta >= this.timestep) {
        this.update(this.timestep);
        this.delta -= this.timestep;

        if (++numUpdateSteps >= 240) {
          this.panic();
          break;
        }
      }

      this.render(this.delta / this.timestep);
      this.end(this.fps);
      this.frameID = window.requestAnimationFrame(this.loop.bind(this));
    }
  }, {
    key: "begin",
    value: function begin(timestamp, delta) {
      this.events.trigger("begin", timestamp, delta);
    }
  }, {
    key: "render",
    value: function render(interp) {
      this.events.trigger("render", interp);
    }
  }, {
    key: "update",
    value: function update(delta) {
      this.events.trigger("update", delta);
    }
  }, {
    key: "end",
    value: function end(delta) {
      this.events.trigger("end", delta);
    }
  }, {
    key: "panic",
    value: function panic() {
      this.delta = 0; // discard the unsimulated time
    }
  }]);

  function Gameloop() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    classCallCheck_default()(this, Gameloop);

    Gameloop.setOptions(options);
  }

  return Gameloop;
}();

defineProperty_default()(Gameloop, "events", new src.EventDispatcher("gameloop"));

defineProperty_default()(Gameloop, "maxFPS", 60);

defineProperty_default()(Gameloop, "fps", 60);

defineProperty_default()(Gameloop, "timestep", 1000 / 60);

defineProperty_default()(Gameloop, "loopStarted", false);

defineProperty_default()(Gameloop, "lastFrameTimeMs", 0);

defineProperty_default()(Gameloop, "delta", 0);

defineProperty_default()(Gameloop, "framesThisSecond", 0);

defineProperty_default()(Gameloop, "lastFpsUpdate", 0);

defineProperty_default()(Gameloop, "frameID", 0);
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/services/autoscroll.service.ts






var Autoscroll = /*#__PURE__*/function () {
  function Autoscroll(el) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    classCallCheck_default()(this, Autoscroll);

    defineProperty_default()(this, "touchCapable", "ontouchstart" in window);

    defineProperty_default()(this, "direction", 1);

    defineProperty_default()(this, "limit", void 0);

    defineProperty_default()(this, "options", void 0);

    defineProperty_default()(this, "el", void 0);

    defineProperty_default()(this, "_pause", false);

    defineProperty_default()(this, "velocity", 0.008);

    defineProperty_default()(this, "move", 0);

    defineProperty_default()(this, "lastMove", 0);

    defineProperty_default()(this, "angle", "horizontal");

    defineProperty_default()(this, "pauseOnHover", true);

    defineProperty_default()(this, "resumeTimer", null);

    this.el = el;
    this.options = options;
    this.direction = this.options.direction || this.direction;
    this.velocity = this.options.velocity || this.velocity;
    this.angle = this.options.angle || this.angle;
    this.pauseOnHover = typeof this.options.pauseOnHover === "boolean" ? this.options.pauseOnHover : this.pauseOnHover;
    this.limit = this.getLimit(this.el);
    this.move = this.getPosition();
    window.addEventListener("resize", this.onResize.bind(this), {
      passive: true
    });

    if (this.direction === -1) {
      // start right
      this.el.scrollLeft = this.limit;
    } else {
      // start left
      this.el.scrollLeft = 0;
    }

    this.el.addEventListener("mouseenter", this.onMouseIn.bind(this), {
      passive: true
    });
    this.el.addEventListener("mouseover", this.onMouseIn.bind(this), {
      passive: true
    });
    this.el.addEventListener("focusin", this.onMouseIn.bind(this), {
      passive: true
    });
    this.el.addEventListener("touchstart", this.onMouseIn.bind(this), {
      passive: true
    });
    this.el.addEventListener("mouseleave", this.onMouseOut.bind(this), {
      passive: true
    });
    this.el.addEventListener("focusout", this.onMouseOut.bind(this), {
      passive: true
    });
    this.el.addEventListener("mouseup", this.onMouseUp.bind(this), {
      passive: true
    });
    this.el.addEventListener("touchend", this.onMouseUp.bind(this), {
      passive: true
    });

    if (this.touchCapable) {
      this.el.addEventListener("scroll", this.onMouseUp.bind(this), {
        passive: true
      });
      this.el.addEventListener("scrollend", this.onMouseUp.bind(this), {
        passive: true
      }); // See ScrollEventsService for "scrollended" event

      this.el.addEventListener("scrollended", this.onMouseUp.bind(this), {
        passive: true
      });
    } else {
      this.el.addEventListener("scroll", this.onScroll.bind(this), {
        passive: true
      });
      this.el.addEventListener("scrollend", this.onScroll.bind(this), {
        passive: true
      });
      this.el.addEventListener("scrollended", this.onScroll.bind(this), {
        passive: true
      });
    }

    Gameloop.events.on("render", this.render.bind(this));
    Gameloop.events.on("update", this.updateMove.bind(this));
    Gameloop.startLoop({
      maxFPS: 60
    });
  }
  /**
   * @note this is not the gameloop update method!
   */


  createClass_default()(Autoscroll, [{
    key: "update",
    value: function update() {
      this.limit = this.getLimit(this.el);
      this.setPosition();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "pause",
    value: function pause() {
      this.el.style.scrollBehavior = "";
      this._pause = true;
    }
    /** Resume autoscrolling if this method was not called up for [delay] milliseconds */

  }, {
    key: "resume",
    value: function resume() {
      var _this = this;

      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (!this._pause) {
        return;
      }

      this.stopResumeTimeout();
      this.resumeTimer = window.setTimeout(function () {
        _this.setPosition();

        _this._pause = false; // Disable smooth scrolling on autoscroll if set

        _this.el.style.scrollBehavior = "auto";
      }, delay);
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      window.removeEventListener("resize", this.onResize.bind(this));
      this.el.removeEventListener("mouseenter", this.onMouseIn.bind(this));
      this.el.removeEventListener("mouseover", this.onMouseIn.bind(this));
      this.el.removeEventListener("focusin", this.onMouseIn.bind(this));
      this.el.removeEventListener("touchstart", this.onMouseIn.bind(this));
      this.el.removeEventListener("mouseleave", this.onMouseOut.bind(this));
      this.el.removeEventListener("focusout", this.onMouseOut.bind(this));
      this.el.removeEventListener("mouseup", this.onMouseUp.bind(this));
      this.el.removeEventListener("touchend", this.onMouseUp.bind(this));

      if (this.touchCapable) {
        this.el.removeEventListener("scroll", this.onMouseUp.bind(this));
        this.el.removeEventListener("scrollend", this.onMouseUp.bind(this));
        this.el.removeEventListener("scrollended", this.onMouseUp.bind(this));
      } else {
        this.el.removeEventListener("scroll", this.onScroll.bind(this));
        this.el.removeEventListener("scrollend", this.onScroll.bind(this));
        this.el.removeEventListener("scrollended", this.onScroll.bind(this));
      }

      Gameloop.events.off("render", this.render.bind(this));
      Gameloop.events.off("update", this.updateMove.bind(this));
    }
  }, {
    key: "onMouseIn",
    value: function onMouseIn() {
      if (this.pauseOnHover) {
        this.pause();
      }
    }
  }, {
    key: "onMouseOut",
    value: function onMouseOut() {
      this.resume(200);
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      this.resume(1000);
    }
  }, {
    key: "onResize",
    value: function onResize() {
      var _this2 = this;

      (0,control/* throttle */.P2)(function () {
        _this2.limit = _this2.getLimit(_this2.el);

        _this2.resume(200);
      })();
    }
  }, {
    key: "onScroll",
    value: function onScroll() {
      var _this3 = this;

      (0,control/* throttle */.P2)(function () {
        (0,control/* debounce */.Ds)(function () {
          _this3.stopResumeTimeout();
        })();
      })();
    }
  }, {
    key: "stopResumeTimeout",
    value: function stopResumeTimeout() {
      if (this.resumeTimer !== null) {
        clearTimeout(this.resumeTimer);
        this.resumeTimer = null;
      }
    }
  }, {
    key: "getPosition",
    value: function getPosition() {
      return (this.angle === "vertical" ? this.el.scrollTop : this.el.scrollLeft) || 0;
    }
  }, {
    key: "setPosition",
    value: function setPosition() {
      this.move = this.getPosition();
    }
  }, {
    key: "getLimit",
    value: function getLimit(el) {
      return this.angle === "vertical" ? utils_service_Utils.getScrollPosition(el).maxY : utils_service_Utils.getScrollPosition(el).maxX;
    }
    /**
     * This Interpolation:
     * ```
     * protected render(interp: number) {
     * ...
     * this.move = (this.lastMove + (this.move - this.lastMove) * interp);
     * ```
     * is not working here for some reasion
     * like it works in the demos/extras-game-loop demo or here:
     * https://isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing
     *
     * Without this the scrollbar scrolls smooth, need to find out why.
     */

  }, {
    key: "render",
    value: function render() {
      if (this._pause) {
        return;
      }

      this.scroll(this.move);
    }
  }, {
    key: "updateMove",
    value: function updateMove(delta) {
      if (this._pause) {
        return;
      }

      this.lastMove = this.move;
      var append = this.velocity * this.direction * delta;
      this.move += append; // Switch directions if we go too far

      if (this.move <= 0 && this.direction !== 1) {
        this.direction = 1;
      }

      if (this.move >= this.limit && this.direction !== -1) {
        this.direction = -1;
      }
    }
  }, {
    key: "scroll",
    value: function scroll(move) {
      if (this.angle === "vertical") {
        this.el.scrollTop = move;
      } else {
        this.el.scrollLeft = move;
      }
    }
  }]);

  return Autoscroll;
}();
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/services/dragscroll.service.ts






/**
 * Scroll an scrollable element by draging and moving your mouse.
 * inspired by https://github.com/asvd/dragscroll
 */
var Dragscroll = /*#__PURE__*/function () {
  function Dragscroll(el) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      detectGlobalMove: true
    };

    classCallCheck_default()(this, Dragscroll);

    defineProperty_default()(this, "options", void 0);

    defineProperty_default()(this, "lastClientX", 0);

    defineProperty_default()(this, "lastClientY", 0);

    defineProperty_default()(this, "el", void 0);

    defineProperty_default()(this, "pushed", false);

    defineProperty_default()(this, "touchCapable", "ontouchstart" in window);

    this.el = el;
    this.options = options;

    if (this.touchCapable) {
      // Do noting on touch devices
      return this;
    }

    el.removeEventListener("mousedown", this.onMouseDown.bind(this), false);
    el.addEventListener("mousedown", this.onMouseDown.bind(this), {
      passive: true
    });
    window.addEventListener("resize", this.checkDraggable.bind(this)); // Use global move if your element does not use the full width / height

    if (this.options.detectGlobalMove) {
      window.removeEventListener("mouseup", this.onMouseUp.bind(this), false);
      window.removeEventListener("mousemove", this.onMouseMove.bind(this), false);
      window.addEventListener("mouseup", this.onMouseUp.bind(this), {
        passive: true
      });
      window.addEventListener("mousemove", this.onMouseMove.bind(this), {
        passive: true
      });
    } else {
      el.removeEventListener("mouseup", this.onMouseUp.bind(this), false);
      el.removeEventListener("mousemove", this.onMouseMove.bind(this), false);
      el.addEventListener("mouseup", this.onMouseUp.bind(this), {
        passive: true
      });
      el.addEventListener("mousemove", this.onMouseMove.bind(this), {
        passive: true
      });
    } // initial


    this.checkDraggable();
  }

  createClass_default()(Dragscroll, [{
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
      this.el.classList.remove("draggable");
    }
  }, {
    key: "checkDraggable",
    value: function checkDraggable() {
      var _this = this;

      return (0,control/* throttle */.P2)(function () {
        if (utils_service_Utils.isScrollable(_this.el)) {
          _this.el.classList.add("draggable");
        }

        _this.el.classList.remove("draggable");
      })();
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown(e) {
      this.pushed = true;
      this.lastClientX = e.clientX;
      this.lastClientY = e.clientY;
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      this.pushed = false;
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(e) {
      var newScrollX = 0;
      var newScrollY = 0;

      if (this.pushed) {
        this.el.scrollLeft -= newScrollX = -this.lastClientX + (this.lastClientX = e.clientX);
        this.el.scrollTop -= newScrollY = -this.lastClientY + (this.lastClientY = e.clientY);

        if (this.el === document.body) {
          if (document.documentElement) {
            this.el = document.documentElement;
          }

          this.el.scrollLeft -= newScrollX;
          this.el.scrollTop -= newScrollY;
        }
      }
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      window.removeEventListener("resize", this.checkDraggable);
      this.el.removeEventListener("mousedown", this.onMouseDown.bind(this), false);
      this.el.removeEventListener("mouseup", this.onMouseUp.bind(this), false);
      this.el.removeEventListener("mousemove", this.onMouseMove.bind(this), false);
    }
  }]);

  return Dragscroll;
}();
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/services/fullscreen.service.ts



var FullscreenService = /*#__PURE__*/function () {
  function FullscreenService() {
    classCallCheck_default()(this, FullscreenService);

    defineProperty_default()(this, "enterK", "requestFullscreen");

    defineProperty_default()(this, "exitK", "exitFullscreen");

    defineProperty_default()(this, "elementK", "fullscreenElement");

    defineProperty_default()(this, "eventK", "fullscreenchange");

    var dE = document.documentElement;
    var tF = "fullscreenchange";

    if (dE.requestFullscreen) {
      this.enterK = "requestFullscreen";
      this.exitK = "exitFullscreen";
      this.elementK = "fullscreenElement";
      this.eventK = tF;
    } else if (dE.mozRequestFullScreen) {
      this.enterK = "mozRequestFullScreen";
      this.exitK = "mozCancelFullScreen";
      this.elementK = "mozFullScreenElement";
      this.eventK = "moz" + tF;
    } else if (dE.webkitRequestFullscreen) {
      this.enterK = "webkitRequestFullscreen";
      this.exitK = "webkitExitFullscreen";
      this.elementK = "webkitFullscreenElement";
      this.eventK = "webkit" + tF;
    } else if (dE.msRequestFullscreen) {
      this.enterK = "msRequestFullscreen";
      this.exitK = "msExitFullscreen";
      this.elementK = "msFullscreenElement";
      this.eventK = "MSFullscreenChange";
    }
  }

  createClass_default()(FullscreenService, [{
    key: "enter",
    value: function enter(el) {
      if (!el) {
        el = document.body;
      }

      if (this.isFullscreen()) {
        return;
      }

      if (this.enterK === "webkitRequestFullscreen") {
        el[this.enterK](Element.ALLOW_KEYBOARD_INPUT);
      } else {
        el[this.enterK]();
      }
    }
  }, {
    key: "exit",
    value: function exit() {
      if (this.isFullscreen()) {
        document[this.exitK]();
      }
    }
  }, {
    key: "isFullscreen",
    value: function isFullscreen() {
      return document[this.elementK];
    }
  }, {
    key: "toggle",
    value: function toggle(el) {
      if (this.isFullscreen()) {
        this.exit();
        return;
      } else {
        this.enter(el);
      }
    }
  }], [{
    key: "getSingleton",
    value: function getSingleton() {
      if (FullscreenService.instance) {
        return FullscreenService.instance;
      }

      FullscreenService.instance = new FullscreenService();
      return FullscreenService.instance;
    }
  }, {
    key: "supported",
    value: function supported() {
      var d = document;
      return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);
    }
  }]);

  return FullscreenService;
}();

defineProperty_default()(FullscreenService, "instance", void 0);
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/services/touch-events/base-touch-events.service.ts



var BaseTouchEventsService = /*#__PURE__*/function () {
  createClass_default()(BaseTouchEventsService, [{
    key: "isTouchCapable",

    /** The element to trigger the events on */
    get: function get() {
      return this.touchCapable;
    }
  }]);

  function BaseTouchEventsService(el) {
    classCallCheck_default()(this, BaseTouchEventsService);

    defineProperty_default()(this, "touchCapable", "ontouchstart" in window);

    defineProperty_default()(this, "el", void 0);

    this.el = el;
  }

  createClass_default()(BaseTouchEventsService, [{
    key: "triggerCustomEvent",
    value: function triggerCustomEvent(eventName, originalEvent) {
      var extraParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      extraParameters.originalEvent = originalEvent;
      extraParameters.target = originalEvent.target; // create and dispatch the event

      var event = new CustomEvent(eventName, {
        detail: extraParameters
      });
      this.el.dispatchEvent(event);
    }
  }]);

  return BaseTouchEventsService;
}();
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/services/touch-events/scroll-events.service.ts








function scroll_events_service_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = scroll_events_service_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function scroll_events_service_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return scroll_events_service_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return scroll_events_service_arrayLikeToArray(o, minLen); }

function scroll_events_service_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function scroll_events_service_createSuper(Derived) { var hasNativeReflectConstruct = scroll_events_service_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function scroll_events_service_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

// import { Utils as ExtraUtils } from '../utils.service';

var ScrollEventsService = /*#__PURE__*/function (_BaseTouchEventsServi) {
  inherits_default()(ScrollEventsService, _BaseTouchEventsServi);

  var _super = scroll_events_service_createSuper(ScrollEventsService);

  /** The element to trigger the events on */
  function ScrollEventsService(el) {
    var _this;

    classCallCheck_default()(this, ScrollEventsService);

    _this = _super.call(this, el);

    defineProperty_default()(assertThisInitialized_default()(_this), "isScrolling", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "_scrollEvent", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "el", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scrollTimer", null);

    _this.el = el; // Watch also native scrollend to not trigger scrollended before scrollend was triggered

    _this._scrollEvent = _this.touchCapable ? ["touchmove", "scrollend", "scroll"] : ["scroll", "scrollend"];

    _this.addEventListeners();

    return _this;
  }

  createClass_default()(ScrollEventsService, [{
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners();
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _iterator = scroll_events_service_createForOfIteratorHelper(this._scrollEvent),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var eventName = _step.value;
          this.el.removeEventListener(eventName, this.onScrollEvent.bind(this));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _iterator2 = scroll_events_service_createForOfIteratorHelper(this._scrollEvent),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var eventName = _step2.value;
          this.el.addEventListener(eventName, this.onScrollEvent.bind(this), {
            passive: true
          });
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "onScrollEvent",
    value: function onScrollEvent(event) {
      this.scrollstart(event);
      return true;
    }
    /**
     * scrollstart Event
     * (also handles `scrollended`)
     */

  }, {
    key: "scrollstart",
    value: function scrollstart(event) {
      var _this2 = this;

      if (!event.target) {
        return false;
      } // const scrollPosition = ExtraUtils.getScrollPosition(event.target as HTMLElement);


      if (!this.isScrolling) {
        this.isScrolling = true;
        this.triggerCustomEvent("scrollstart", event, {});
      } // console.debug('scroll timer is ', this.scrollTimer);


      if (this.scrollTimer !== null) {
        clearTimeout(this.scrollTimer);
        this.scrollTimer = null;
      }

      this.scrollTimer = window.setTimeout(function () {
        _this2.triggerCustomEvent("scrollended", event, {});

        _this2.isScrolling = false;
      }, 200);
    }
  }, {
    key: "scrollEvent",
    get: function get() {
      return this._scrollEvent;
    }
  }]);

  return ScrollEventsService;
}(BaseTouchEventsService);
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/services/touch-events/touch-events.service.ts








function touch_events_service_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = touch_events_service_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function touch_events_service_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return touch_events_service_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return touch_events_service_arrayLikeToArray(o, minLen); }

function touch_events_service_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function touch_events_service_createSuper(Derived) { var hasNativeReflectConstruct = touch_events_service_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function touch_events_service_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


// import { ScrollEventsService } from './scroll-events.service';

/**
 * Vanilla version of jQuery Mobile Events
 * @see https://github.com/benmajor/jQuery-Touch-Events
 *
 * Copyright 2011-2019, Ben Major
 * Copyright 2019, Pascal Garber
 * Licensed under the MIT License:
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var TouchType;

(function (TouchType) {
  TouchType[TouchType["DEFAULT"] = 0] = "DEFAULT";
  TouchType[TouchType["TARGET"] = 1] = "TARGET";
  TouchType[TouchType["CHANGED"] = 2] = "CHANGED";
})(TouchType || (TouchType = {}));

var TouchEventsService = /*#__PURE__*/function (_BaseTouchEventsServi) {
  inherits_default()(TouchEventsService, _BaseTouchEventsServi);

  var _super = touch_events_service_createSuper(TouchEventsService);

  createClass_default()(TouchEventsService, [{
    key: "isTouchCapable",
    // GETTERS:
    get: function get() {
      return this.settings.touchCapable;
    }
  }, {
    key: "startEvent",
    get: function get() {
      return this.settings.startevent;
    }
  }, {
    key: "endEvent",
    get: function get() {
      return this.settings.endevent;
    }
  }, {
    key: "moveEvent",
    get: function get() {
      return this.settings.moveevent;
    }
  }, {
    key: "tapEvent",
    get: function get() {
      return this.settings.tapevent;
    } // public get scrollEvent() {
    //   return this.scrollEvents.scrollEvent;
    // }
    // SETTERS:

    /** Set the X threshold of swipe events */

  }, {
    key: "swipeThresholdX",
    set: function set(threshold) {
      if (typeof threshold !== "number") {
        throw new Error("Threshold parameter must be a type of number");
      }

      this.settings.swipeHThreshold = threshold;
    }
    /** Set the Y threshold of swipe events */

  }, {
    key: "swipeThresholdY",
    set: function set(threshold) {
      if (typeof threshold !== "number") {
        throw new Error("Threshold parameter must be a type of number");
      }

      this.settings.swipeVThreshold = threshold;
    }
    /** Set the double tap interval */

  }, {
    key: "doubleTapInt",
    set: function set(interval) {
      if (typeof interval !== "number") {
        throw new Error("Interval parameter must be a type of number");
      }

      this.settings.doubletapInterval = interval;
    }
    /** Set the taphold threshold */

  }, {
    key: "tapHoldThreshold",
    set: function set(threshold) {
      if (typeof threshold !== "number") {
        throw new Error("Threshold parameter must be a type of number");
      }

      this.settings.tapholdThreshold = threshold;
    }
    /** Set the pixel range for tapas */

  }, {
    key: "tapRange",
    set: function set(range) {
      if (typeof range !== "number") {
        throw new Error("Ranger parameter must be a type of number");
      }

      this.settings.tapPixelRange = range;
    } // PROPERTIES:

    /** The element to trigger the events on */

  }]);

  // protected scrollEvents: ScrollEventsService;
  function TouchEventsService(el) {
    var _this;

    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      tapPixelRange: 5,
      swipeHThreshold: 50,
      swipeVThreshold: 50,
      tapholdThreshold: 750,
      doubletapInterval: 500,
      shakeThreshold: 15,
      touchCapable: "ontouchstart" in window,
      startevent: ["touchstart"],
      endevent: ["touchend"],
      moveevent: ["touchmove"],
      tapevent: ["tap"]
    };

    classCallCheck_default()(this, TouchEventsService);

    _this = _super.call(this, el);

    defineProperty_default()(assertThisInitialized_default()(_this), "el", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "startPosition", {
      x: 0,
      y: 0
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "endPosition", {
      x: 0,
      y: 0
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "originalCoord", {
      x: 0,
      y: 0
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "finalCoord", {
      x: 0,
      y: 0
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "startEvnt", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "tapheld", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "firstTap", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "cooling", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "doubletapped", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "lastTouch", 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "hasSwiped", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "tapStarted", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "swipeStarted", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "startTime", 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "holdTimer", -1);

    defineProperty_default()(assertThisInitialized_default()(_this), "tapTimer", -1);

    defineProperty_default()(assertThisInitialized_default()(_this), "actionTimer", -1);

    defineProperty_default()(assertThisInitialized_default()(_this), "settings", void 0);

    _this.el = el; // Set settings by device type (if device is touch capable)

    settings.startevent = settings.touchCapable ? ["touchstart"] : ["mousedown"];
    settings.endevent = settings.touchCapable ? ["touchend"] : ["mouseup"];
    settings.moveevent = settings.touchCapable ? ["touchmove"] : ["mousemove"];
    settings.tapevent = settings.touchCapable ? ["tap"] : ["click"];
    _this.settings = settings; // this.scrollEvents = new ScrollEventsService(this.el);

    _this.addEventListeners();

    return _this;
  }

  createClass_default()(TouchEventsService, [{
    key: "destroy",
    value: function destroy() {
      this.removeEventListeners(); // this.scrollEvents.destroy();
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      var _iterator = touch_events_service_createForOfIteratorHelper(this.settings.startevent),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var eventName = _step.value;
          this.el.removeEventListener(eventName, this.onStartEvent.bind(this));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var _iterator2 = touch_events_service_createForOfIteratorHelper(this.settings.moveevent),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _eventName = _step2.value;
          this.el.removeEventListener(_eventName, this.onMoveEvent.bind(this));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      var _iterator3 = touch_events_service_createForOfIteratorHelper(this.settings.endevent),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _eventName2 = _step3.value;
          this.el.removeEventListener(_eventName2, this.onEndEvent.bind(this));
        } // this.scrollEvents.destroy();

      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    } // HELPER METHODS:

  }, {
    key: "getSwipeDir",
    value: function getSwipeDir(startPosition, endPosition) {
      var hThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.settings.swipeHThreshold;
      var vThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.settings.swipeVThreshold;
      var swipeDir = "";

      if (startPosition.y > endPosition.y && startPosition.y - endPosition.y > vThreshold) {
        swipeDir = "swipeup";
      }

      if (startPosition.x < endPosition.x && endPosition.x - startPosition.x > hThreshold) {
        swipeDir = "swiperight";
      }

      if (startPosition.y < endPosition.y && endPosition.y - startPosition.y > vThreshold) {
        swipeDir = "swipedown";
      }

      if (startPosition.x > endPosition.x && startPosition.x - endPosition.x > hThreshold) {
        swipeDir = "swipeleft";
      }

      return swipeDir;
    }
  }, {
    key: "getPostion",
    value: function getPostion(event) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TouchType.DEFAULT;
      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var touchesTypes;

      switch (type) {
        case TouchType.CHANGED:
          touchesTypes = event.changedTouches;
          break;

        case TouchType.TARGET:
          touchesTypes = event.targetTouches;
          break;

        default:
          touchesTypes = event.touches;
          break;
      }

      var position = {
        x: this.settings.touchCapable ? touchesTypes[index].pageX : event.pageX,
        y: this.settings.touchCapable ? touchesTypes[index].pageY : event.pageY
      };
      return position;
    }
  }, {
    key: "getOffset",
    value: function getOffset(event) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TouchType.DEFAULT;
      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var boundingClientRect = this.el.getBoundingClientRect();
      var touchesTypes;

      switch (type) {
        case TouchType.CHANGED:
          touchesTypes = event.changedTouches;
          break;

        case TouchType.TARGET:
          touchesTypes = event.targetTouches;
          break;

        default:
          touchesTypes = event.touches;
          break;
      }

      var offset = {
        x: this.settings.touchCapable ? Math.round(touchesTypes[index].pageX - (boundingClientRect ? boundingClientRect.left : 0)) : Math.round(event.pageX - (boundingClientRect ? boundingClientRect.left : 0)),
        y: this.settings.touchCapable ? Math.round(touchesTypes[index].pageY - (boundingClientRect ? boundingClientRect.top : 0)) : Math.round(event.pageY - (boundingClientRect ? boundingClientRect.top : 0))
      };
      return offset;
    }
  }, {
    key: "getTouchData",
    value: function getTouchData(event) {
      var withIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var positionType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TouchType.DEFAULT;
      var offsetType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TouchType.CHANGED;
      var touchData = {
        position: this.getPostion(event, positionType),
        offset: this.getOffset(event, offsetType),
        time: Date.now()
      };

      if (withIndex) {
        touchData.index = utils_service_Utils.getElementIndex(event.target);
      }

      return touchData;
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _iterator4 = touch_events_service_createForOfIteratorHelper(this.settings.startevent),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var eventName = _step4.value;
          this.el.addEventListener(eventName, this.onStartEvent.bind(this), {
            passive: true
          });
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      var _iterator5 = touch_events_service_createForOfIteratorHelper(this.settings.moveevent),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _eventName3 = _step5.value;
          this.el.addEventListener(_eventName3, this.onMoveEvent.bind(this), {
            passive: true
          });
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var _iterator6 = touch_events_service_createForOfIteratorHelper(this.settings.endevent),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _eventName4 = _step6.value;
          this.el.addEventListener(_eventName4, this.onEndEvent.bind(this), {
            passive: true
          });
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    } // EVENT HANDLERS:

  }, {
    key: "onStartEvent",
    value: function onStartEvent(event) {
      if (event.which && event.which !== 1) {
        return false;
      }

      this.startPosition = this.getPostion(event, TouchType.TARGET);
      this.endPosition = {
        x: this.startPosition.x,
        y: this.startPosition.y
      };
      this.startTime = Date.now(); // For `doubletap`

      this.doubletapped = false;

      if (!this.firstTap) {
        this.firstTap = this.getTouchData(event, true, TouchType.DEFAULT, TouchType.CHANGED);
      } // For `tap`, `swipe`


      this.tapStarted = true;
      this.swipeStarted = true; // For `swipe`

      this.originalCoord = this.getPostion(event, TouchType.TARGET);
      this.finalCoord = this.getPostion(event, TouchType.TARGET);
      this.startEvnt = this.getTouchData(event, false, TouchType.DEFAULT, TouchType.CHANGED);
      this.tapstart(event);
      this.taphold(event);
      return true;
    }
  }, {
    key: "onEndEvent",
    value: function onEndEvent(event) {
      this.endPosition = this.getPostion(event, TouchType.CHANGED);
      this.tapheld = false;
      window.clearTimeout(this.holdTimer);
      this.tapend(event);
      this.swipeend(event);
      this.tap(event);
      this.doubletap(event);
      this.singletap(event);
      this.tapStarted = false;
      this.swipeStarted = false;
      this.hasSwiped = false;
      return true;
    }
  }, {
    key: "onMoveEvent",
    value: function onMoveEvent(event) {
      this.endPosition = this.getPostion(event, TouchType.TARGET);
      this.finalCoord = this.getPostion(event, TouchType.TARGET);
      this.tapmove(event);
      this.swipe(event);
      return true;
    } // CUSTOM EVENT METHODS:

    /** tapstart Event */

  }, {
    key: "tapstart",
    value: function tapstart(event) {
      this.triggerCustomEvent("tapstart", event, this.getTouchData(event, false, TouchType.DEFAULT, TouchType.CHANGED));
      return true;
    }
    /** tapmove Event */

  }, {
    key: "tapmove",
    value: function tapmove(event) {
      this.triggerCustomEvent("tapmove", event, this.getTouchData(event, false, TouchType.DEFAULT, TouchType.CHANGED));
      return true;
    }
    /** tapend Event */

  }, {
    key: "tapend",
    value: function tapend(event) {
      this.triggerCustomEvent("tapend", event, this.getTouchData(event, false, TouchType.CHANGED, TouchType.CHANGED));
      return true;
    }
    /** taphold Event */

  }, {
    key: "taphold",
    value: function taphold(event) {
      var _this2 = this;

      this.holdTimer = window.setTimeout(function () {
        var diffPosition = {
          x: _this2.startPosition.x - _this2.endPosition.x,
          y: _this2.startPosition.y - _this2.endPosition.y
        }; // helded?

        if (_this2.startPosition.x === _this2.endPosition.x && _this2.startPosition.y === _this2.endPosition.y || diffPosition.x >= -_this2.settings.tapPixelRange && diffPosition.x <= _this2.settings.tapPixelRange && diffPosition.y >= -_this2.settings.tapPixelRange && diffPosition.y <= _this2.settings.tapPixelRange) {
          _this2.tapheld = true;
          var endTime = Date.now();
          var duration = endTime - _this2.startTime;
          var touchesLength = event.targetTouches ? event.targetTouches.length : 1;
          var touches = new Array();

          for (var i = 0; i < touchesLength; i++) {
            var elOffset = _this2.el.getBoundingClientRect();

            var touch = {
              position: {
                x: _this2.settings.touchCapable ? event.changedTouches[i].pageX : event.pageX,
                y: _this2.settings.touchCapable ? event.changedTouches[i].pageY : event.pageY
              },
              offset: {
                x: _this2.settings.touchCapable ? Math.round(event.changedTouches[i].pageX - (elOffset ? elOffset.left : 0)) : Math.round(event.pageX - (elOffset ? elOffset.left : 0)),
                y: _this2.settings.touchCapable ? Math.round(event.changedTouches[i].pageY - (elOffset ? elOffset.top : 0)) : Math.round(event.pageY - (elOffset ? elOffset.top : 0))
              }
            };
            touches.push(touch);
          }

          var eventName = touchesLength > 1 ? "taphold" + touchesLength : "taphold";
          var touchData = {
            touches: touches,
            time: Date.now(),
            duration: duration
          };

          _this2.triggerCustomEvent(eventName, event, touchData);
        }
      }, this.settings.tapholdThreshold);
      return true;
    }
    /** doubletap Event */

  }, {
    key: "doubletap",
    value: function doubletap(event) {
      var _this3 = this;

      var now = Date.now();
      var lastTouch = Number(this.lastTouch) || now + 1;
      var delta = now - lastTouch;

      if (this.actionTimer !== -1) {
        window.clearTimeout(this.actionTimer);
      }

      if (delta < this.settings.doubletapInterval && delta > 100 && this.firstTap && utils_service_Utils.getElementIndex(event.target) === this.firstTap.index) {
        this.doubletapped = true;
        window.clearTimeout(this.tapTimer);
        var lastTap = this.getTouchData(event, true, TouchType.CHANGED, TouchType.CHANGED);
        var touchData = {
          firstTap: this.firstTap,
          secondTap: lastTap,
          interval: lastTap.time - this.firstTap.time
        };

        if (!this.cooling) {
          this.triggerCustomEvent("doubletap", event, touchData);
          this.firstTap = null;
        }

        this.cooling = true;
        window.setTimeout(function () {
          _this3.cooling = false;
        }, this.settings.doubletapInterval);
      } else {
        this.actionTimer = window.setTimeout(function () {
          _this3.firstTap = null;
          window.clearTimeout(_this3.actionTimer);
        }, this.settings.doubletapInterval, [event]);
      }

      this.lastTouch = now;
    }
    /**
     * singletap Event
     * This is used in conjuction with doubletap when both events are needed on the same element
     */

  }, {
    key: "singletap",
    value: function singletap(event) {
      var _this4 = this;

      this.tapTimer = window.setTimeout(function () {
        var diffPosition = {
          x: _this4.startPosition.x - _this4.endPosition.x,
          y: _this4.startPosition.y - _this4.endPosition.y
        };

        if (!_this4.doubletapped && !_this4.tapheld && (_this4.startPosition.x === _this4.endPosition.x && _this4.startPosition.y === _this4.endPosition.y || diffPosition.x >= -_this4.settings.tapPixelRange && diffPosition.x <= _this4.settings.tapPixelRange && diffPosition.y >= -_this4.settings.tapPixelRange && diffPosition.y <= _this4.settings.tapPixelRange)) {
          var touchData = _this4.getTouchData(event, false, TouchType.CHANGED, TouchType.CHANGED); // Was it a taphold?


          if (touchData.time - _this4.startTime < _this4.settings.tapholdThreshold) {
            _this4.triggerCustomEvent("singletap", event, touchData);
          }
        }
      }, this.settings.doubletapInterval);
    }
    /** tap Event */

  }, {
    key: "tap",
    value: function tap(event) {
      var diffPosition = {
        x: this.startPosition.x - this.endPosition.x,
        y: this.startPosition.y - this.endPosition.y
      };

      if (this.tapStarted && Date.now() - this.startTime < this.settings.tapholdThreshold && (this.startPosition.x === this.endPosition.x && this.startPosition.y === this.endPosition.y || diffPosition.x >= -this.settings.tapPixelRange && diffPosition.x <= this.settings.tapPixelRange && diffPosition.y >= -this.settings.tapPixelRange && diffPosition.y <= this.settings.tapPixelRange)) {
        var touchesLength = event.targetTouches ? event.targetTouches.length : 1;
        var touches = new Array();

        for (var i = 0; i < touchesLength; i++) {
          var elOffset = this.el.getBoundingClientRect();
          var touch = {
            position: {
              x: this.settings.touchCapable ? event.changedTouches[i].pageX : event.pageX,
              y: this.settings.touchCapable ? event.changedTouches[i].pageY : event.pageY
            },
            offset: {
              x: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageX - (elOffset ? elOffset.left : 0)) : Math.round(event.pageX - (elOffset ? elOffset.left : 0)),
              y: this.settings.touchCapable ? Math.round(event.changedTouches[i].pageY - (elOffset ? elOffset.top : 0)) : Math.round(event.pageY - (elOffset ? elOffset.top : 0))
            }
          };
          touches.push(touch);
        }

        var touchData = {
          touches: touches,
          time: Date.now()
        };
        var eventName = touchesLength > 1 ? "tap" + touchesLength : "tap";
        this.triggerCustomEvent(eventName, event, touchData);
      }
    }
    /**
     * swipe Event
     * (also handles swipeup, swiperight, swipedown and swipeleft)
     *
     * (similar to `touchMove` method in jquery touch events)
     */

  }, {
    key: "swipe",
    value: function swipe(event) {
      var swipeDir = this.getSwipeDir(this.originalCoord, this.finalCoord);

      if (swipeDir && this.swipeStarted && this.startEvnt) {
        this.originalCoord.x = 0;
        this.originalCoord.y = 0;
        this.finalCoord.x = 0;
        this.finalCoord.y = 0;
        this.swipeStarted = false;
        var endEvnt = this.getTouchData(event, false, TouchType.DEFAULT, TouchType.CHANGED); // Calculate the swipe amount (normalized):

        var xAmount = Math.abs(this.startEvnt.position.x - endEvnt.position.x);
        var yAmount = Math.abs(this.startEvnt.position.y - endEvnt.position.y);
        var touchData = {
          startEvnt: this.startEvnt,
          endEvnt: endEvnt,
          direction: swipeDir.replace("swipe", ""),
          xAmount: xAmount,
          yAmount: yAmount,
          duration: endEvnt.time - this.startEvnt.time
        };
        this.hasSwiped = true;
        this.triggerCustomEvent("swipe", event, touchData);
        this.triggerCustomEvent(swipeDir, event, touchData);
      }
    }
    /**
     * swipeend Event
     * (similar `touchEnd` method in jquery touch events)
     */

  }, {
    key: "swipeend",
    value: function swipeend(event) {
      var endEvnt = this.getTouchData(event, false, TouchType.CHANGED, TouchType.CHANGED);

      if (this.hasSwiped && this.startEvnt) {
        var swipeDir = this.getSwipeDir(this.startEvnt.position, endEvnt.position); // Calculate the swipe amount (normalized):

        var xAmount = Math.abs(this.startEvnt.position.x - endEvnt.position.x);
        var yAmount = Math.abs(this.startEvnt.position.y - endEvnt.position.y);
        var touchData = {
          startEvnt: this.startEvnt,
          endEvnt: endEvnt,
          direction: swipeDir.replace("swipe", ""),
          xAmount: xAmount,
          yAmount: yAmount,
          duration: endEvnt.time - this.startEvnt.time
        };
        this.triggerCustomEvent("swipeend", event, touchData);
      }
    }
  }]);

  return TouchEventsService;
}(BaseTouchEventsService);
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/services/index.ts







// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/binders/data-scroll-position-y.binder.ts

var DEFAULT_OFFSET = 10;
/**
 * rv-data-scroll-position
 * Sets the scroll position to the element as a data attribute,
 * useful if you want to define styles depending on the scroll position.
 * ```
 * html:not([[data-scroll-position-y='top']) {
 *    padding-top: 3em;
 * }
 * ```
 * @see https://css-tricks.com/styling-based-on-scroll-position/
 */

var dataScrollPositionYBinder = {
  name: "data-scroll-position-y",
  customData: {},
  bind: function bind() {
    var _this = this;

    if (!this.customData) {
      this.customData = {};
    }

    this.customData.onScroll = function () {
      if (_this.customData.elementSelector === "window") {
        var element = _this.customData.watchScrollOnElement;

        if (element.scrollY <= 0 + _this.customData.offsetTop) {
          _this.el.dataset.scrollPositionY = "top";
        } else if (element.innerHeight + element.pageYOffset + _this.customData.offsetBottom >= document.body.offsetHeight) {
          _this.el.dataset.scrollPositionY = "bottom";
        } else {
          _this.el.dataset.scrollPositionY = "scrolled";
        }
      } else {
        var _element = _this.customData.watchScrollOnElement;

        if (_element.scrollTop <= 0 + _this.customData.offsetTop) {
          _this.el.dataset.scrollPositionY = "top";
        } else if (_element.scrollTop + _this.customData.offsetBottom >= _element.scrollHeight - _element.clientHeight) {
          _this.el.dataset.scrollPositionY = "bottom";
        } else {
          _this.el.dataset.scrollPositionY = "scrolled";
        }
      }
    };
  },
  routine: function routine(el) {
    var elementSelector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "window";

    // Remove old scroll event
    if (this.customData.watchScrollOnElement) {
      this.customData.watchScrollOnElement.removeEventListener("scroll", control/* debounce.bind */.Ds.bind(this, this.customData.onScroll.bind(this)));
    } // Set new element to watch for the scroll event


    if (elementSelector === "window") {
      this.customData.watchScrollOnElement = window;
    } else if (elementSelector === "this") {
      this.customData.watchScrollOnElement = this.el;
    } else {
      this.customData.watchScrollOnElement = document.querySelector(elementSelector);
    } // Watch new element for scroll event


    if (this.customData.watchScrollOnElement) {
      // console.debug('addEventListener', this.customData.watchScrollOnElement);
      this.customData.watchScrollOnElement.addEventListener("scroll", (0,control/* debounce */.Ds)(this.customData.onScroll.bind(this)), {
        passive: true
      });
    }

    this.customData.offsetTop = Number(this.el.dataset.offsetTop) || DEFAULT_OFFSET;
    this.customData.offsetBottom = Number(this.el.dataset.offsetBottom) || DEFAULT_OFFSET;
    this.customData.elementSelector = elementSelector; // inital scroll position

    this.customData.onScroll();
  },
  unbind: function unbind() {
    // Remove old scroll event
    if (this.customData.watchScrollOnElement) {
      this.customData.watchScrollOnElement.removeEventListener("scroll", (0,control/* debounce */.Ds)(this.customData.onScroll.bind(this)));
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/binders/touch-events.binder.ts

var touchEventsBinder = {
  name: "touch-events",
  bind: function bind(el) {
    if (!this.customData) {
      this.customData = {};
    }

    this.customData.touchEventService = new TouchEventsService(el);
  },
  unbind: function unbind() {
    if (this.customData.touchEventService) {
      this.customData.touchEventService.destroy();
    }
  },
  routine: function routine() {// nothing
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/binders/scroll-events.binder.ts

var scrollEventsBinder = {
  name: "scroll-events",
  bind: function bind(el) {
    if (!this.customData) {
      this.customData = {};
    }

    this.customData.touchEventService = new ScrollEventsService(el);
  },
  unbind: function unbind() {
    if (this.customData.touchEventService) {
      this.customData.touchEventService.destroy();
    }
  },
  routine: function routine() {// nothing
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/binders/scrollbar-autoscroll.binder.ts


/**
 * Slideout click event to toggle the slideout
 */

var autoscrollBinder = {
  name: "autoscroll",
  routine: function routine(el, options) {
    var _this = this;

    this.customData = this.customData || {};

    if (options && options.width && (0,type/* isString */.HD)(options.width)) {
      if (options.width === "100vw") {
        el.style.width = options.width;
      } else {
        el.style.width = options.width;
      }
    }

    el.classList.add("rv-autoscroll-".concat(options.angle));
    setTimeout(function () {
      if (_this.customData.autoscroll) {
        _this.customData.autoscroll.destroy();
      }

      _this.customData.autoscroll = new Autoscroll(el, options);
    }, 1000);
  },
  unbind: function unbind() {
    if (this.customData.autoscroll) {
      this.customData.autoscroll.destroy();
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/binders/scrollbar-draggable.binder.ts

/**
 * dragscroll
 */

var scrollbarDraggableBinder = {
  name: "scrollbar-draggable",
  routine: function routine(el, options) {
    this.customData = this.customData || {};

    if (this.customData.dragscroll) {
      this.customData.dragscroll.destroy();
    }

    this.customData.dragscroll = new Dragscroll(el, options);
  },
  unbind: function unbind() {
    if (this.customData.dragscroll) {
      this.customData.dragscroll.destroy();
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/binders/sync-element-property.binder.ts

/**
 * Binds an event handler on the element.
 * either copy-element-width or copy-element-height
 */

var syncElementPropertyBinder = {
  name: "sync-element-*",
  "function": true,
  priority: 1000,
  bind: function bind() {
    /**/
  },
  unbind: function unbind()
  /*el: HTMLElement*/
  {
    /**/
  },
  routine: function routine(el, value) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    var propertyName = this.args[0];
    var elementToSync = document.getElementById(value);

    if (elementToSync) {
      switch (propertyName) {
        case "height":
          el.style.height = elementToSync.clientHeight + "px";
          window.addEventListener("resize", (0,control/* throttle */.P2)(function () {
            el.style.height = elementToSync.clientHeight + "px";
          }));
          break;

        case "width":
          el.style.width = elementToSync.clientWidth + "px";
          window.addEventListener("resize", (0,control/* throttle */.P2)(function () {
            el.style.width = elementToSync.clientWidth + "px";
          }));
          break;

        default:
          console.warn("[syncElementPropertyBinder] Unknown property: " + propertyName);
      }
    } else {
      console.warn("[syncElementPropertyBinder] Could not find element with id: " + value);
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/binders/index.ts






// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/types/index.ts


// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/extras.module.ts
 // import * as formatters from './formatters';

 // import * as components from './components';

var extrasModule = {
  formatters: {},
  binders: src_binders_namespaceObject,
  services: src_services_namespaceObject,
  components: {}
};
// CONCATENATED MODULE: ./node_modules/@ribajs/extras/src/index.ts




// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-slideshow/bs4-slideshow-slides.component.html
var bs4_slideshow_slides_component = __webpack_require__(48);
var bs4_slideshow_slides_component_default = /*#__PURE__*/__webpack_require__.n(bs4_slideshow_slides_component);

// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-slideshow/bs4-slideshow-controls.component.html
var bs4_slideshow_controls_component = __webpack_require__(229);
var bs4_slideshow_controls_component_default = /*#__PURE__*/__webpack_require__.n(bs4_slideshow_controls_component);

// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-slideshow/bs4-slideshow-indicators.component.html
var bs4_slideshow_indicators_component = __webpack_require__(3794);
var bs4_slideshow_indicators_component_default = /*#__PURE__*/__webpack_require__.n(bs4_slideshow_indicators_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-slideshow/bs4-slideshow.component.ts











function bs4_slideshow_component_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function bs4_slideshow_component_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { bs4_slideshow_component_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { bs4_slideshow_component_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function bs4_slideshow_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_slideshow_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_slideshow_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }










var SLIDESHOW_INNER_SELECTOR = ".slideshow-inner";
var SLIDES_SELECTOR = "".concat(SLIDESHOW_INNER_SELECTOR, " > .slide");
var Bs4SlideshowComponent = /*#__PURE__*/function (_TemplatesComponent) {
  inherits_default()(Bs4SlideshowComponent, _TemplatesComponent);

  var _super = bs4_slideshow_component_createSuper(Bs4SlideshowComponent);

  createClass_default()(Bs4SlideshowComponent, [{
    key: "slideshowInner",
    get: function get() {
      if (!this._slideshowInner) {
        this._slideshowInner = this.el.querySelector(SLIDESHOW_INNER_SELECTOR);
      }

      if (!this._slideshowInner) {
        throw new Error("Child element with selecto ".concat(SLIDESHOW_INNER_SELECTOR, " not found!"));
      }

      return this._slideshowInner;
    }
  }, {
    key: "slideElements",
    get: function get() {
      if (!this._slideElements) {
        this._slideElements = this.el.querySelectorAll(SLIDES_SELECTOR);
      }

      if (!this._slideElements) {
        throw new Error("Child element with selecto ".concat(SLIDES_SELECTOR, " not found!"));
      }

      return this._slideElements;
    }
  }, {
    key: "controlsElements",
    get: function get() {
      if (!this._controlsElements) {
        this._controlsElements = this.el.querySelectorAll(".slideshow-control-prev, .slideshow-control-next");
      }

      return this._controlsElements;
    }
  }, {
    key: "indicatorsElement",
    get: function get() {
      if (!this._indicatorsElement) {
        this._indicatorsElement = this.el.querySelector(".slideshow-indicators");
      }

      return this._indicatorsElement;
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ["min-width", "slides-to-show", "slides-to-scroll", "controls", "controls-position", "draggable", "autoplay", "autoplay-interval", "autoplay-velocity", "control-prev-icon-src", "control-next-icon-src", "indicator-inactive-icon-src", "indicator-active-icon-src", "angle", "set-active-slide", "pause-on-hover", "sticky", "indicators", "indicators-position", "pause", "sm-min-width", "sm-slides-to-show", "sm-slides-to-scroll", "sm-controls", "sm-controls-position", "sm-draggable", "sm-autoplay", "sm-autoplay-interval", "sm-autoplay-velocity", "sm-control-prev-icon-src", "sm-control-next-icon-src", "sm-indicator-inactive-icon-src", "sm-indicator-active-icon-src", "sm-angle", "sm-set-active-slide", "sm-pause-on-hover", "sm-sticky", "sm-indicators", "sm-indicators-position", "sm-pause", "md-min-width", "md-slides-to-show", "md-slides-to-scroll", "md-controls", "md-controls-position", "md-draggable", "md-autoplay", "md-autoplay-interval", "md-autoplay-velocity", "md-control-prev-icon-src", "md-control-next-icon-src", "md-indicator-inactive-icon-src", "md-indicator-active-icon-src", "md-angle", "md-set-active-slide", "md-pause-on-hover", "md-sticky", "md-indicators", "sm-indicators-position", "md-pause", "lg-min-width", "lg-slides-to-show", "lg-slides-to-scroll", "lg-controls", "lg-controls-position", "lg-draggable", "lg-autoplay", "lg-autoplay-interval", "lg-autoplay-velocity", "lg-control-prev-icon-src", "lg-control-next-icon-src", "lg-indicator-inactive-icon-src", "lg-indicator-active-icon-src", "lg-angle", "lg-set-active-slide", "lg-pause-on-hover", "lg-sticky", "lg-indicators", "lg-indicators-position", "lg-pause", "xl-min-width", "xl-slides-to-show", "xl-slides-to-scroll", "xl-controls", "xl-controls-position", "xl-draggable", "xl-autoplay", "xl-autoplay-interval", "xl-autoplay-velocity", "xl-control-prev-icon-src", "xl-control-next-icon-src", "xl-indicator-inactive-icon-src", "xl-indicator-active-icon-src", "xl-angle", "xl-set-active-slide", "xl-pause-on-hover", "xl-sticky", "xl-indicators", "xl-indicators-position", "xl-pause"];
    }
  }]);

  function Bs4SlideshowComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4SlideshowComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "templateAttributes", [{
      name: "class",
      required: false
    }, {
      name: "handle",
      required: false
    }, {
      name: "type",
      required: true
    }, {
      name: "active",
      type: "boolean",
      required: false
    }, {
      name: "index",
      type: "number",
      required: false
    }]);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "dragscrollService", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "continuousAutoplayService", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scrollEventsService", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "_slideshowInner", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "_slideElements", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "_controlsElements", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "_indicatorsElement", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "templateControls", (bs4_slideshow_controls_component_default()));

    defineProperty_default()(assertThisInitialized_default()(_this), "templateIndicators", (bs4_slideshow_indicators_component_default()));

    defineProperty_default()(assertThisInitialized_default()(_this), "autoplayIntervalIndex", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "continuousAutoplayIntervalIndex", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "resumeTimer", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "routerEvents", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "breakpoint", "xs");

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      // Template methods
      next: _this.next.bind(assertThisInitialized_default()(_this)),
      prev: _this.prev.bind(assertThisInitialized_default()(_this)),
      goTo: _this.goTo.bind(assertThisInitialized_default()(_this)),
      // Template properties
      items: new Array(),
      // Options
      slidesToScroll: 1,
      controls: true,
      controlsPosition: "insite-middle",
      pauseOnHover: true,
      sticky: false,
      indicators: true,
      indicatorsPosition: "insite-bottom",
      pause: false,
      draggable: true,
      autoplay: false,
      autoplayInterval: 0,
      autoplayVelocity: 0.8,
      controlPrevIconSrc: "",
      controlNextIconSrc: "",
      indicatorActiveIconSrc: "",
      indicatorInactiveIconSrc: "",
      angle: "horizontal",
      // Responsive options
      xs: {
        minWidth: 0
      },
      sm: {
        minWidth: 576
      },
      md: {
        minWidth: 768
      },
      lg: {
        minWidth: 992
      },
      xl: {
        minWidth: 1200
      },
      // Classes
      controlsPositionClass: "",
      indicatorsPositionClass: ""
    });

    return _this;
  }
  /**
   * Go to next slide
   */


  createClass_default()(Bs4SlideshowComponent, [{
    key: "next",
    value: function next() {
      this.scrollToNextSlide();
    }
    /**
     * Go to prev slide
     */

  }, {
    key: "prev",
    value: function prev() {
      this.scrollToPrevSlide();
    }
    /**
     * Go to slide by index
     * @param index
     */

  }, {
    key: "goTo",
    value: function goTo(index) {
      this.setSlidePositions();
      var top = 0;
      var left = 0;

      if (!this.scope.items[index]) {
        console.error("Slide with index \"".concat(index, "\" not found!"), this.scope.items[index]);
        return;
      }

      if (this.scope.angle === "vertical") {
        // Check if we do not need to slide
        if (this.scope.items[index].position.centerY === 0) {
          // We do not need to scroll
          return;
        }

        top = this.slideshowInner.scrollTop + this.scope.items[index].position.centerY;
      } else {
        // Check if we do not need to slide
        if (this.scope.items[index].position.centerX === 0) {
          // We do not need to scroll
          return;
        }

        left = this.slideshowInner.scrollLeft + this.scope.items[index].position.centerX;
      } // TODO new scrollservice based on https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/


      if (this.slideElements[index]) {
        // if is is window to scroll
        if (typeof this.slideshowInner.scroll === "function") {
          this.slideshowInner.scroll({
            behavior: "smooth",
            left: left,
            top: top
          });
        } else {
          if (this.scope.angle === "vertical") {
            this.slideshowInner.scrollTop = top;
          } else {
            this.slideshowInner.scrollLeft = left;
          }
        }
      }
    }
  }, {
    key: "setOptions",
    value: function setOptions(dest, source) {
      dest.slidesToScroll = typeof source.slidesToScroll !== "undefined" ? (0,type/* clone */.d9)(false, source.slidesToScroll) : dest.slidesToScroll;
      dest.controls = typeof source.controls !== "undefined" ? (0,type/* clone */.d9)(false, source.controls) : dest.controls;
      dest.controlsPosition = typeof source.controlsPosition !== "undefined" ? (0,type/* clone */.d9)(false, source.controlsPosition) : dest.controlsPosition;
      dest.draggable = typeof source.draggable !== "undefined" ? (0,type/* clone */.d9)(false, source.draggable) : dest.draggable;
      dest.autoplay = typeof source.autoplay !== "undefined" ? (0,type/* clone */.d9)(false, source.autoplay) : dest.autoplay;
      dest.autoplayInterval = typeof source.autoplayInterval !== "undefined" ? (0,type/* clone */.d9)(false, source.autoplayInterval) : dest.autoplayInterval;
      dest.autoplayVelocity = typeof source.autoplayVelocity !== "undefined" ? (0,type/* clone */.d9)(false, source.autoplayVelocity) : dest.autoplayVelocity;
      dest.controlPrevIconSrc = typeof source.controlPrevIconSrc !== "undefined" ? (0,type/* clone */.d9)(false, source.controlPrevIconSrc) : dest.controlPrevIconSrc;
      dest.controlNextIconSrc = typeof source.controlNextIconSrc !== "undefined" ? (0,type/* clone */.d9)(false, source.controlNextIconSrc) : dest.controlNextIconSrc;
      dest.indicatorActiveIconSrc = typeof source.indicatorActiveIconSrc !== "undefined" ? (0,type/* clone */.d9)(false, source.indicatorActiveIconSrc) : dest.indicatorActiveIconSrc;
      dest.indicatorInactiveIconSrc = typeof source.indicatorInactiveIconSrc !== "undefined" ? (0,type/* clone */.d9)(false, source.indicatorInactiveIconSrc) : dest.indicatorInactiveIconSrc;
      dest.angle = typeof source.angle !== "undefined" ? (0,type/* clone */.d9)(false, source.angle) : dest.angle;
      dest.pauseOnHover = typeof source.pauseOnHover !== "undefined" ? (0,type/* clone */.d9)(false, source.pauseOnHover) : dest.pauseOnHover;
      dest.sticky = typeof source.sticky !== "undefined" ? (0,type/* clone */.d9)(false, source.sticky) : dest.sticky;
      dest.indicators = typeof source.indicators !== "undefined" ? (0,type/* clone */.d9)(false, source.indicators) : dest.indicators;
      dest.indicatorsPosition = typeof source.indicatorsPosition !== "undefined" ? (0,type/* clone */.d9)(false, source.indicatorsPosition) : dest.indicatorsPosition;
      dest.pause = typeof source.pause !== "undefined" ? (0,type/* clone */.d9)(false, source.pause) : dest.pause;
    }
  }, {
    key: "setOptionsIfUndefined",
    value: function setOptionsIfUndefined(dest, source) {
      dest.slidesToScroll = typeof dest.slidesToScroll === "undefined" ? source.slidesToScroll : dest.slidesToScroll;
      dest.controls = typeof dest.controls === "undefined" ? source.controls : dest.controls;
      dest.controlsPosition = typeof dest.controlsPosition === "undefined" ? source.controlsPosition : dest.controlsPosition;
      dest.draggable = typeof dest.draggable === "undefined" ? source.draggable : dest.draggable;
      dest.autoplay = typeof dest.autoplay === "undefined" ? source.autoplay : dest.autoplay;
      dest.autoplayInterval = typeof dest.autoplayInterval === "undefined" ? source.autoplayInterval : dest.autoplayInterval;
      dest.autoplayVelocity = typeof dest.autoplayVelocity === "undefined" ? source.autoplayVelocity : dest.autoplayVelocity;
      dest.controlPrevIconSrc = typeof dest.controlPrevIconSrc === "undefined" ? source.controlPrevIconSrc : dest.controlPrevIconSrc;
      dest.controlNextIconSrc = typeof dest.controlNextIconSrc === "undefined" ? source.controlNextIconSrc : dest.controlNextIconSrc;
      dest.indicatorActiveIconSrc = typeof dest.indicatorActiveIconSrc === "undefined" ? source.indicatorActiveIconSrc : dest.indicatorActiveIconSrc;
      dest.indicatorInactiveIconSrc = typeof dest.indicatorInactiveIconSrc === "undefined" ? source.indicatorInactiveIconSrc : dest.indicatorInactiveIconSrc;
      dest.angle = typeof dest.angle === "undefined" ? source.angle : dest.angle;
      dest.pauseOnHover = typeof dest.pauseOnHover === "undefined" ? source.pauseOnHover : dest.pauseOnHover;
      dest.sticky = typeof dest.sticky === "undefined" ? source.sticky : dest.sticky;
      dest.indicators = typeof dest.indicators === "undefined" ? source.indicators : dest.indicators;
      dest.indicatorsPosition = typeof dest.indicatorsPosition === "undefined" ? source.indicatorsPosition : dest.indicatorsPosition;
      dest.pause = typeof dest.pause === "undefined" ? source.pause : dest.pause;
    }
  }, {
    key: "initResponsiveOptions",
    value: function initResponsiveOptions() {
      this.setOptions(this.scope.xs, this.scope);
      this.setOptionsIfUndefined(this.scope.sm, this.scope.xs);
      this.setOptionsIfUndefined(this.scope.md, this.scope.sm);
      this.setOptionsIfUndefined(this.scope.lg, this.scope.md);
      this.setOptionsIfUndefined(this.scope.xl, this.scope.lg);
      this.breakpoint = this.getBreakpoint();
      this.setOptionsByBreakpoint(this.breakpoint);
    }
  }, {
    key: "setControlsOptions",
    value: function setControlsOptions() {
      var _this$scope$xs$contro, _this$scope$sm$contro, _this$scope$md$contro, _this$scope$lg$contro, _this$scope$xl$contro;

      var xsControlsPosition = (_this$scope$xs$contro = this.scope.xs.controlsPosition) === null || _this$scope$xs$contro === void 0 ? void 0 : _this$scope$xs$contro.split("-");
      var smControlsPosition = (_this$scope$sm$contro = this.scope.sm.controlsPosition) === null || _this$scope$sm$contro === void 0 ? void 0 : _this$scope$sm$contro.split("-");
      var mdControlsPosition = (_this$scope$md$contro = this.scope.md.controlsPosition) === null || _this$scope$md$contro === void 0 ? void 0 : _this$scope$md$contro.split("-");
      var lgControlsPosition = (_this$scope$lg$contro = this.scope.lg.controlsPosition) === null || _this$scope$lg$contro === void 0 ? void 0 : _this$scope$lg$contro.split("-");
      var xlControlsPosition = (_this$scope$xl$contro = this.scope.xl.controlsPosition) === null || _this$scope$xl$contro === void 0 ? void 0 : _this$scope$xl$contro.split("-");
      this.scope.controlsPositionClass = "control-".concat(xsControlsPosition[0], " control-").concat(xsControlsPosition[1], " control-sm-").concat(smControlsPosition[0], " control-sm-").concat(smControlsPosition[1], " control-md-").concat(mdControlsPosition[0], " control-md-").concat(mdControlsPosition[1], " control-lg-").concat(lgControlsPosition[0], " control-lg-").concat(lgControlsPosition[1], " control-xl-").concat(xlControlsPosition[0], " control-xl-").concat(xlControlsPosition[1]);
    }
  }, {
    key: "setIndicatorsOptions",
    value: function setIndicatorsOptions() {
      var _this$scope$xs$indica, _this$scope$sm$indica, _this$scope$md$indica, _this$scope$lg$indica, _this$scope$xl$indica;

      var xsIndicatorsPosition = (_this$scope$xs$indica = this.scope.xs.indicatorsPosition) === null || _this$scope$xs$indica === void 0 ? void 0 : _this$scope$xs$indica.split("-");
      var smIndicatorsPosition = (_this$scope$sm$indica = this.scope.sm.indicatorsPosition) === null || _this$scope$sm$indica === void 0 ? void 0 : _this$scope$sm$indica.split("-");
      var mdIndicatorsPosition = (_this$scope$md$indica = this.scope.md.indicatorsPosition) === null || _this$scope$md$indica === void 0 ? void 0 : _this$scope$md$indica.split("-");
      var lgIndicatorsPosition = (_this$scope$lg$indica = this.scope.lg.indicatorsPosition) === null || _this$scope$lg$indica === void 0 ? void 0 : _this$scope$lg$indica.split("-");
      var xlIndicatorsPosition = (_this$scope$xl$indica = this.scope.xl.indicatorsPosition) === null || _this$scope$xl$indica === void 0 ? void 0 : _this$scope$xl$indica.split("-");
      this.scope.indicatorsPositionClass = "indicators-".concat(xsIndicatorsPosition[0], " indicators-").concat(xsIndicatorsPosition[1], " indicators-sm-").concat(smIndicatorsPosition[0], " indicators-sm-").concat(smIndicatorsPosition[1], " indicators-md-").concat(mdIndicatorsPosition[0], " indicators-md-").concat(mdIndicatorsPosition[1], " indicators-lg-").concat(lgIndicatorsPosition[0], " indicators-lg-").concat(lgIndicatorsPosition[1], " indicators-xl-").concat(xlIndicatorsPosition[0], " indicators-xl-").concat(xlIndicatorsPosition[1]);
    } // TODO create independent bs4 breakpoint service

  }, {
    key: "getBreakpoint",
    value: function getBreakpoint() {
      var size = window.innerWidth; // XS

      if (size >= this.scope.xs.minWidth && size < this.scope.sm.minWidth) {
        return "xs";
      } // SM


      if (size >= this.scope.sm.minWidth && size < this.scope.md.minWidth) {
        return "sm";
      } // MD


      if (size >= this.scope.md.minWidth && size < this.scope.lg.minWidth) {
        return "md";
      } // LG


      if (size >= this.scope.lg.minWidth && size < this.scope.xl.minWidth) {
        return "lg";
      } // XL


      return "xl";
    }
  }, {
    key: "setOptionsByBreakpoint",
    value: function setOptionsByBreakpoint(breakpoint) {
      this.setOptions(this.scope, this.scope[breakpoint]);

      if (this.scope.autoplay) {
        this.enableAutoplay();
      } else {
        this.disableAutoplay();
      }

      if (this.scope.draggable) {
        this.enableDesktopDragscroll();
      } else {
        this.disableDesktopDragscroll();
      }

      this.setControlsOptions();
      this.setIndicatorsOptions();
    }
  }, {
    key: "onBreakpointChanges",
    value: function onBreakpointChanges() {
      this.setOptionsByBreakpoint(this.breakpoint);
    }
  }, {
    key: "onViewChanges",
    value: function onViewChanges() {
      var _this2 = this;

      (0,control/* throttle */.P2)(function () {
        _this2.debug("onViewChanges");

        var newBreakpoint = _this2.getBreakpoint();

        if (newBreakpoint !== _this2.breakpoint) {
          _this2.breakpoint = newBreakpoint;

          _this2.onBreakpointChanges();
        }

        _this2.setSlidePositions();

        var index = _this2.setCenteredSlideActive();

        if (_this2.scope.sticky) {
          _this2.goTo(index);
        }
      })();
    }
  }, {
    key: "onVisibilityChanged",
    value: function onVisibilityChanged(event) {
      if (event.detail.visibile) {
        var _this$dragscrollServi, _this$continuousAutop;

        (_this$dragscrollServi = this.dragscrollService) === null || _this$dragscrollServi === void 0 ? void 0 : _this$dragscrollServi.checkDraggable();
        (_this$continuousAutop = this.continuousAutoplayService) === null || _this$continuousAutop === void 0 ? void 0 : _this$continuousAutop.update();
      }
    }
  }, {
    key: "onScroll",
    value: function onScroll() {
      var _this3 = this;

      (0,control/* throttle */.P2)(function () {
        (0,control/* debounce */.Ds)(function () {
          // this.setSlidePositions();
          // this.setCenteredSlideActive();
          _this3.resume(1000);
        })();
      })();
    }
  }, {
    key: "onScrollend",
    value: function onScrollend() {
      this.setSlidePositions();
      this.setCenteredSlideActive();

      if (this.scope.sticky) {
        this.scrollToNearestSlide();
      }

      this.resume(1000);
    }
  }, {
    key: "onMouseIn",
    value: function onMouseIn() {
      if (this.scope.pauseOnHover) {
        this.scope.pause = true;
      }
    }
  }, {
    key: "onMouseOut",
    value: function onMouseOut() {
      this.resume(200);
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      var _this4 = this;

      (0,control/* throttle */.P2)(function () {
        (0,control/* debounce */.Ds)(function () {
          _this4.resume(1000);
        })();
      })();
    }
    /** Resume if this method was not called up for [delay] milliseconds */

  }, {
    key: "resume",
    value: function resume() {
      var _this5 = this;

      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;

      if (!this.scope.pause) {
        return;
      }

      if (this.resumeTimer !== null) {
        clearTimeout(this.resumeTimer);
        this.resumeTimer = null;
      }

      this.resumeTimer = window.setTimeout(function () {
        _this5.setSlidePositions();

        _this5.scope.pause = false;
      }, delay);
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4SlideshowComponent.prototype), "connectedCallback", this).call(this);

      return this.init(Bs4SlideshowComponent.observedAttributes);
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      if (!this.routerEvents) {
        this.routerEvents = new src.EventDispatcher("main");
      }

      this.routerEvents.on("newPageReady", this.onBreakpointChanges.bind(this));
      window.addEventListener("resize", this.onViewChanges.bind(this)); // Custom event triggered by some parent components when this component changes his visibility, e.g. triggered in the bs4-tabs component

      this.el.addEventListener("visibility-changed", this.onVisibilityChanged.bind(this));
      this.slideshowInner.addEventListener("scroll", this.onScroll.bind(this), {
        passive: true
      });
      this.slideshowInner.addEventListener("scrollended", this.onScrollend.bind(this), {
        passive: true
      });
      this.el.addEventListener("mouseenter", this.onMouseIn.bind(this), {
        passive: true
      });
      this.el.addEventListener("mouseover", this.onMouseIn.bind(this), {
        passive: true
      });
      this.el.addEventListener("focusin", this.onMouseIn.bind(this), {
        passive: true
      });
      this.el.addEventListener("touchstart", this.onMouseIn.bind(this), {
        passive: true
      });
      this.el.addEventListener("mouseout", this.onMouseOut.bind(this), {
        passive: true
      });
      this.el.addEventListener("mouseleave", this.onMouseOut.bind(this), {
        passive: true
      });
      this.el.addEventListener("focusout", this.onMouseOut.bind(this), {
        passive: true
      });
      this.el.addEventListener("mouseup", this.onMouseUp.bind(this), {
        passive: true
      });
      this.el.addEventListener("touchend", this.onMouseUp.bind(this), {
        passive: true
      });
      this.el.addEventListener("scroll", this.onMouseUp.bind(this), {
        passive: true
      });
      this.el.addEventListener("scrollend", this.onMouseUp.bind(this), {
        passive: true
      }); // See ScrollEventsService for this event

      this.el.addEventListener("scrollended", this.onMouseUp.bind(this), {
        passive: true
      }); // inital

      this.onViewChanges(); // this.onScroll();

      this.onScrollend();
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners() {
      // TODO is this removing other throttled resize event listeners?
      window.removeEventListener("resize", this.onViewChanges.bind(this));
      this.el.removeEventListener("visibility-changed", this.onVisibilityChanged.bind(this));
      this.slideshowInner.removeEventListener("scroll", this.onScroll.bind(this));
      this.slideshowInner.removeEventListener("scrollended", this.onScrollend.bind(this));
      this.el.removeEventListener("mouseenter", this.onMouseIn.bind(this));
      this.el.removeEventListener("mouseover", this.onMouseIn.bind(this));
      this.el.removeEventListener("focusin", this.onMouseIn.bind(this));
      this.el.removeEventListener("touchstart", this.onMouseIn.bind(this));
      this.el.removeEventListener("mouseout", this.onMouseOut.bind(this));
      this.el.removeEventListener("mouseleave", this.onMouseOut.bind(this));
      this.el.removeEventListener("focusout", this.onMouseOut.bind(this));
    }
  }, {
    key: "beforeBind",
    value: function () {
      var _beforeBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", get_default()(getPrototypeOf_default()(Bs4SlideshowComponent.prototype), "beforeBind", this).call(this));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function beforeBind() {
        return _beforeBind.apply(this, arguments);
      }

      return beforeBind;
    }()
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4SlideshowComponent.prototype), "afterBind", this).call(this);

              case 2:
                this.initSlideshowInner();
                this.initResponsiveOptions(); // this.removeEventListeners();

                this.addEventListeners();

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "initSlideshowInner",
    value: function initSlideshowInner() {
      this.initSlideshowInnerSlides();
      this.scrollEventsService = new ScrollEventsService(this.slideshowInner);
    }
  }, {
    key: "enableDesktopDragscroll",
    value: function enableDesktopDragscroll() {
      if (!this.dragscrollService) {
        var dragscrollOptions = {
          detectGlobalMove: true
        };
        this.dragscrollService = new Dragscroll(this.slideshowInner, dragscrollOptions);
      }
    }
  }, {
    key: "disableDesktopDragscroll",
    value: function disableDesktopDragscroll() {
      if (this.dragscrollService) {
        this.dragscrollService.destroy();
        this.dragscrollService = undefined;
      }
    }
  }, {
    key: "enableContinuousAutoplay",
    value: function enableContinuousAutoplay() {
      if (!this.continuousAutoplayService) {
        var autoscrollOptions = {
          velocity: this.scope.autoplayVelocity,
          angle: this.scope.angle,
          pauseOnHover: this.scope.pauseOnHover
        };
        this.continuousAutoplayService = new Autoscroll(this.slideshowInner, autoscrollOptions);
      } // on continuous autoplay the scrollended event is never triggered, so call this method all `intervalsTimeMs` milliseconds as a WORKAROUND


      if (!this.continuousAutoplayIntervalIndex) {
        // intervals are depending on the autoscrolling speed (autoplayVelocity)
        var intervalsTimeMs = this.scope.autoplayVelocity * 10000; // this.debug('intervalsTimeMs', intervalsTimeMs);

        this.continuousAutoplayIntervalIndex = window.setInterval(this.onScrollend.bind(this), intervalsTimeMs);
      }
    }
  }, {
    key: "disableContinuousAutoplay",
    value: function disableContinuousAutoplay() {
      if (this.continuousAutoplayService) {
        this.continuousAutoplayService.destroy();
        this.continuousAutoplayService = undefined;
      }

      if (this.continuousAutoplayIntervalIndex) {
        window.clearInterval(this.continuousAutoplayIntervalIndex);
        this.continuousAutoplayIntervalIndex = null;
      }
    }
  }, {
    key: "enableIntervalAutoplay",
    value: function enableIntervalAutoplay() {
      var _this6 = this;

      if (this.autoplayIntervalIndex === null) {
        this.autoplayIntervalIndex = window.setInterval(function () {
          if (!_this6.scope.pause) {
            _this6.next();
          }
        }, this.scope.autoplayInterval);
      }
    }
  }, {
    key: "disableIntervalAutoplay",
    value: function disableIntervalAutoplay() {
      if (this.autoplayIntervalIndex) {
        window.clearInterval(this.autoplayIntervalIndex);
        this.autoplayIntervalIndex = null;
      }
    }
  }, {
    key: "disableAutoplay",
    value: function disableAutoplay() {
      this.disableIntervalAutoplay();
      this.disableContinuousAutoplay();
    }
  }, {
    key: "enableAutoplay",
    value: function enableAutoplay() {
      // continuous scrolling
      if (this.scope.autoplayInterval <= 0) {
        this.enableContinuousAutoplay();
      } else {
        this.enableIntervalAutoplay();
      }
    }
  }, {
    key: "initSlideshowInnerSlides",
    value: function initSlideshowInnerSlides() {
      if (!this.slideElements) {
        throw new Error("No slides found!");
      } // If slides not added by template


      if (this.scope.items.length === 0) {
        this.addItemsByChilds();
      }
    }
  }, {
    key: "transformTemplateAttributes",
    value: function transformTemplateAttributes(attributes, index) {
      attributes = get_default()(getPrototypeOf_default()(Bs4SlideshowComponent.prototype), "transformTemplateAttributes", this).call(this, attributes, index);
      attributes.handle = attributes.handle || index.toString();
      attributes.index = index;
      attributes["class"] = attributes["class"] || "";
      attributes["class"] += " slide";
      return attributes;
    }
    /**
     * Add slide by template element
     * @param tpl template element
     */

  }, {
    key: "addItemByTemplate",
    value: function addItemByTemplate(tpl, index) {
      var attributes = this.getTemplateAttributes(tpl, index);
      var content = tpl.innerHTML;

      if (attributes.type) {
        if (attributes.type === "slide") {
          this.scope.items.push(bs4_slideshow_component_objectSpread(bs4_slideshow_component_objectSpread({}, attributes), {}, {
            content: content
          }));
        }

        if (attributes.type === "controls") {
          this.templateControls = content;
        }

        if (attributes.type === "indicators") {
          this.templateIndicators = content;
        }
      }
    }
    /**
     * Add slides by child elements (not as template elements)
     * @param tpl template element
     */

  }, {
    key: "addItemsByChilds",
    value: function addItemsByChilds() {
      var _this7 = this;

      if (!this.slideElements) {
        return;
      }

      this.slideElements.forEach(function (slideElement, index) {
        var handle = slideElement.getAttribute("handle") || slideElement.getAttribute("id") || index.toString();
        slideElement.setAttribute("index", index.toString());
        var attributes = {
          handle: handle,
          active: false,
          content: slideElement.innerHTML,
          index: index,
          position: bs4_slideshow_component_objectSpread(bs4_slideshow_component_objectSpread({}, slideElement.getBoundingClientRect()), {}, {
            centerY: 0,
            centerX: 0
          })
        };

        _this7.scope.items.push(attributes);
      });
    }
  }, {
    key: "getScrollPosition",
    value: function getScrollPosition() {
      var scrollPosition = utils_service_Utils.getScrollPosition(this.slideshowInner);
      return scrollPosition;
    }
    /**
     * get closest number
     * @see https://stackoverflow.com/a/35000557
     * @param goal the number which this number should be closest to
     * @param curr current number in loop
     * @param prev previous number or closest value found so far
     */

  }, {
    key: "getCurrentClosestNumber",
    value: function getCurrentClosestNumber(goal, curr, prev) {
      return Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev;
    }
  }, {
    key: "getMostCenteredSlideIndex",
    value: function getMostCenteredSlideIndex() {
      if (this.scope.items.length <= 0) {
        return -1;
      }

      var nearZero = Math.abs(this.scope.angle === "vertical" ? this.scope.items[0].position.centerY : this.scope.items[0].position.centerX);
      var minIndex = 0;

      for (var i = 1; i < this.scope.items.length; i++) {
        var position = Math.abs(this.scope.angle === "vertical" ? this.scope.items[i].position.centerY : this.scope.items[i].position.centerX);
        nearZero = this.getCurrentClosestNumber(0, position, nearZero);

        if (nearZero === position) {
          minIndex = i;
        }
      }

      return minIndex;
    }
  }, {
    key: "setAllSlidesUnactive",
    value: function setAllSlidesUnactive() {
      var excludeIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;

      if (!this.slideElements) {
        return;
      }

      for (var index = 0; index < this.scope.items.length; index++) {
        if (index !== excludeIndex) {
          if (this.scope.items[index]) {
            this.scope.items[index].active = false;
          }

          if (this.slideElements[index] && this.slideElements[index].classList.remove) {
            this.slideElements[index].classList.remove("active");
          }
        }
      }
    }
  }, {
    key: "setCenteredSlideActive",
    value: function setCenteredSlideActive() {
      var index = this.getMostCenteredSlideIndex();
      this.setAllSlidesUnactive(index);

      if (!this.scope.items[index]) {
        return -1;
      }

      this.scope.items[index].active = true;

      if (this.slideElements && this.slideElements[index].classList.add) {
        this.slideElements[index].classList.add("active");
      }

      return index;
    }
  }, {
    key: "isScrollableToIndex",
    value: function isScrollableToIndex(index) {
      if (!this.scope.items[index]) {
        return false;
      }

      var maxScrollTo = this.scope.angle === "vertical" ? this.getScrollPosition().maxY : this.getScrollPosition().maxX;
      var scrollTo = this.scope.angle === "vertical" ? this.slideshowInner.scrollTop + this.scope.items[index].position.centerY : this.slideshowInner.scrollLeft + this.scope.items[index].position.centerX;
      return scrollTo <= maxScrollTo && scrollTo >= 0;
    }
  }, {
    key: "scrollToNextSlide",
    value: function scrollToNextSlide() {
      this.setSlidePositions();
      var currentIndex = this.getMostCenteredSlideIndex();
      var nextIndex = currentIndex + this.scope.slidesToScroll;

      if (nextIndex >= this.slideElements.length) {
        nextIndex = nextIndex - this.slideElements.length;
      } // if (!this.isScrollableToIndex(nextIndex)) {
      //   nextIndex++;
      // }
      // if (nextIndex >= this.slideElements.length) {
      //   nextIndex = nextIndex - this.slideElements.length;
      // }


      return this.goTo(nextIndex);
    }
  }, {
    key: "scrollToPrevSlide",
    value: function scrollToPrevSlide() {
      this.setSlidePositions();
      var currentIndex = this.getMostCenteredSlideIndex();
      var prevIndex = currentIndex - this.scope.slidesToScroll;

      if (prevIndex < 0) {
        prevIndex = this.slideElements.length - 1 + (prevIndex + 1);
      }

      return this.goTo(prevIndex);
    }
  }, {
    key: "scrollToNearestSlide",
    value: function scrollToNearestSlide() {
      this.setSlidePositions();
      var nearestIndex = this.getMostCenteredSlideIndex();
      return this.goTo(nearestIndex);
    }
  }, {
    key: "setSlidePositions",
    value: function setSlidePositions() {
      var _this$slideElements;

      if (this.scope.items.length !== ((_this$slideElements = this.slideElements) === null || _this$slideElements === void 0 ? void 0 : _this$slideElements.length)) {
        var _this$slideElements2;

        console.warn("The slide objects must be the same size as the slide elements! ".concat(this.scope.items.length, " !== ").concat((_this$slideElements2 = this.slideElements) === null || _this$slideElements2 === void 0 ? void 0 : _this$slideElements2.length));
        return;
      }

      var mainBoundingClient = this.slideshowInner.getBoundingClientRect();

      for (var i = 0; i < this.scope.items.length; i++) {
        var slideElement = this.slideElements[i];
        var slideObject = this.scope.items[i];
        var rect = slideElement.getBoundingClientRect();
        rect.x -= mainBoundingClient.x;
        rect.y -= mainBoundingClient.y;
        slideObject.position = {
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height,
          bottom: rect.bottom,
          left: rect.left,
          right: rect.right,
          top: rect.top,
          toJSON: rect.toJSON,
          // 0 if element is in the middle / center
          centerY: rect.y + rect.height / 2 - mainBoundingClient.height / 2,
          // 0 if element is in the middle / center
          centerX: rect.x + rect.width / 2 - mainBoundingClient.width / 2
        };
      }
    }
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return [];
    }
    /**
     * Default custom Element method
     * Invoked when an attribute on the custom element changes.
     * @param attributeName
     * @param oldValue
     * @param newValue
     * @param namespace
     */

  }, {
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      var optionForSize = "xs";
      var responsiveScope = this.scope;

      if (this.observedAttributesToCheck && this.observedAttributesToCheck[attributeName]) {
        this.observedAttributesToCheck[attributeName].initialized = true;
      }

      newValue = this.parseAttribute(newValue);

      if (attributeName.startsWith("sm-")) {
        optionForSize = "sm";
        responsiveScope = this.scope.sm;
        attributeName = attributeName.slice(3);
      } else if (attributeName.startsWith("md-")) {
        optionForSize = "md";
        responsiveScope = this.scope.md;
        attributeName = attributeName.slice(3);
      } else if (attributeName.startsWith("lg-")) {
        optionForSize = "lg";
        responsiveScope = this.scope.lg;
        attributeName = attributeName.slice(3);
      } else if (attributeName.startsWith("xl-")) {
        optionForSize = "xl";
        responsiveScope = this.scope.xl;
        attributeName = attributeName.slice(3);
      }

      var parsedAttributeName = (0,type/* camelCase */.eV)(attributeName);

      if (responsiveScope && responsiveScope[parsedAttributeName]) {
        oldValue = responsiveScope[parsedAttributeName];
      } // automatically inject observed attributes to view responsiveScope


      responsiveScope[parsedAttributeName] = newValue; // call custom attribute changed callback with parsed values

      this.parsedAttributeChangedCallback(optionForSize + parsedAttributeName, oldValue, newValue, namespace);
      this.bindIfReady();
    }
    /**
     * Similar to attributeChangedCallback but attribute arguments are already parsed as they are stored in the scope
     * @param attributeName
     * @param oldValue
     * @param newValue
     * @param namespace
     */

  }, {
    key: "parsedAttributeChangedCallback",
    value: function parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      return get_default()(getPrototypeOf_default()(Bs4SlideshowComponent.prototype), "parsedAttributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);
    } // deconstructor

  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      var _this$scrollEventsSer;

      this.removeEventListeners();
      (_this$scrollEventsSer = this.scrollEventsService) === null || _this$scrollEventsSer === void 0 ? void 0 : _this$scrollEventsSer.destroy();
      this.disableAutoplay();
      this.disableDesktopDragscroll();
      return get_default()(getPrototypeOf_default()(Bs4SlideshowComponent.prototype), "disconnectedCallback", this).call(this);
    }
  }, {
    key: "template",
    value: function template() {
      // Only set the component template if there no childs or the childs are templates
      if (!(0,dom/* hasChildNodesTrim */.Np)(this.el) || this.hasOnlyTemplateChilds()) {
        // ('Full template!', this.templateIndicators);
        return (bs4_slideshow_slides_component_default()) + this.templateControls + this.templateIndicators;
      } else {
        // this.debug('Append to template!');
        // Prepend control elements if no custom control elements in template are found
        if (this.controlsElements.length <= 0) {
          this.el.innerHTML += this.templateControls;
        }

        if (!this.indicatorsElement) {
          this.el.innerHTML += this.templateIndicators;
        }

        return null;
      }
    }
  }]);

  return Bs4SlideshowComponent;
}(TemplatesComponent);

defineProperty_default()(Bs4SlideshowComponent, "tagName", "bs4-slideshow");
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-toggle-button/bs4-toggle-button.component.ts











function bs4_toggle_button_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_toggle_button_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_toggle_button_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * This components is used to trigger a toggle event used in other components or parts of your project. This site itself uses the bs4-toggle-button to open or close the sidebar.
 * @attribute "target-id" (Required) The id with which the toggle event is triggered
 * @method toggle	 Triggeres the toggle event
 * @property state Can be 'hidden' or something else
 * @property isClosed Is true if the state is 'hidden'
 * @property targetId Passed attribute value, see `target-id` attribute
 */



// TODO extend from Bs4ButtonComponent
var Bs4ToggleButtonComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4ToggleButtonComponent, _Component);

  var _super = bs4_toggle_button_component_createSuper(Bs4ToggleButtonComponent);

  createClass_default()(Bs4ToggleButtonComponent, [{
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return ["targetId"];
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ["target-id"];
    }
  }]);

  function Bs4ToggleButtonComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4ToggleButtonComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "eventDispatcher", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      targetId: undefined,
      toggle: _this.toggle,
      state: "undefined",
      isActive: true,
      isClosed: false
    });

    return _this;
  }

  createClass_default()(Bs4ToggleButtonComponent, [{
    key: "toggle",
    value: function toggle() {
      // console.debug('toggle', this.eventDispatcher);
      if (this.eventDispatcher) {
        this.eventDispatcher.trigger(TOGGLE_BUTTON.eventNames.toggle, this.scope.targetId);
      }
    }
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var _this$eventDispatcher;

        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4ToggleButtonComponent.prototype), "afterBind", this).call(this);

              case 2:
                return _context.abrupt("return", (_this$eventDispatcher = this.eventDispatcher) === null || _this$eventDispatcher === void 0 ? void 0 : _this$eventDispatcher.trigger(TOGGLE_BUTTON.eventNames.init, this.scope.targetId));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4ToggleButtonComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4ToggleButtonComponent.observedAttributes);
    }
  }, {
    key: "onToggledEvent",
    value: function onToggledEvent(state) {
      this.scope.state = state;
      this.scope.isActive = state !== "hidden" && state !== "removed";
      this.scope.isClosed = !this.scope.isActive;
    }
  }, {
    key: "initEventDispatcher",
    value: function initEventDispatcher(id) {
      if (this.eventDispatcher) {
        this.eventDispatcher.off(TOGGLE_BUTTON.eventNames.toggled, this.onToggledEvent);
      }

      this.eventDispatcher = new src.EventDispatcher(TOGGLE_BUTTON.nsPrefix + id);
      this.eventDispatcher.on(TOGGLE_BUTTON.eventNames.toggled, this.onToggledEvent.bind(this)); // Triggered state triggered by `..trigger('init', ...`

      this.eventDispatcher.on(TOGGLE_BUTTON.eventNames.state, this.onToggledEvent.bind(this));
    }
  }, {
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      get_default()(getPrototypeOf_default()(Bs4ToggleButtonComponent.prototype), "attributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);
    }
  }, {
    key: "parsedAttributeChangedCallback",
    value: function parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      get_default()(getPrototypeOf_default()(Bs4ToggleButtonComponent.prototype), "parsedAttributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);

      if (attributeName === "targetId" && newValue) {
        this.initEventDispatcher(newValue);
      }
    } // deconstructor

  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4ToggleButtonComponent.prototype), "disconnectedCallback", this).call(this);

      if (this.eventDispatcher) {
        this.eventDispatcher.off(TOGGLE_BUTTON.eventNames.toggled, this.onToggledEvent);
      }
    }
  }, {
    key: "template",
    value: function template() {
      if (!(0,dom/* hasChildNodesTrim */.Np)(this.el)) {
        console.warn("No child elements found, this component as no template so you need to define your own as child of this component.");
      }

      return null;
    }
  }]);

  return Bs4ToggleButtonComponent;
}(src.Component);

defineProperty_default()(Bs4ToggleButtonComponent, "tagName", "bs4-toggle-button");
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-navbar/bs4-navbar.component.ts











function bs4_navbar_component_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = bs4_navbar_component_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function bs4_navbar_component_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return bs4_navbar_component_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return bs4_navbar_component_arrayLikeToArray(o, minLen); }

function bs4_navbar_component_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function bs4_navbar_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_navbar_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_navbar_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }



var Bs4NavbarComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4NavbarComponent, _Component);

  var _super = bs4_navbar_component_createSuper(Bs4NavbarComponent);

  createClass_default()(Bs4NavbarComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["collapse-selector"];
    }
  }]);

  function Bs4NavbarComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4NavbarComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      toggle: _this.toggle,
      show: _this.show,
      hide: _this.hide,
      isCollapsed: true,
      collapseSelector: ".navbar-collapse"
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "collapseElements", []);

    defineProperty_default()(assertThisInitialized_default()(_this), "collapseServices", []);

    defineProperty_default()(assertThisInitialized_default()(_this), "routerEvents", void 0);

    return _this;
  }

  createClass_default()(Bs4NavbarComponent, [{
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return get_default()(getPrototypeOf_default()(Bs4NavbarComponent.prototype), "afterBind", this).call(this);

              case 2:
                this.hide();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "toggle",
    value: function toggle(event) {
      var _iterator = bs4_navbar_component_createForOfIteratorHelper(this.collapseServices),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var collapseService = _step.value;
          collapseService.toggle();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
    }
  }, {
    key: "show",
    value: function show(event) {
      var _iterator2 = bs4_navbar_component_createForOfIteratorHelper(this.collapseServices),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var collapseService = _step2.value;
          collapseService.show();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
    }
  }, {
    key: "hide",
    value: function hide(event) {
      var _iterator3 = bs4_navbar_component_createForOfIteratorHelper(this.collapseServices),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var collapseService = _step3.value;
          collapseService.hide();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4NavbarComponent.prototype), "connectedCallback", this).call(this);

      this.routerEvents = new src.EventDispatcher("main");
      this.routerEvents.on("newPageReady", this.onNewPageReady.bind(this));
      this.setCollapseElement();
      this.onStateChange();
      this.init(Bs4NavbarComponent.observedAttributes);
    }
  }, {
    key: "setCollapseElement",
    value: function setCollapseElement() {
      // Remove old event listeners
      this.removeCollapseEventListeners();
      this.collapseElements = this.el.querySelectorAll(this.scope.collapseSelector) || []; // Add new event listeners

      this.addCollapseEventListeners();

      if (this.collapseElements) {
        for (var _i = 0, _Array$from = Array.from(this.collapseElements); _i < _Array$from.length; _i++) {
          var collapseElement = _Array$from[_i];
          this.collapseServices.push(new CollapseService(collapseElement, [this.el], {
            toggle: false
          }));
        }
      }

      this.hide();
    }
  }, {
    key: "addCollapseEventListeners",
    value: function addCollapseEventListeners() {
      var _this2 = this;

      if (this.collapseElements) {
        this.collapseElements.forEach(function (collapseElement) {
          collapseElement.addEventListener(EVENT_SHOWN, _this2.onStateChange.bind(_this2));
          collapseElement.addEventListener(EVENT_HIDDEN, _this2.onStateChange.bind(_this2));
        });
      }
    }
  }, {
    key: "removeCollapseEventListeners",
    value: function removeCollapseEventListeners() {
      var _this3 = this;

      if (this.collapseElements) {
        this.collapseElements.forEach(function (collapseElement) {
          collapseElement.removeEventListener(EVENT_SHOWN, _this3.onStateChange.bind(_this3));
          collapseElement.removeEventListener(EVENT_HIDDEN, _this3.onStateChange.bind(_this3));
        });
      }
    }
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4NavbarComponent.prototype), "disconnectedCallback", this).call(this);

      this.removeCollapseEventListeners();

      if (this.routerEvents) {
        this.routerEvents.off("newPageReady", this.onNewPageReady);
      }
    }
  }, {
    key: "onStateChange",
    value: function onStateChange() {
      var _this$collapseService;

      this.scope.isCollapsed = !!((_this$collapseService = this.collapseServices[0]) === null || _this$collapseService === void 0 ? void 0 : _this$collapseService.isCollapsed());

      if (this.scope.isCollapsed) {
        this.el.classList.add(CLASS_NAME_COLLAPSED);
        this.el.setAttribute("aria-expanded", "false");
      } else {
        this.el.classList.remove(CLASS_NAME_COLLAPSED);
        this.el.setAttribute("aria-expanded", "true");
      }
    }
  }, {
    key: "onNewPageReady",
    value: function onNewPageReady() {
      this.hide();
    }
  }, {
    key: "parsedAttributeChangedCallback",
    value: function parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      get_default()(getPrototypeOf_default()(Bs4NavbarComponent.prototype), "parsedAttributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);

      if (attributeName === "collapseSelector") {
        this.setCollapseElement();
      }
    }
  }, {
    key: "template",
    value: function template() {
      return null;
    }
  }]);

  return Bs4NavbarComponent;
}(src.Component);

defineProperty_default()(Bs4NavbarComponent, "tagName", "bs4-navbar");
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-tabs/bs4-tabs-horizontal.component.html
var bs4_tabs_horizontal_component = __webpack_require__(4922);
var bs4_tabs_horizontal_component_default = /*#__PURE__*/__webpack_require__.n(bs4_tabs_horizontal_component);

// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-tabs/bs4-tabs-vertical.component.html
var bs4_tabs_vertical_component = __webpack_require__(9640);
var bs4_tabs_vertical_component_default = /*#__PURE__*/__webpack_require__.n(bs4_tabs_vertical_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-tabs/bs4-tabs.component.ts











function bs4_tabs_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_tabs_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_tabs_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }







var bs4_tabs_component_handleize = src.handleizeFormatter.read;
var Bs4TabsComponent = /*#__PURE__*/function (_TemplatesComponent) {
  inherits_default()(Bs4TabsComponent, _TemplatesComponent);

  var _super = bs4_tabs_component_createSuper(Bs4TabsComponent);

  createClass_default()(Bs4TabsComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["option-tabs-auto-height", "option-tabs-angle", "tab-0-title", "tab-0-content", "tab-0-handle", "tab-1-title", "tab-1-content", "tab-1-handle", "tab-2-title", "tab-2-content", "tab-2-handle", "tab-3-title", "tab-3-content", "tab-3-handle", "tab-4-title", "tab-4-content", "tab-4-handle", "tab-5-title", "tab-5-content", "tab-5-handle", "tab-6-title", "tab-6-content", "tab-6-handle", "tab-7-title", "tab-7-content", "tab-7-handle", "tab-8-title", "tab-8-content", "tab-8-handle", "tab-9-title", "tab-9-content", "tab-9-handle", "tab-10-title", "tab-10-content", "tab-10-handle", "tab-11-title", "tab-11-content", "tab-11-handle", "tab-12-title", "tab-12-content", "tab-12-handle", "tab-13-title", "tab-13-content", "tab-13-handle", "tab-14-title", "tab-14-content", "tab-14-handle", "tab-15-title", "tab-15-content", "tab-15-handle", "tab-16-title", "tab-16-content", "tab-16-handle", "tab-17-title", "tab-17-content", "tab-17-handle", "tab-18-title", "tab-18-content", "tab-18-handle", "tab-19-title", "tab-19-content", "tab-19-handle"];
    }
  }]);

  function Bs4TabsComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4TabsComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "templateAttributes", [{
      name: "title",
      required: true
    }, {
      name: "handle",
      required: false
    }, {
      name: "type",
      required: false
    }, {
      name: "active",
      required: false
    }, {
      name: "index",
      required: false
    }]);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      items: new Array(),
      activate: _this.activate,
      deactivate: _this.deactivate,
      deactivateAll: _this.deactivateAll,
      optionTabsAutoHeight: false,
      optionTabsAngle: "horizontal"
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "tabs", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "tabPanes", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scrollable", void 0);

    return _this;
  }
  /**
   * Make all tabs panes as height as the heighest tab pane
   */


  createClass_default()(Bs4TabsComponent, [{
    key: "setHeight",
    value: function setHeight() {
      if (this.scope.optionTabsAutoHeight) {
        return;
      } // Bind static template


      this.setElements();
      var heigest = 0;

      if (!this.tabPanes) {
        return;
      }

      this.tabPanes.forEach(function (tabPane) {
        if (!tabPane.style) {
          return;
        }

        tabPane.style.height = "auto";
        tabPane.style.display = "block";
        var height = tabPane.offsetHeight || 0;

        if (height > heigest) {
          heigest = height;
        }
      });
      this.tabPanes.forEach(function (tabPane) {
        if (!tabPane.style) {
          return;
        } // Reset display style property


        tabPane.style.display = "";

        if (heigest > 0) {
          tabPane.style.height = heigest + "px";
        }
      });
    }
  }, {
    key: "deactivateAll",
    value: function deactivateAll() {
      for (var index = 0; index < this.scope.items.length; index++) {
        var tab = this.scope.items[index];
        this.deactivate(tab);
      }
    }
  }, {
    key: "deactivate",
    value: function deactivate(tab) {
      tab.active = false;
      var firstTabContentChild = this.getTabContentChildByIndex(tab.index);

      if (firstTabContentChild) {
        this.triggerVisibilityChangedForElement(firstTabContentChild, tab.active);
      }
    }
  }, {
    key: "activate",
    value: function activate(tab) {
      this.deactivateAll();
      tab.active = true;
      var firstTabContentChild = this.getTabContentChildByIndex(tab.index);

      if (firstTabContentChild) {
        this.triggerVisibilityChangedForElement(firstTabContentChild, tab.active);
      }

      if (event) {
        event.preventDefault();
      }
    }
  }, {
    key: "activateFirstTab",
    value: function activateFirstTab() {
      if (this.scope.items.length > 0) {
        this.activate(this.scope.items[0]);
      }
    }
  }, {
    key: "getTabContentChildByIndex",
    value: function getTabContentChildByIndex(index) {
      return this.el.querySelector(".tab-content .tab-pane:nth-child(".concat(index + 1, ") > *")) || undefined;
    }
    /**
     * Trigger `visibility-changed` for components that need to update if visibility changes.
     * E.g. this event is used the bs4-slideshow component
     * @param element
     * @param visibile
     */

  }, {
    key: "triggerVisibilityChangedForElement",
    value: function triggerVisibilityChangedForElement(element, visibile) {
      setTimeout(function () {
        // Use this event to update any custom element when it becomes visibile
        element.dispatchEvent(new CustomEvent("visibility-changed", {
          detail: {
            visibile: visibile
          }
        }));
      }, 200);
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4TabsComponent.prototype), "connectedCallback", this).call(this);

      this.initTabs();
      this.activateFirstTab();
      this.init(Bs4TabsComponent.observedAttributes);
    }
  }, {
    key: "setElements",
    value: function setElements() {
      this.tabs = this.el.querySelectorAll('[role="tab"]');
      this.tabPanes = this.el.querySelectorAll('[role="tabpanel"]');
      this.scrollable = this.el.querySelector("[scrollable]");
    }
  }, {
    key: "resizeTabsArray",
    value: function resizeTabsArray(newSize) {
      while (newSize > this.scope.items.length) {
        this.scope.items.push({
          handle: "",
          title: "",
          content: "",
          active: false,
          index: this.scope.items.length - 1
        });
      }
    }
  }, {
    key: "onTabShownEventHandler",
    value: function onTabShownEventHandler(event) {
      var curTab = event.target || event.srcElement;

      if (!curTab) {
        return;
      }

      if (this.scrollable) {
        var tabScrollPosition = curTab.getBoundingClientRect();
        var scrollLeftTo = this.scrollable.scrollLeft || 0 + tabScrollPosition.left; // TODO animate
        // this.scrollable.animate({ scrollLeft: scrollLeftTo}, 'slow');

        this.scrollable.scrollLeft = scrollLeftTo;
      }
    }
  }, {
    key: "onResizeEventHandler",
    value: function onResizeEventHandler() {
      this.setHeight();
    }
  }, {
    key: "initTabs",
    value: function initTabs() {
      var _this2 = this;

      // Bind static template
      this.setElements();

      if (this.tabs) {
        this.tabs.forEach(function (tab) {
          tab.removeEventListener("shown.bs.tab", _this2.onTabShownEventHandler);
          tab.addEventListener("shown.bs.tab", _this2.onTabShownEventHandler);
        });
      }

      var onResize = function onResize() {
        (0,control/* throttle */.P2)(_this2.onResizeEventHandler.bind(_this2))();
      };

      if (this.scope.optionTabsAutoHeight) {
        window.removeEventListener("resize", onResize);
        window.addEventListener("resize", onResize);
        this.onResizeEventHandler();
      }
    }
  }, {
    key: "addTabByAttribute",
    value: function addTabByAttribute(attributeName, newValue) {
      var index = Number(attributeName.replace(/[^0-9]/g, ""));

      if (index >= this.scope.items.length) {
        this.resizeTabsArray(index + 1);
      }

      this.scope.items[index].index = index;

      if (attributeName.endsWith("Content")) {
        this.scope.items[index].content = newValue;
      }

      if (attributeName.endsWith("Title")) {
        this.scope.items[index].title = newValue;
        this.scope.items[index].handle = this.scope.items[index].handle || bs4_tabs_component_handleize(this.scope.items[index].title);
      }

      if (attributeName.endsWith("Handle")) {
        this.scope.items[index].handle = newValue;
      } // if is first tab


      if (this.scope.items.length > 0 && this.scope.items[0] && this.scope.items[0].content.length > 0 && this.scope.items[0].title.length > 0 && this.scope.items[0].handle.length > 0) {
        this.activateFirstTab();
      }
    }
    /**
     * Extends TemplatesComponent.transformTemplateAttributes to set the handle by the title if no handle is set
     */

  }, {
    key: "transformTemplateAttributes",
    value: function transformTemplateAttributes(attributes, index) {
      attributes = get_default()(getPrototypeOf_default()(Bs4TabsComponent.prototype), "transformTemplateAttributes", this).call(this, attributes, index);

      if (!attributes.handle && attributes.title) {
        attributes.handle = bs4_tabs_component_handleize(attributes.title);
      }

      attributes.active = attributes.active || false;
      return attributes;
    }
  }, {
    key: "parsedAttributeChangedCallback",
    value: function parsedAttributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      get_default()(getPrototypeOf_default()(Bs4TabsComponent.prototype), "parsedAttributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);

      if (attributeName.startsWith("tab")) {
        this.addTabByAttribute(attributeName, newValue);
        this.initTabs();
      }
    }
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var _this3 = this;

        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Workaround
                setTimeout(function () {
                  if (_this3.scope.optionTabsAutoHeight) {
                    _this3.setHeight();
                  }
                }, 500);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "template",
    value: function template() {
      // Only set the component template if there no childs or the childs are templates
      if (!(0,dom/* hasChildNodesTrim */.Np)(this.el) || this.hasOnlyTemplateChilds()) {
        if (this.scope.optionTabsAngle === "horizontal") {
          return (bs4_tabs_horizontal_component_default());
        } else {
          return (bs4_tabs_vertical_component_default());
        }
      } else {
        return null;
      }
    }
  }]);

  return Bs4TabsComponent;
}(TemplatesComponent);

defineProperty_default()(Bs4TabsComponent, "tagName", "bs4-tabs");
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-form/bs4-form.component.html
var bs4_form_component = __webpack_require__(6939);
var bs4_form_component_default = /*#__PURE__*/__webpack_require__.n(bs4_form_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-form/bs4-form.component.ts











function bs4_form_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_form_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_form_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }





var Bs4FormComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4FormComponent, _Component);

  var _super = bs4_form_component_createSuper(Bs4FormComponent);

  createClass_default()(Bs4FormComponent, [{
    key: "getDefaultScope",
    value: function getDefaultScope() {
      var scope = {
        id: (0,dom/* getUID */.Kr)("form"),
        form: {
          fields: {},
          valid: false,
          error: undefined
        },
        disableSubmitUntilChange: false,
        submitDisabled: false,
        onSubmit: this.onSubmit,
        useAjax: true,
        ajaxRequestType: "form",
        autoSetFormData: true,
        stripHtml: true
      };
      return scope;
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ["id", "disable-submit-until-change", "use-ajax", "ajax-request-type", "auto-set-form-data", "strip-html"];
    }
  }]);

  function Bs4FormComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4FormComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "_debug", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "formEl", null);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", _this.getDefaultScope());

    return _this;
  }

  createClass_default()(Bs4FormComponent, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4FormComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4FormComponent.observedAttributes);
      this.addEventListeners();
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this2 = this;

      if (this.scope.disableSubmitUntilChange) {
        this.el.addEventListener("input", function () {
          _this2.scope.submitDisabled = false;
        });
      }
    }
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return [];
    }
  }, {
    key: "beforeBind",
    value: function () {
      var _beforeBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                get_default()(getPrototypeOf_default()(Bs4FormComponent.prototype), "beforeBind", this).call(this);

                this.el.id = this.scope.id;

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function beforeBind() {
        return _beforeBind.apply(this, arguments);
      }

      return beforeBind;
    }()
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                get_default()(getPrototypeOf_default()(Bs4FormComponent.prototype), "afterBind", this).call(this);

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "stripHtml",
    value: function stripHtml() {
      for (var key in this.scope.form.fields) {
        if (this.scope.form.fields[key] && typeof this.scope.form.fields[key] === "string") {
          this.scope.form.fields[key] = (0,type/* stripHtml */.Vt)(this.scope.form.fields[key]);
        }
      }
    }
  }, {
    key: "onSubmit",
    value: function onSubmit(event, el) {
      this.debug("onSubmit", event, el);

      if (!this.formEl) {
        console.warn("No form found");
        return false;
      }

      if (this.scope.autoSetFormData) {
        this.getFormValues();
      }

      if (this.scope.stripHtml) {
        this.stripHtml();
      }

      this.validate(this.formEl, this.scope.form);

      if (!this.scope.form.valid) {
        console.info("form not valid", this.scope); // stop native submit

        event.preventDefault();
        event.stopPropagation();
        return;
      }

      var submitSettings = this.getSubmitSettings(event);

      if ((submitSettings === null || submitSettings === void 0 ? void 0 : submitSettings.target) === "_blank") {
        return true;
      }

      if (this.scope.useAjax) {
        // stop native submit because we submit the data using javascript
        event.preventDefault();
        event.stopPropagation();
        this.ajaxSubmit(event, el);
      }
    }
    /**
     * TODO Not tested in the wild, may need to be adjusted. Also the error handling is untested
     */

  }, {
    key: "ajaxSubmit",
    value: function ajaxSubmit(event, el) {
      var _this3 = this;

      this.debug("onSubmit", event, el, this.scope);
      var submitSettings = this.getSubmitSettings(event);

      if (!submitSettings) {
        console.warn("Can't get submit settings");
        return;
      }

      if (this.scope.autoSetFormData) {
        this.getFormValues();
      } // This method is untested in the wild


      src.HttpService.fetch(submitSettings.action, submitSettings.method, this.scope.form.fields, submitSettings.type).then(function (res) {
        var message = res.body && res.body.message ? res.body.message : "";

        if (Number(res.status) >= 400) {
          // TODO generate message by status
          _this3.onErrorSubmit(res.status, message, res.body);
        }

        _this3.onSuccessSubmit(res.status, message, res.body);
      })["catch"](function (err) {
        console.error(err); //

        _this3.onErrorSubmit(err.status, err.body.message, err.body);
      });
    }
  }, {
    key: "getSubmitSettings",
    value: function getSubmitSettings(event) {
      var _originalEvent;

      if (!this.formEl) {
        console.warn("No form found");
        return null;
      }

      var action = this.formEl.action;
      var method = this.formEl.method;
      var target = this.formEl.method; // Overwrite action by formaction attribute: <button type="submit" formaction="/foobar">
      // TODO submitter from vanilla event
      // If this is a jquery event

      if (event === null || event === void 0 ? void 0 : (_originalEvent = event.originalEvent) === null || _originalEvent === void 0 ? void 0 : _originalEvent.submitter) {
        var _originalEvent2;

        var submitter = event === null || event === void 0 ? void 0 : (_originalEvent2 = event.originalEvent) === null || _originalEvent2 === void 0 ? void 0 : _originalEvent2.submitter;
        action = (submitter === null || submitter === void 0 ? void 0 : submitter.formAction) || action;
        method = (submitter === null || submitter === void 0 ? void 0 : submitter.formMethod) || method;
        target = (submitter === null || submitter === void 0 ? void 0 : submitter.formTarget) || target;
      }

      var settings = {
        action: action,
        method: method.toUpperCase(),
        target: target,
        type: this.scope.ajaxRequestType
      };
      return settings;
    }
  }, {
    key: "onErrorSubmit",
    value: function onErrorSubmit(status, message, response) {
      this.debug("onErrorSubmit");
      this.el.dispatchEvent(new CustomEvent("submit-error", {
        detail: {
          status: status,
          message: message,
          response: response
        }
      }));
    }
  }, {
    key: "onSuccessSubmit",
    value: function onSuccessSubmit(status, message, response) {
      this.debug("onSuccessSubmit");

      if (this.scope.disableSubmitUntilChange) {
        this.scope.submitDisabled = true;
      }

      this.el.dispatchEvent(new CustomEvent("submit-success", {
        detail: {
          status: status,
          message: message,
          response: response
        }
      }));
    }
  }, {
    key: "validate",
    value: function validate(form, validationScope) {
      validationScope.valid = form.checkValidity();
      validationScope.error = form.validationMessage; // only show validation if we want to give a hint to the user that something is wrong

      if (!validationScope.valid) {
        this.el.dispatchEvent(new CustomEvent("validation-error"));
        form.classList.add("was-validated");
      }
    }
  }, {
    key: "getFormValues",
    value: function getFormValues() {
      if (!this.formEl) {
        console.warn("No form found");
        return null;
      } // this.formEl.querySelectorAll("input").forEach((element) => {
      //   this.scope.form.fields[camelCase(element.name)] = getInputValue(element);
      // });


      this.scope.form.fields = new FormData(this.formEl);
      return this.scope.form.fields;
    }
  }, {
    key: "initForm",
    value: function initForm() {
      var formEl = this.el.querySelector("form");

      if (formEl && formEl.length > 0) {
        this.formEl = formEl;
        this.formEl.classList.add("needs-validation");
        this.formEl.setAttribute("novalidate", "");
      } else {
        console.warn("bs4 form without children found");
      }
    }
  }, {
    key: "template",
    value: function template() {
      if ((0,dom/* hasChildNodesTrim */.Np)(this.el)) {
        this.initForm();
        return null;
      } else {
        return (bs4_form_component_default());
      }
    }
  }]);

  return Bs4FormComponent;
}(src.Component);

defineProperty_default()(Bs4FormComponent, "tagName", "bs4-form");
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-notification-container/bs4-notification-container.component.html
var bs4_notification_container_component = __webpack_require__(3876);
var bs4_notification_container_component_default = /*#__PURE__*/__webpack_require__.n(bs4_notification_container_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-notification-container/bs4-notification-container.component.ts











function bs4_notification_container_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_notification_container_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_notification_container_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }




var Bs4NotificationContainerComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4NotificationContainerComponent, _Component);

  var _super = bs4_notification_container_component_createSuper(Bs4NotificationContainerComponent);

  createClass_default()(Bs4NotificationContainerComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["icon-url", "position-class", "channel-name"];
    }
  }]);

  function Bs4NotificationContainerComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4NotificationContainerComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "_debug", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "notificationDispatcher", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      notifications: [],
      positionClass: "absolute-bottom absolute-center",
      channelName: "toast",
      onItemHide: _this.onItemHide
    });

    return _this;
  }

  createClass_default()(Bs4NotificationContainerComponent, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4NotificationContainerComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4NotificationContainerComponent.observedAttributes);
    } // Called by child if notification item wants to be removed

  }, {
    key: "onItemHide",
    value: function onItemHide(event, el, index, notification) {
      if (index > -1) {
        this.notifications.splice(index, 1);
      } else {
        console.warn("Notification not found", notification);
      }
    }
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var _this2 = this;

        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                get_default()(getPrototypeOf_default()(Bs4NotificationContainerComponent.prototype), "afterBind", this).call(this); // Add event dispatcher to listen for toast notifications


                this.notificationDispatcher = new src.EventDispatcher(this.scope.channelName);
                this.notificationDispatcher.on("show-notification", function (notification) {
                  _this2.debug("Received notification container on " + _this2.scope.channelName, _this2.scope, notification);

                  _this2.scope.notifications.push(notification);
                });

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return [];
    }
  }, {
    key: "template",
    value: function template() {
      // Only set the component template if there no childs or the childs are templates
      if (!(0,dom/* hasChildNodesTrim */.Np)(this.el)) {
        return (bs4_notification_container_component_default());
      }

      return null;
    }
  }]);

  return Bs4NotificationContainerComponent;
}(src.Component);

defineProperty_default()(Bs4NotificationContainerComponent, "tagName", "bs4-notification-container");
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-toast-item/bs4-toast-item.component.html
var bs4_toast_item_component = __webpack_require__(2859);
var bs4_toast_item_component_default = /*#__PURE__*/__webpack_require__.n(bs4_toast_item_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-toast-item/bs4-toast-item.component.ts











function bs4_toast_item_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_toast_item_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_toast_item_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }





var Bs4ToastItemComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4ToastItemComponent, _Component);

  var _super = bs4_toast_item_component_createSuper(Bs4ToastItemComponent);

  createClass_default()(Bs4ToastItemComponent, [{
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return ["toast"];
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ["toast", "icon-url", "index"];
    }
  }]);

  function Bs4ToastItemComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4ToastItemComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "_debug", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "toastService", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      onHidden: _this.onHidden,
      index: -1,
      dismiss: _this.dismiss,
      toast: undefined
    });

    return _this;
  }

  createClass_default()(Bs4ToastItemComponent, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4ToastItemComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4ToastItemComponent.observedAttributes);
    }
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                get_default()(getPrototypeOf_default()(Bs4ToastItemComponent.prototype), "afterBind", this).call(this);

                this.initToastService();

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "initToastService",
    value: function initToastService() {
      var toast = this.scope.toast;
      var toastEl = this.el.firstElementChild;

      if (toast && toastEl) {
        this.toastService = new ToastService(toastEl, {
          delay: toast.delay !== undefined ? toast.delay : ToastService.Default.delay,
          autohide: toast.autoHide !== undefined ? toast.autoHide : ToastService.Default.autohide,
          animation: toast.animation !== undefined ? toast.animation : ToastService.Default.animation
        }); // Call onHidden on hidden event once

        toastEl.addEventListener(toast_service_EVENT_HIDDEN, this.onHidden.bind(this), {
          once: true
        }); // show toast using the toastservice

        this.toastService.show();
      }
    } // can be called if toast should be removed

  }, {
    key: "dismiss",
    value: function dismiss() {
      var _this$toastService;

      (_this$toastService = this.toastService) === null || _this$toastService === void 0 ? void 0 : _this$toastService.hide();
    } // remove toast from dom once shown

  }, {
    key: "onHidden",
    value: function onHidden(event, el) {
      var _this$scope$$parent;

      if (!el) {
        el = (0,dom/* getElementFromEvent */._f)(event);
      }

      var toastContainer = ((_this$scope$$parent = this.scope.$parent) === null || _this$scope$$parent === void 0 ? void 0 : _this$scope$$parent.$parent) || null;

      if (typeof (toastContainer === null || toastContainer === void 0 ? void 0 : toastContainer.onItemHide) === "function" && this.scope.toast) {
        toastContainer.onItemHide(event, el, this.scope.index, this.scope.toast);
      }
    }
  }, {
    key: "template",
    value: function template() {
      return (bs4_toast_item_component_default());
    }
  }]);

  return Bs4ToastItemComponent;
}(src.Component);

defineProperty_default()(Bs4ToastItemComponent, "tagName", "bs4-toast-item");
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-modal-item/bs4-modal-item.component.html
var bs4_modal_item_component = __webpack_require__(3627);
var bs4_modal_item_component_default = /*#__PURE__*/__webpack_require__.n(bs4_modal_item_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-modal-item/bs4-modal-item.component.ts











function bs4_modal_item_component_createSuper(Derived) { var hasNativeReflectConstruct = bs4_modal_item_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function bs4_modal_item_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }





var Bs4ModalItemComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(Bs4ModalItemComponent, _Component);

  var _super = bs4_modal_item_component_createSuper(Bs4ModalItemComponent);

  createClass_default()(Bs4ModalItemComponent, [{
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return ["modal"];
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ["modal", "index"];
    }
  }]);

  function Bs4ModalItemComponent(element) {
    var _this;

    classCallCheck_default()(this, Bs4ModalItemComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "_debug", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "modalService", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      onHidden: _this.onHidden,
      index: -1,
      dismiss: _this.dismiss
    });

    return _this;
  }

  createClass_default()(Bs4ModalItemComponent, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(Bs4ModalItemComponent.prototype), "connectedCallback", this).call(this);

      this.init(Bs4ModalItemComponent.observedAttributes);
    }
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                get_default()(getPrototypeOf_default()(Bs4ModalItemComponent.prototype), "afterBind", this).call(this);

                this.initModalService();

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "initModalService",
    value: function initModalService() {
      var modal = this.scope.modal;
      var modalEl = this.el.firstElementChild;

      if (modal && modalEl) {
        this.modalService = new ModalService(modalEl, {
          focus: modal.focus !== undefined ? modal.focus : ModalService.Default.focus,
          keyboard: modal.keyboard !== undefined ? modal.keyboard : ModalService.Default.keyboard,
          backdrop: modal.backdrop !== undefined ? modal.backdrop : ModalService.Default.backdrop,
          show: modal.show !== undefined ? modal.show : ModalService.Default.show
        }); // Call onHidden on hidden event once

        modalEl.addEventListener(modal_service_EVENT_HIDDEN, this.onHidden.bind(this), {
          once: true
        }); // show modal using the modalservice

        this.modalService.show(this.el);
      }
    } // Can be called if modal should be removed

  }, {
    key: "dismiss",
    value: function dismiss(event) {
      var _this$modalService;

      (_this$modalService = this.modalService) === null || _this$modalService === void 0 ? void 0 : _this$modalService.hide(event);
    } // Remove modal from dom once shown

  }, {
    key: "onHidden",
    value: function onHidden(event, el) {
      var _this$scope$$parent;

      if (!el) {
        el = (0,dom/* getElementFromEvent */._f)(event);
      }

      var notificationContainer = ((_this$scope$$parent = this.scope.$parent) === null || _this$scope$$parent === void 0 ? void 0 : _this$scope$$parent.$parent) || null;

      if (typeof (notificationContainer === null || notificationContainer === void 0 ? void 0 : notificationContainer.onItemHide) === "function" && this.scope.modal) {
        notificationContainer.onItemHide(event, el, this.scope.index, this.scope.modal);
      }
    }
  }, {
    key: "template",
    value: function template() {
      return (bs4_modal_item_component_default());
    }
  }]);

  return Bs4ModalItemComponent;
}(src.Component);

defineProperty_default()(Bs4ModalItemComponent, "tagName", "bs4-modal-item");
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/components/index.ts

















// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/bs4.module.ts

 // import * as formatters from './formatters/bs4.formatters';


var bs4Module = {
  binders: binders_namespaceObject,
  services: services_namespaceObject,
  formatters: {},
  components: components_namespaceObject
};
// CONCATENATED MODULE: ./node_modules/@ribajs/bs4/src/index.ts


 // export * as formatters from './formatters/bs4.formatters';

 // export * from './interfaces/interfaces';




/***/ }),

/***/ 3191:
/***/ (() => {



/***/ }),

/***/ 9346:
/***/ (() => {



/***/ }),

/***/ 1016:
/***/ (() => {



/***/ }),

/***/ 9888:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Toast": () => /* reexport safe */ _toast__WEBPACK_IMPORTED_MODULE_8__.F
/* harmony export */ });
/* harmony import */ var _carousel_class_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3191);
/* harmony import */ var _carousel_class_name__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_carousel_class_name__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_carousel_class_name__WEBPACK_IMPORTED_MODULE_0__, "Toast")) __webpack_require__.d(__webpack_exports__, { "Toast": function() { return _carousel_class_name__WEBPACK_IMPORTED_MODULE_0__.Toast; } });
/* harmony import */ var _carousel_direction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9346);
/* harmony import */ var _carousel_direction__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_carousel_direction__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_carousel_direction__WEBPACK_IMPORTED_MODULE_1__, "Toast")) __webpack_require__.d(__webpack_exports__, { "Toast": function() { return _carousel_direction__WEBPACK_IMPORTED_MODULE_1__.Toast; } });
/* harmony import */ var _carousel_option__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1016);
/* harmony import */ var _carousel_option__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_carousel_option__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_carousel_option__WEBPACK_IMPORTED_MODULE_2__, "Toast")) __webpack_require__.d(__webpack_exports__, { "Toast": function() { return _carousel_option__WEBPACK_IMPORTED_MODULE_2__.Toast; } });
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6329);
/* harmony import */ var _notification__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4383);
/* harmony import */ var _placement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8084);
/* harmony import */ var _placement__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_placement__WEBPACK_IMPORTED_MODULE_5__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_placement__WEBPACK_IMPORTED_MODULE_5__, "Toast")) __webpack_require__.d(__webpack_exports__, { "Toast": function() { return _placement__WEBPACK_IMPORTED_MODULE_5__.Toast; } });
/* harmony import */ var _popover_options__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1774);
/* harmony import */ var _popover_options__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_popover_options__WEBPACK_IMPORTED_MODULE_6__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_popover_options__WEBPACK_IMPORTED_MODULE_6__, "Toast")) __webpack_require__.d(__webpack_exports__, { "Toast": function() { return _popover_options__WEBPACK_IMPORTED_MODULE_6__.Toast; } });
/* harmony import */ var _share_item__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(663);
/* harmony import */ var _share_item__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_share_item__WEBPACK_IMPORTED_MODULE_7__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_share_item__WEBPACK_IMPORTED_MODULE_7__, "Toast")) __webpack_require__.d(__webpack_exports__, { "Toast": function() { return _share_item__WEBPACK_IMPORTED_MODULE_7__.Toast; } });
/* harmony import */ var _toast__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(7115);











/***/ }),

/***/ 6329:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* unused harmony export Modal */
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2205);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8585);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9754);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _notification__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4383);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var Modal = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Notification) {
  _inherits(Modal, _Notification);

  var _super = _createSuper(Modal);

  function Modal(_ref) {
    var _this;

    var title = _ref.title,
        message = _ref.message,
        iconUrl = _ref.iconUrl,
        focus = _ref.focus,
        keyboard = _ref.keyboard,
        backdrop = _ref.backdrop,
        show = _ref.show,
        buttons = _ref.buttons,
        modalService = _ref.modalService,
        contextualClass = _ref.contextualClass,
        channel = _ref.channel,
        $event = _ref.$event,
        $context = _ref.$context;

    _classCallCheck(this, Modal);

    _this = _super.call(this, "modal", title);

    _defineProperty(_assertThisInitialized(_this), "message", void 0);

    _defineProperty(_assertThisInitialized(_this), "iconUrl", void 0);

    _defineProperty(_assertThisInitialized(_this), "focus", void 0);

    _defineProperty(_assertThisInitialized(_this), "keyboard", void 0);

    _defineProperty(_assertThisInitialized(_this), "backdrop", void 0);

    _defineProperty(_assertThisInitialized(_this), "show", void 0);

    _defineProperty(_assertThisInitialized(_this), "buttons", []);

    _defineProperty(_assertThisInitialized(_this), "modalService", void 0);

    _defineProperty(_assertThisInitialized(_this), "contextualClass", void 0);

    _this.message = message;
    _this.iconUrl = iconUrl;
    _this.focus = focus;
    _this.keyboard = keyboard;
    _this.backdrop = backdrop;
    _this.show = show;
    _this.buttons = buttons || [];
    _this.modalService = modalService;
    _this.contextualClass = contextualClass;
    _this.channel = channel;
    _this.$event = $event;
    _this.$context = $context;
    return _this;
  }

  return Modal;
}(Notification)));

/***/ }),

/***/ 4383:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": () => /* binding */ Notification
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);


var Notification = function Notification(type, title) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Notification);

  _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, "type", void 0);

  _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, "title", void 0);

  _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, "channel", void 0);

  _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, "$event", void 0);

  _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, "$context", void 0);

  this.type = type;
  this.title = title;
};

/***/ }),

/***/ 8084:
/***/ (() => {



/***/ }),

/***/ 1774:
/***/ (() => {



/***/ }),

/***/ 663:
/***/ (() => {



/***/ }),

/***/ 7115:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "F": () => /* binding */ Toast
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2205);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8585);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9754);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _notification__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4383);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var Toast = /*#__PURE__*/function (_Notification) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(Toast, _Notification);

  var _super = _createSuper(Toast);

  function Toast(_ref) {
    var _this;

    var title = _ref.title,
        message = _ref.message,
        iconUrl = _ref.iconUrl,
        delay = _ref.delay,
        autoHide = _ref.autoHide,
        animation = _ref.animation,
        toastService = _ref.toastService,
        contextualClass = _ref.contextualClass,
        channel = _ref.channel,
        $event = _ref.$event,
        $context = _ref.$context;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Toast);

    _this = _super.call(this, "toast", title);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default()(_this), "message", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default()(_this), "iconUrl", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default()(_this), "delay", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default()(_this), "autoHide", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default()(_this), "animation", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default()(_this), "toastService", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default()(_this), "contextualClass", void 0);

    _this.message = message;
    _this.iconUrl = iconUrl;
    _this.delay = delay;
    _this.autoHide = autoHide;
    _this.animation = animation;
    _this.toastService = toastService;
    _this.contextualClass = contextualClass;
    _this.channel = channel;
    _this.$event = $event;
    _this.$context = $context;
    return _this;
  }

  return Toast;
}(_notification__WEBPACK_IMPORTED_MODULE_6__/* .Notification */ .P);

/***/ }),

/***/ 6405:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "dotAdapter": () => /* reexport */ dotAdapter
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/adapters/dot.adapter.ts



var DotAdapter = /*#__PURE__*/function () {
  function DotAdapter() {
    classCallCheck_default()(this, DotAdapter);

    defineProperty_default()(this, "name", ".");

    defineProperty_default()(this, "counter", 0);

    defineProperty_default()(this, "weakmap", {});
  }

  createClass_default()(DotAdapter, [{
    key: "weakReference",
    value: function weakReference(obj) {
      // eslint-disable-next-line no-prototype-builtins
      if (!obj.hasOwnProperty("__rv")) {
        var id = this.counter++;
        Object.defineProperty(obj, "__rv", {
          value: id
        });
      }

      if (!this.weakmap[obj.__rv]) {
        this.weakmap[obj.__rv] = {
          callbacks: {}
        };
      }

      return this.weakmap[obj.__rv];
    }
  }, {
    key: "cleanupWeakReference",
    value: function cleanupWeakReference(ref, id) {
      if (!Object.keys(ref.callbacks).length) {
        if (!(ref.pointers && Object.keys(ref.pointers).length)) {
          delete this.weakmap[id];
        }
      }
    }
  }, {
    key: "stubFunction",
    value: function stubFunction(obj, fn) {
      var original = obj[fn];
      var map = this.weakReference(obj);
      var weakmap = this.weakmap;

      obj[fn] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var response = original.apply(obj, args);
        Object.keys(map.pointers).forEach(function (r) {
          var k = map.pointers[r];

          if (weakmap[r]) {
            if (Array.isArray(weakmap[r].callbacks[k])) {
              weakmap[r].callbacks[k].forEach(function (callback) {
                callback.sync();
              });
            }
          }
        });
        return response;
      };
    }
  }, {
    key: "observeMutations",
    value: function observeMutations(obj, ref, keypath) {
      var _this = this;

      if (Array.isArray(obj)) {
        var map = this.weakReference(obj);

        if (!map.pointers) {
          map.pointers = {};
          DotAdapter.ARRAY_METHODS.forEach(function (fn) {
            _this.stubFunction(obj, fn);
          });
        }

        if (!map.pointers[ref]) {
          map.pointers[ref] = [];
        }

        if (map.pointers[ref].indexOf(keypath) === -1) {
          map.pointers[ref].push(keypath);
        }
      }
    }
  }, {
    key: "unobserveMutations",
    value: function unobserveMutations(obj, ref, keypath) {
      if (Array.isArray(obj) && obj.__rv != null) {
        var map = this.weakmap[obj.__rv];

        if (map) {
          var pointers = map.pointers[ref];

          if (pointers) {
            var idx = pointers.indexOf(keypath);

            if (idx > -1) {
              pointers.splice(idx, 1);
            }

            if (!pointers.length) {
              delete map.pointers[ref];
            }

            this.cleanupWeakReference(map, obj.__rv);
          }
        }
      }
    }
  }, {
    key: "observe",
    value: function observe(obj, keypath, callback) {
      var _this2 = this;

      var value;
      var callbacks = this.weakReference(obj).callbacks;

      if (!callbacks[keypath]) {
        callbacks[keypath] = [];
        var desc = Object.getOwnPropertyDescriptor(obj, keypath);

        if (!desc || !(desc.get || desc.set || !desc.configurable)) {
          value = obj[keypath];
          Object.defineProperty(obj, keypath, {
            enumerable: true,
            get: function get() {
              return value;
            },
            set: function set(newValue) {
              if (newValue !== value) {
                _this2.unobserveMutations(value, obj.__rv, keypath);

                value = newValue;
                var map = _this2.weakmap[obj.__rv];

                if (map) {
                  var _callbacks = map.callbacks[keypath];

                  if (_callbacks) {
                    _callbacks.forEach(function (cb) {
                      cb.sync();
                    });
                  }

                  _this2.observeMutations(newValue, obj.__rv, keypath);
                }
              }
            }
          });
        }
      }

      if (callbacks[keypath].indexOf(callback) === -1) {
        callbacks[keypath].push(callback);
      }

      this.observeMutations(obj[keypath], obj.__rv, keypath);
    }
  }, {
    key: "unobserve",
    value: function unobserve(obj, keypath, callback) {
      var map = this.weakmap[obj.__rv];

      if (map) {
        var callbacks = map.callbacks[keypath];

        if (callbacks) {
          var idx = callbacks.indexOf(callback);

          if (idx > -1) {
            callbacks.splice(idx, 1);

            if (!callbacks.length) {
              delete map.callbacks[keypath];
              this.unobserveMutations(obj[keypath], obj.__rv, keypath);
            }
          }

          this.cleanupWeakReference(map, obj.__rv);
        }
      }
    }
  }, {
    key: "get",
    value: function get(obj, keypath) {
      return obj[keypath];
    }
  }, {
    key: "set",
    value: function set(obj, keypath, value) {
      obj[keypath] = value;
    }
  }]);

  return DotAdapter;
}();

defineProperty_default()(DotAdapter, "ARRAY_METHODS", ["push", "pop", "shift", "unshift", "sort", "reverse", "splice"]);

var dotAdapter = new DotAdapter();

// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/adapters/index.ts


/***/ }),

/***/ 6358:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": () => /* binding */ attributeBinder
/* harmony export */ });
/**
 * Sets the attribute on the element. If no binder above is matched it will fall
 * back to using this binder.
 */
var attributeBinder = {
  name: "*",
  bind: function bind()
  /*el*/
  {
    /**/
  },
  unbind: function unbind() {
    delete this.customData;
  },
  routine: function routine(el, newValue) {
    if (!this.type) {
      throw new Error("Can't set attribute of " + this.type);
    }

    var oldValue = el.getAttribute(this.type);

    if (newValue != null) {
      if (oldValue !== newValue) {
        el.setAttribute(this.type, newValue);
        el.dispatchEvent( // E.g. Event used in BinderAttributeChangedEvent
        new CustomEvent("binder-changed", {
          detail: {
            name: this.type,
            newValue: newValue,
            oldValue: oldValue
          }
        }));
      }
    } else {
      el.removeAttribute(this.type);
      el.dispatchEvent( // E.g. Event used in BinderAttributeChangedEvent
      new CustomEvent("binder-changed", {
        detail: {
          name: this.type,
          newValue: newValue,
          oldValue: oldValue
        }
      }));
    }
  }
};

/***/ }),

/***/ 47:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "addClassBinder": () => /* reexport */ addClassBinder,
  "animateStarBinder": () => /* reexport */ animateStarBinder,
  "assignBinder": () => /* reexport */ assignBinder,
  "assignPropertyBinder": () => /* reexport */ assignPropertyBinder,
  "attributeBinder": () => /* reexport */ attribute_binder/* attributeBinder */.A,
  "blockBinder": () => /* reexport */ blockBinder,
  "checkedBinder": () => /* reexport */ checkedBinder,
  "classStarBinder": () => /* reexport */ classStarBinder,
  "componentAttributeBinder": () => /* reexport */ componentAttributeBinder,
  "cssStarBinder": () => /* reexport */ cssStarBinder,
  "disabledBinder": () => /* reexport */ disabledBinder,
  "eachStarBinder": () => /* reexport */ eachStarBinder,
  "enabledBinder": () => /* reexport */ enabledBinder,
  "flexSortChildsBinder": () => /* reexport */ flexSortChildsBinder,
  "hideBinder": () => /* reexport */ hideBinder,
  "htmlBinder": () => /* reexport */ htmlBinder,
  "ifBinder": () => /* reexport */ ifBinder,
  "maxlengthBinder": () => /* reexport */ maxlengthBinder,
  "onEventBinder": () => /* reexport */ onEventBinder,
  "parentBinder": () => /* reexport */ parentBinder,
  "readonlyBinder": () => /* reexport */ readonlyBinder,
  "removeClassBinder": () => /* reexport */ removeClassBinder,
  "showBinder": () => /* reexport */ showBinder,
  "srcsetSizeBinder": () => /* reexport */ srcsetSizeBinder,
  "templateBinder": () => /* reexport */ templateBinder,
  "textBinder": () => /* reexport */ textBinder,
  "toggleOnEventBinder": () => /* reexport */ toggleOnEventBinder,
  "unlessBinder": () => /* reexport */ unlessBinder,
  "valueBinder": () => /* reexport */ valueBinder
});

// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/add-class.binder.ts
/**
 * add-class
 * Adds the value of the attribute to the class.
 * Instead of `class-[classname]` the classname is setted by the
 * attribute value and not by the star value.
 * @example
 * <ul>
 *   <li rv-each-todo="todos">
 *     <div rv-add-class="todo.state"></div>
 *   </li>
 * <ul>
 */
var addClassBinder = {
  name: "add-class",
  "function": true,
  priority: 1000,
  bind: function bind(el) {
    this.customData = {
      staticClasses: el.className.split(" ")
    };
  },
  unbind: function unbind() {
    delete this.customData;
  },
  routine: function routine(el, newValue) {
    if (newValue) {
      if (this.customData.staticClasses.indexOf(newValue) === -1) {
        el.className = this.customData.staticClasses.join(" ") + " " + newValue;
      }
    } else {
      el.className = this.customData.staticClasses.join(" ");
    }

    el.className = el.className.trim();
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/animate-classname.binder.ts
/**
 * animate-{class}
 * Add / remove animation class with start and done affix
 */
var animateStarBinder = {
  name: "animate-*",
  "function": true,
  priority: 1000,
  bind: function bind(el) {
    var animateClassName = this.args[0];
    el.classList.add(animateClassName);
  },
  unbind: function unbind() {//
  },
  routine: function routine(el, start) {
    var animateClassName = this.args[0];

    if (start) {
      el.classList.add(animateClassName + "-start");
      el.classList.remove(animateClassName + "-done");
    } else {
      el.classList.remove(animateClassName + "-start");
      el.classList.add(animateClassName + "-done");
    }
  }
};
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js
var helpers_typeof = __webpack_require__(8);
var typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);

// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/assign.binder.ts



/**
 * assign
 * Assign a value in your model.
 * The value you want to assign must be an object and will be concatenate with your model.
 * @example
 * <div rv-assign='{"newValue": "hello", "anotherNewValue": "world"}'>{newValue} {anotherNewValue}!</div>
 */
var assignBinder = {
  name: "assign",
  routine: function routine(el, value) {
    if (typeof_default()(value) === "object") {
      return (0,type/* extend */.l7)(false, this.view.models, value);
    }

    console.warn("Value must be an object or propertyName is required");
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/assign-property.binder.ts

/**
 * assign-*
 * Assign a value in your model.
 * Sets or overwrites a value by his property name (named whatever value is in place of [property]) in your model.
 * @example
 * <div rv-assign-new='"hello"'>{new}</div>
 */

var assignPropertyBinder = {
  name: "assign-*",
  routine: function routine(el, value) {
    var propertyName = (0,type/* camelCase */.eV)(this.args[0].trim());
    var obj = {};
    obj[propertyName] = value;
    this.view.models[propertyName] = value;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/block.binder.ts
/**
 * block
 * Blocks the binding for the current element and his childs.
 * @note Please note that `<script></script>`, `<style type="text/css"></style>`, `<template></template>` and `<code></code>` tags are blocked by default.
 * You can change this by setting the `blockNodeNames` option.
 * @example
 * <div rv-block="">
 *  <!-- After binding you should see `{ value }` because the binding is blocked here -->
 *  { value }
 * </div>
 */
var blockBinder = {
  name: "block",
  block: true,
  routine: function routine() {
    /**/
  }
};
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/dom.ts
var dom = __webpack_require__(8277);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/checked.binder.ts
/* eslint-disable @typescript-eslint/no-this-alias */


/**
 * checked
 * Checks a checkbox or radio input when the value is true. Also sets the model
 * property when the input is checked or unchecked (two-way binder).
 */

var checkedBinder = {
  name: "checked",
  publishes: true,
  priority: 2000,
  onChange: function onChange() {
    this.publish();
  },
  bind: function bind(el) {
    var self = this;
    this.customData = this.customData || {};

    if (!this.customData.onChange) {
      this.customData.onChange = function () {
        self.publish();
      };
    }

    el.addEventListener("change", this.customData.onChange, false); // el.addEventListener("click", this.customData.onChange, false);
    // el.addEventListener("input", this.customData.onChange, false);
    // el.addEventListener("focus", this.customData.onChange, false);
    // el.addEventListener("blur", this.customData.onChange, false);

    el.checked = !!el.checked;
  },
  unbind: function unbind(el) {
    el.removeEventListener(this.customData.event, this.customData.onChange); // el.addEventListener("click", this.customData.onChange);
    // el.addEventListener("input", this.customData.onChange);
    // el.addEventListener("focus", this.customData.onChange);
    // el.addEventListener("blur", this.customData.onChange);
  },
  routine: function routine(el, newValue) {
    var oldValue = this.getValue(el);

    if (el.type === "radio") {
      el.checked = (0,type/* getString */.KF)(oldValue) === (0,type/* getString */.KF)(newValue);
    } else {
      if (oldValue !== newValue) {
        el.checked = !!newValue;
      }
    }
  },
  getValue: dom/* getInputValue */.d9
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/class-name.binder.ts
/**
 * class-*
 * class-[classname]
 *
 * Adds a class (whatever value is in place of [classname]) on the element
 * when the value evaluates to true and removes that class if the value
 * evaluates to false.
 * @example
 * <li rv-class-completed="todo.done">{ todo.name }</li>
 */
var classStarBinder = {
  name: "class-*",
  routine: function routine(el, value) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    var classList = el.className.split(" ").filter(function (ele) {
      return ele !== "";
    });
    var arg = this.args[0].trim();
    var idx = classList.indexOf(arg);

    if (idx === -1) {
      if (value) {
        el.className += " ".concat(arg);
      }
    } else if (!value) {
      el.className = classList.filter(function (_, i) {
        return i !== idx;
      }).join(" ");
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/co-attribute.binder.ts
/**
 * parent
 * Passses a riba model / scope value to your component without first converting it as an attribute
 */
var componentAttributeBinder = {
  name: "co-*",
  routine: function routine(el, value) {
    console.debug("componentAttributeBinder routine this", this);
    console.debug("componentAttributeBinder routine value", value);
    this.binder.triggerAttributeValue.call(this, el, value);
  },
  bind: function bind(el) {
    // const attrName = (this.args[0] as string).trim();
    var attrName = this.keypath;
    var eventName = "ask-for-attribute:" + attrName;
    console.debug("bind eventName", eventName);
    el.addEventListener(eventName, this.binder.onAskForAttributeValue.bind(this, el), false);
  },
  unbind: function unbind(el) {
    // const attrName = (this.args[0] as string).trim();
    var attrName = this.keypath;
    el.removeEventListener("ask-for-attribute:" + attrName, this.binder.onAskForAttributeValue.bind(this), false);
  },
  onAskForAttributeValue: function onAskForAttributeValue(el) {
    if (this.getValue) {
      // const attrName = (this.args[0] as string).trim();
      var attrName = this.keypath;
      this.binder.triggerAttributeValue.call(this, el, this.view.models[attrName]);
    } else {
      console.warn("[componentAttributeBinder] this.getValue is not defined");
    }
  },
  triggerAttributeValue: function triggerAttributeValue(el, value) {
    var attrName = this.args[0].trim();
    var eventName = "attribute:" + attrName;
    console.debug("triggerAttributeValue newValue", value);
    console.debug("triggerAttributeValue eventName", eventName);
    el.dispatchEvent(new CustomEvent(eventName, {
      detail: {
        name: attrName,
        oldValue: undefined,
        newValue: value,
        namespace: null
      }
    }));
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/style-css-property.binder.ts
/**
 * style-*
 * Adds a style to the element.
 *
 * ```html
 * <div rv-style-background-color="'blue'"></div>
 * ```
 */
var cssStarBinder = {
  name: "style-*",
  routine: function routine(el, value) {
    var propertyName = this.args[0];

    if (value === null || value === undefined || value === "") {
      el.style.removeProperty(propertyName);
    } else {
      el.style.setProperty(propertyName, value);
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/enabled.binder.ts
/**
 * Enables the element when value is true.
 */
var enabledBinder = {
  name: "enabled",
  routine: function routine(el, value) {
    el.disabled = !value;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/flex-sort-childs.binder.ts
/**
 * sort-childs using flex order
 */
var flexSortChildsBinder = {
  name: "flex-sort-childs",
  priority: 90000,
  // bind(el: HTMLUnknownElement) {
  // },
  routine: function routine(el, descending) {
    var childrens = Array.from(el.children);
    childrens.sort(function (a, b) {
      if (!a.dataset.sortBy || !b.dataset.sortBy) {
        return 0;
      }

      if (a.dataset.sortBy < b.dataset.sortBy) {
        return descending ? 1 : -1;
      }

      if (a.dataset.sortBy > b.dataset.sortBy) {
        return descending ? -1 : 1;
      }

      return 0;
    });

    for (var i = 0; i < childrens.length; i++) {
      var child = childrens[i];
      child.style.order = i.toString();
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/disabled.binder.ts
/**
 * Disables the element when value is true (negated version of `enabled` binder).
 */
var disabledBinder = {
  name: "disabled",
  routine: function routine(el, value) {
    el.disabled = !!value;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/maxlength.binder.ts
/**
 * maxlength
 */
var maxlengthBinder = {
  name: "maxlength",
  bind: function bind() {
    this.customData = {};
  },
  routine: function routine(el, maxLength) {
    if (typeof maxLength === "number") {
      el.setAttribute("maxlength", maxLength.toString());
      el.maxLength = maxLength;
    } else {
      el.removeAttribute("maxlength");
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/on-event.binder.ts
/**
 * Binds an event handler on the element.
 */
var onEventBinder = {
  name: "on-*",
  "function": true,
  priority: 1000,
  bind: function bind() {
    if (!this.customData) {
      this.customData = {
        handler: null
      };
    }
  },
  unbind: function unbind(el) {
    if (this.customData.handler) {
      if (this.args === null) {
        throw new Error("args is null");
      }

      var eventName = this.args[0];
      el.removeEventListener(eventName, this.customData.handler);
    }
  },
  routine: function routine(el, value) {
    var _this = this;

    if (this.args === null) {
      throw new Error("args is null");
    }

    var eventName = this.args[0];

    if (this.customData.handler) {
      el.removeEventListener(eventName, this.customData.handler);
    }

    this.customData.handler = this.eventHandler(value, el);
    var passive = this.el.dataset.passive === "true"; // data-passive="true"

    try {
      el.addEventListener(eventName, this.customData.handler, {
        passive: passive
      });
    } catch (error) {
      console.warn(error);
      el.addEventListener(eventName, function (event) {
        _this.customData.handler(event);
      });
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/parent.binder.ts
/**
 * parent
 * Binds the parent scope to your component
 */
var parentBinder = {
  name: "parent",
  routine: function routine()
  /*el: HTMLElement, value: object*/
  {
    /**/
  },
  bind: function bind(el) {
    el.addEventListener("ask-for-parent", this.binder.onAskForParent.bind(this, el), false);
    this.binder.onAskForParent.bind(this)(el);
  },
  unbind: function unbind(el) {
    el.removeEventListener("ask-for-parent", this.binder.onAskForParent, false);
  },
  onAskForParent: function onAskForParent(el) {
    // console.debug("onAskForParent", el, this.view.models);
    el.dispatchEvent(new CustomEvent("parent", {
      detail: this.view.models
    }));
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/readonly.binder.ts
/**
 * readonly
 */
var readonlyBinder = {
  name: "readonly",
  bind: function bind() {
    this.customData = {};
  },
  routine: function routine(el, readOnly) {
    readOnly = !!readOnly;
    el.readOnly = readOnly;

    if (readOnly) {
      el.setAttribute("readonly", "");
    } else {
      el.removeAttribute("readonly");
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/remove-class.binder.ts
/**
 * remove-class
 * Removes the given class string the class attibute.
 * Instead of `class-[classname]` the classname is removed by the
 * given attribute and not by the star value,
 * @example
 * <img class="loading" rv-src="img.src" rv-remove-class="loadingClass">
 */
var removeClassBinder = {
  name: "remove-class",
  bind: function bind(el) {
    this.customData = {
      staticClassesString: el.className
    };
  },
  routine: function routine(el, value) {
    var regex = new RegExp("\\b".concat(value, "\\b"), "g");
    el.className = this.customData.staticClassesString.replace(regex, "").trim();
  }
};
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/view.ts
var src_view = __webpack_require__(5225);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/if.binder.ts

/**
 * if
 * Inserts and binds the element and it's child nodes into the DOM when true.
 */

var ifBinder = {
  name: "if",
  block: true,
  priority: 4000,
  bind: function bind(el) {
    this.customData = {};

    if (!this.marker) {
      this.marker = document.createComment(" riba: " + this.type + " " + this.keypath + " ");
      this.customData.attached = false;

      if (!el.parentNode) {// console.warn('Element has no parent node');
      } else {
        el.parentNode.insertBefore(this.marker, el);
        el.parentNode.removeChild(el);
      }
    } else if (this.customData.nested) {
      this.customData.nested.bind();
    }
  },
  unbind: function unbind() {
    if (this.customData.nested) {
      this.customData.nested.unbind();
    }
  },
  routine: function routine(el, value) {
    value = !!value;

    if (value !== this.customData.attached) {
      if (value) {
        if (!this.customData.nested) {
          this.customData.nested = new src_view/* View */.G(el, this.view.models, this.view.options);
          this.customData.nested.bind();
        }

        if (!this.marker || !this.marker.parentNode) {// console.warn('Marker has no parent node');
        } else {
          this.marker.parentNode.insertBefore(el, this.marker.nextSibling);
        }

        this.customData.attached = true;
      } else {
        if (!el.parentNode) {// console.warn('Element has no parent node');
        } else {
          el.parentNode.removeChild(el);
        }

        this.customData.attached = false;
      }
    }
  },
  update: function update(models) {
    if (this.customData.nested) {
      this.customData.nested.update(models);
    }
  }
};
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/control.ts
var control = __webpack_require__(417);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/each-item.binder.ts


/**
 * each-*
 * Appends bound instances of the element in place for each item in the array.
 */

var eachStarBinder = {
  name: "each-*",
  block: true,
  priority: 4000,
  bind: function bind(el) {
    if (!this.marker) {
      this.marker = document.createComment(" riba: ".concat(this.type, " "));
      this.customData = {
        iterated: []
      };

      if (!el.parentNode) {// console.warn('No parent node!');
      } else {
        el.parentNode.insertBefore(this.marker, el);
        el.parentNode.removeChild(el);
      }
    } else {
      this.customData.iterated.forEach(function (view) {
        view.bind();
      });
    }
  },
  unbind: function unbind() {
    if (this.customData.iterated) {
      this.customData.iterated.forEach(function (view) {
        view.unbind();
      });
    }
  },
  routine: function routine(el, collection) {
    var _this = this;

    if (this.args === null) {
      throw new Error("args is null");
    }

    var modelName = this.args[0];
    collection = collection || []; // TODO support object keys to iterate over

    if (!Array.isArray(collection)) {
      throw new Error("each-" + modelName + " needs an array to iterate over, but it is");
    } // if index name is seted by `index-property` use this name, otherwise `%[modelName]%`


    var indexProp = el.getAttribute("index-property") || this.getIterationAlias(modelName);
    collection.forEach(function (model, index) {
      var scope = {
        $parent: _this.view.models
      };
      scope[indexProp] = index;
      scope[modelName] = model;
      var view = _this.customData.iterated[index];

      if (!view) {
        var previous;

        if (_this.customData.iterated.length) {
          previous = _this.customData.iterated[_this.customData.iterated.length - 1].els[0];
        } else if (_this.marker) {
          previous = _this.marker;
        } else {
          throw new Error("previous not defined");
        }

        view = src_view/* View.create */.G.create(_this, scope, previous.nextSibling);

        _this.customData.iterated.push(view);
      } else {
        if (view.models[modelName] !== model) {
          // search for a view that matches the model
          var matchIndex;
          var nextView;

          for (var nextIndex = index + 1; nextIndex < _this.customData.iterated.length; nextIndex++) {
            nextView = _this.customData.iterated[nextIndex];

            if (nextView.models[modelName] === model) {
              matchIndex = nextIndex;
              break;
            }
          }

          if (matchIndex !== undefined) {
            // model is in other position
            // todo: consider avoiding the splice here by setting a flag
            // profile performance before implementing such change
            _this.customData.iterated.splice(matchIndex, 1);

            if (!_this.marker || !_this.marker.parentNode) {
              throw new Error("Marker has no parent node");
            }

            _this.marker.parentNode.insertBefore(nextView.els[0], view.els[0]);

            nextView.models[indexProp] = index;
          } else {
            // new model
            nextView = src_view/* View.create */.G.create(_this, scope, view.els[0]);
          }

          _this.customData.iterated.splice(index, 0, nextView);
        } else {
          view.models[indexProp] = index;
        }
      }
    });

    if (this.customData.iterated.length > collection.length) {
      (0,control/* times */.DZ)(this.customData.iterated.length - collection.length, function () {
        var view = _this.customData.iterated.pop();

        view.unbind();

        if (!_this.marker || !_this.marker.parentNode) {
          throw new Error("Marker has no parent node");
        }

        _this.marker.parentNode.removeChild(view.els[0]);
      });
    }

    if (el.nodeName === "OPTION" && this.view.bindings) {
      this.view.bindings.forEach(function (binding) {
        if (_this.marker && binding.el === _this.marker.parentNode && binding.type === "value" && binding.sync) {
          binding.sync();
        }
      });
    }
  },
  update: function update(models) {
    var _this2 = this;

    var data = {}; // TODO: add test and fix if necessary

    Object.keys(models).forEach(function (key) {
      if (_this2.args === null) {
        throw new Error("args is null");
      }

      if (key !== _this2.args[0]) {
        data[key] = models[key];
      }
    });
    this.customData.iterated.forEach(function (view) {
      view.update(data);
    });
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/html.binder.ts
/**
 * Sets the element's text value.
 */
var htmlBinder = {
  name: "html",
  routine: function routine(el, value) {
    el.innerHTML = typeof value !== "undefined" ? value : "";
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/hide.binder.ts
/**
 * Hides the element when value is true (negated version of `show` binder).
 */
var hideBinder = {
  name: "hide",
  routine: function routine(el, value) {
    el.style.display = value ? "none" : "";

    if (value) {
      el.setAttribute("hidden", "true");
    } else {
      el.removeAttribute("hidden");
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/show.binder.ts
/**
 * Shows the element when value is true.
 */
var showBinder = {
  name: "show",
  routine: function routine(el, value) {
    el.style.display = value ? "" : "none";

    if (value) {
      el.removeAttribute("hidden");
    } else {
      el.setAttribute("hidden", "true");
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/text.binder.ts
/**
 * Sets the element's text value.
 */
var textBinder = {
  name: "text",
  routine: function routine(el, value) {
    el.textContent = value != null ? value : "";
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/toggle-on-event.binder.ts
/**
 * Togggles a boolean variable to true/false if the event is triggered.
 */
var toggleOnEventBinder = {
  name: "toggle-on-*",
  "function": true,
  bind: function bind() {
    if (!this.customData) {
      this.customData = {
        handler: null,
        propertyKey: null
      };
    }
  },
  unbind: function unbind(el) {
    if (this.customData.handler) {
      if (this.args === null) {
        throw new Error("args is null");
      }

      var eventName = this.args[0];
      el.removeEventListener(eventName, this.binder.toggle);
    }
  },
  toggle: function toggle() {
    if (this.customData.propertyKey) {
      this.view.models[this.customData.propertyKey] = !this.view.models[this.customData.propertyKey];
    }
  },
  routine: function routine(el, propertyKey) {
    if (this.args === null) {
      throw new Error("args is null");
    }

    this.customData.propertyKey = propertyKey;
    var eventName = this.args[0];
    var passive = this.el.dataset.passive === "true"; // data-passive="true"

    el.addEventListener(eventName, this.binder.toggle.bind(this), {
      passive: passive
    });
  }
};
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/binders/attribute.binder.ts
var attribute_binder = __webpack_require__(6358);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/srcset-size.binder.ts
/**
 * srcset-size
 * Sets an url with size to the `srcset` attribute
 */
var srcsetSizeBinder = {
  name: "srcset-*",
  routine: function routine(el, url) {
    var size = this.args[0];
    var srcset = el.getAttribute("srcset");

    if (typeof srcset !== "string") {
      srcset = "";
    }

    if (typeof url === "string" && url.length > 0) {
      var seperator = srcset.length > 0 ? ", " : ""; // Add size to srcset attribute

      srcset += "".concat(seperator).concat(url, " ").concat(size);
    } else {
      // Remove size from srcset attribute
      var sizes = srcset.split(",");
      sizes = sizes.map(function (iterSize) {
        return iterSize.trim();
      });
      sizes = sizes.filter(function (iterSize) {
        return !(iterSize.indexOf(size) !== -1);
      });
      srcset = sizes.join(", ") || "";
    }

    el.setAttribute("srcset", srcset);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/template.binder.ts

/**
 * template
 * Similar to rv-html but also binds the html with riba, so you can also use binders and componentes in this templates.
 */

var templateBinder = {
  name: "template",
  bind: function bind(el) {
    this.customData = {
      nested: new src_view/* View */.G(el, this.view.models, this.view.options)
    };
  },
  routine: function routine(el, value) {
    var _this$customData$nest, _this$customData$nest2;

    (_this$customData$nest = this.customData.nested) === null || _this$customData$nest === void 0 ? void 0 : _this$customData$nest.unbind();
    el.innerHTML = value ? value : "";
    this.customData.nested = new src_view/* View */.G(el, this.view.models, this.view.options);
    (_this$customData$nest2 = this.customData.nested) === null || _this$customData$nest2 === void 0 ? void 0 : _this$customData$nest2.bind();
  },
  unbind: function unbind() {
    var _this$customData$nest3;

    (_this$customData$nest3 = this.customData.nested) === null || _this$customData$nest3 === void 0 ? void 0 : _this$customData$nest3.unbind();
  },
  update: function update(models) {
    var _this$customData$nest4;

    (_this$customData$nest4 = this.customData.nested) === null || _this$customData$nest4 === void 0 ? void 0 : _this$customData$nest4.update(models);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/unless.binder.ts

/**
 * unless
 * Removes and unbinds the element and it's child nodes into the DOM when true
 * (negated version of `if` binder).
 */

var unlessBinder = {
  name: "unless",
  block: true,
  priority: 4000,
  bind: ifBinder.bind,
  unbind: ifBinder.unbind,
  routine: function routine(el, value) {
    return ifBinder.routine.call(this, el, !value);
  },
  update: ifBinder.update
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/value.binder.ts



var getData = function getData(el) {
  var customData = {};
  customData.type = el.type;
  customData.tagName = el.tagName;
  customData.contenteditable = el.getAttribute("contenteditable") ? true : false;
  customData.isRadio = customData.tagName === "INPUT" && customData.type === "radio";
  return customData;
};
/**
 * Sets the element's value. Also sets the model property when the input changes
 * (two-way binder).
 */


var valueBinder = {
  name: "value",
  publishes: true,
  priority: 3000,
  onChange: function onChange() {
    this.publish();
  },
  bind: function bind(el) {
    if (!this.customData) {
      this.customData = getData(el);
    }

    if (!this.customData.isRadio) {
      this.customData.event = el.getAttribute("event-name") || (el.tagName === "SELECT" ? "change" : "input"); // eslint-disable-next-line @typescript-eslint/no-this-alias

      var self = this;

      if (!this.customData.onChange) {
        this.customData.onChange = function () {
          self.publish();
        };
      }

      el.addEventListener("change", this.customData.onChange, false);
      el.addEventListener("input", this.customData.onChange, false);
      el.addEventListener("keyup", this.customData.onChange, false);
      el.addEventListener("paste", this.customData.onChange, false);
      el.addEventListener("blur", this.customData.onChange, false);
      el.addEventListener("focus", this.customData.onChange, false);
    }
  },
  unbind: function unbind(el) {
    el.removeEventListener("change", this.customData.onChange);
    el.removeEventListener("input", this.customData.onChange);
    el.removeEventListener("keyup", this.customData.onChange);
    el.removeEventListener("paste", this.customData.onChange);
    el.removeEventListener("blur", this.customData.onChange);
    el.removeEventListener("focus", this.customData.onChange);
  },
  routine: function routine(el, value) {
    var oldValue = this.getValue(el);

    if (!this.customData) {
      this.customData = getData(el);
    }

    if (this.customData.isRadio) {
      el.setAttribute("value", value);
    } else {
      if (el.type === "select-multiple") {
        if (Array.isArray(value)) {
          for (var i = 0; i < el.options.length; i++) {
            var option = el.options[i];
            option.selected = value.indexOf(option.value) > -1;
          } // TODO check if the value was really changed


          el.dispatchEvent(new Event("change"));
        }
      } else if (el.getAttribute("contenteditable")) {
        if ((0,type/* getString */.KF)(value) !== oldValue) {
          el.innerHTML = value; // TODO write test for contenteditable

          el.dispatchEvent(new Event("change"));
        }
      } else {
        if ((0,type/* getString */.KF)(value) !== oldValue) {
          el.value = value != null ? value : "";
          el.dispatchEvent(new Event("change"));
        }
      }
    }
  },
  getValue: dom/* getInputValue */.d9
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/binders/index.ts






























/***/ }),

/***/ 155:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "K": () => /* binding */ Binding
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(319);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3913);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6872);
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3017);
/* harmony import */ var _ribajs_utils_src_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8277);







/**
 *  A single binding between a model attribute and a DOM element.
 */

var Binding = /*#__PURE__*/function () {
  /**
   * Name of the binder without the prefix
   */

  /**
   * Arguments parsed from star binders, e.g. on foo-*-* args[0] is the first star, args[1] the second-
   */

  /**
   *
   */

  /**
   * HTML Comment to mark a binding in the DOM
   */

  /**
   * just to have a value where we could store custom data
   */

  /**
   * All information about the binding is passed into the constructor; the
   * containing view, the DOM node, the type of binding, the model object and the
   * keypath at which to listen for changes.
   * @param {*} view
   * @param {*} el
   * @param {*} type
   * @param {*} keypath
   * @param {*} binder
   * @param {*} args The start binders, on `class-*` args[0] wil be the classname.
   * @param {*} formatters
   */
  function Binding(view, el, type, keypath, binder, formatters, identifier) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Binding);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "value", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "observer", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "view", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "el", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "type", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "binder", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "formatters", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "formatterObservers", {});

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "keypath", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "args", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "model", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "marker", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, "customData", void 0);

    this.view = view;
    this.el = el;
    this.type = type;
    this.keypath = keypath;
    this.binder = binder;
    this.formatters = formatters;
    this.model = undefined;
    this.customData = {};

    if (identifier && type) {
      this.args = this.getStarArguments(identifier, type);
    } else {
      this.args = new Array();
    }
  }
  /**
   * Observes the object keypath
   * @param obj
   * @param keypath
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Binding, [{
    key: "observe",
    value: function observe(obj, keypath, callback) {
      return new _observer__WEBPACK_IMPORTED_MODULE_5__/* .Observer */ .Q(obj, keypath, callback);
    }
  }, {
    key: "parseTarget",
    value: function parseTarget() {
      if (this.keypath) {
        var token = (0,_parsers__WEBPACK_IMPORTED_MODULE_4__/* .parseType */ .gZ)(this.keypath);

        if (token.type === _parsers__WEBPACK_IMPORTED_MODULE_4__/* .PRIMITIVE */ .uk) {
          this.value = token.value;
        } else if (token.type === _parsers__WEBPACK_IMPORTED_MODULE_4__/* .KEYPATH */ .pm) {
          this.observer = this.observe(this.view.models, this.keypath, this);
          this.model = this.observer.target;
        } else {
          throw new Error("[".concat(this.binder.name, "] Unknown type in token"));
        }
      } else {
        this.value = undefined;
      }
    }
    /**
     * Get the iteration alias, used in the interation binders like `each-*`
     * @param {*} modelName
     * @see https://github.com/mikeric/rivets/blob/master/dist/rivets.js#L26
     * @see https://github.com/mikeric/rivets/blob/master/dist/rivets.js#L1175
     */

  }, {
    key: "getIterationAlias",
    value: function getIterationAlias(modelName) {
      return "%" + modelName + "%";
    }
  }, {
    key: "parseFormatterArguments",
    value: function parseFormatterArguments(args, formatterIndex) {
      var _this = this;

      return args.map(_parsers__WEBPACK_IMPORTED_MODULE_4__/* .parseType */ .gZ).map(function (_ref, ai) {
        var type = _ref.type,
            value = _ref.value;

        if (type === _parsers__WEBPACK_IMPORTED_MODULE_4__/* .PRIMITIVE */ .uk) {
          var primitiveValue = value;
          return primitiveValue;
        } else if (type === _parsers__WEBPACK_IMPORTED_MODULE_4__/* .KEYPATH */ .pm) {
          // keypath is string
          var keypath = value;

          if (!_this.formatterObservers[formatterIndex]) {
            _this.formatterObservers[formatterIndex] = {};
          }

          var observer = _this.formatterObservers[formatterIndex][ai];

          if (!observer) {
            observer = _this.observe(_this.view.models, keypath, _this);
            _this.formatterObservers[formatterIndex][ai] = observer;
          }

          return observer.value();
        } else {
          throw new Error("[".concat(_this.binder.name, "] Unknown argument type"));
        }
      });
    }
    /**
     * Applies all the current formatters to the supplied value and returns the
     * formatted value.
     */

  }, {
    key: "formattedValue",
    value: function formattedValue(value) {
      var _this2 = this;

      if (this.formatters === null) {
        throw new Error("[".concat(this.binder.name, " formatters is null"));
      }

      return this.formatters.reduce(function (result, declaration, index) {
        var args = declaration.match(Binding.FORMATTER_ARGS);

        if (args === null) {
          console.warn(new Error("[".concat(_this2.binder.name, "] No args matched with regex \"FORMATTER_ARGS\"!\nvalue: ").concat(value, "\nresult: ").concat(result, "\ndeclaration: ").concat(declaration, "\nindex: ").concat(index, "\n")));
          return result;
        }

        var id = args.shift();

        if (!id) {
          throw new Error("[".concat(_this2.binder.name, "] No formatter id found in args!"));
        }

        if (!_this2.view.options.formatters) {
          throw new Error("[".concat(_this2.binder.name, "] No formatters are defined!"));
        }

        var formatter = _this2.view.options.formatters[id];

        if (!formatter) {
          throw new Error("[".concat(_this2.binder.name, "] No formatters with id \"").concat(id, "\" found!"));
        }

        var processedArgs = _this2.parseFormatterArguments(args, index); // get formatter read funcion


        if (formatter && typeof formatter.read === "function") {
          result = formatter.read.apply(_this2.model, [result].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(processedArgs)));
        }

        return result;
      }, value);
    }
    /**
     * Returns an event handler for the binding around the supplied function.
     * Tihs event Handler is mainly used by the on-* binder
     * @param fn The function to call by the handler
     * @param el The element the event was triggered from
     */

  }, {
    key: "eventHandler",
    value: function eventHandler(fn, el) {
      var _this3 = this;

      // eslint-disable-next-line @typescript-eslint/no-this-alias
      var binding = this;
      var handler = binding.view.options.handler;
      return function (ev) {
        if (!handler) {
          throw new Error("No handler defined in binding.view.options.handler");
        }

        handler.call(fn, _this3, ev, binding, el);
      };
    }
    /**
     * Sets the value for the binding. This Basically just runs the binding routine
     * with the supplied value formatted.
     */

  }, {
    key: "set",
    value: function set(value) {
      var _this4 = this;

      if (this.binder === null) {
        console.warn(new Error("Binder is null"), this);
        return;
      }

      try {
        value = this.formattedValue(value);
      } catch (error) {
        console.error(error);
        return value;
      }

      if (this.binder && typeof this.binder.routine === "function") {
        // If value is a promise
        if (value && typeof value.then === "function" && typeof value["catch"] === "function") {
          value.then(function (realValue) {
            _this4.binder.routine.call(_this4, _this4.el, realValue);
          })["catch"](function (error) {
            console.error(error);
          });
        } else {
          this.binder.routine.call(this, this.el, value);
        }
      }
    }
    /**
     * Syncs up the view binding with the model.
     */

  }, {
    key: "sync",
    value: function sync() {
      if (this.observer) {
        this.model = this.observer.target;
        this.set(this.observer.value());
      } else {
        this.set(this.value);
      }
    }
    /**
     * Publishes the value currently set on the input element back to the model.
     */

  }, {
    key: "publish",
    value: function publish() {
      var _this5 = this;

      if (this.observer) {
        if (this.formatters === null) {
          throw new Error("formatters is null");
        }

        var value = this.formatters.reduceRight(function (result, declaration, index) {
          var args = declaration.split(Binding.FORMATTER_SPLIT);
          var id = args.shift();

          if (!id) {
            throw new Error("id not defined");
          }

          if (!_this5.view.options.formatters) {
            return undefined;
          }

          var formatter = _this5.view.options.formatters[id];

          var processedArgs = _this5.parseFormatterArguments(args, index);

          if (formatter && typeof formatter.publish === "function") {
            result = formatter.publish.apply(formatter, [result].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(processedArgs)));
          }

          return result;
        }, this.getValue(this.el));
        this.observer.setValue(value);
      }
    }
    /**
     * Subscribes to the model for changes at the specified keypath. Bi-directional
     * routines will also listen for changes on the element to propagate them back
     * to the model.
     */

  }, {
    key: "bind",
    value: function bind() {
      this.parseTarget();

      if (this.binder && this.binder.bind) {
        if (typeof this.binder.bind !== "function") {
          throw new Error("the method bind is not a function");
        }

        this.binder.bind.call(this, this.el);
      }

      if (this.view.options.preloadData) {
        this.sync();
      }
    }
    /**
     * Unsubscribes from the model and the element.
     */

  }, {
    key: "unbind",
    value: function unbind() {
      var _this6 = this;

      if (!this.binder) {
        console.warn(new Error("Binder is not defined"), this);
        return;
      }

      if (this.binder.unbind) {
        this.binder.unbind.call(this, this.el);
      }

      if (this.observer) {
        this.observer.unobserve();
      }

      Object.keys(this.formatterObservers).forEach(function (fi) {
        var args = _this6.formatterObservers[fi];
        Object.keys(args).forEach(function (ai) {
          args[ai].unobserve();
        });
      });
      this.formatterObservers = {};
    }
    /**
     * Updates the binding's model from what is currently set on the view. Unbinds
     * the old model first and then re-binds with the new model.
     * @param {any} models
     */

  }, {
    key: "update",
    value: function update() {
      var models = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.observer) {
        this.model = this.observer.target;
      }

      if (this.binder === null) {
        throw new Error("binder is null");
      }

      if (typeof this.binder.update === "function") {
        this.binder.update.call(this, models);
      }
    }
    /**
     * Returns elements value
     * @param el
     */

  }, {
    key: "getValue",
    value: function getValue(el) {
      if (this.binder === null) {
        throw new Error("binder is null");
      }

      if (typeof this.binder.getValue === "function") {
        return this.binder.getValue.call(this, el);
      } else {
        return (0,_ribajs_utils_src_dom__WEBPACK_IMPORTED_MODULE_6__/* .getInputValue */ .d9)(el);
      }
    }
  }, {
    key: "getStarArguments",
    value: function getStarArguments(identifier, type) {
      var regexp = new RegExp("^".concat(identifier.replace(/\*/g, "(.+)"), "$"));
      var match = type.match(regexp);
      return match && match.slice(1) || [];
    }
  }]);

  return Binding;
}();

_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(Binding, "FORMATTER_ARGS", /[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g);

_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(Binding, "FORMATTER_SPLIT", /\s+/);

/***/ }),

/***/ 6598:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "w": () => /* binding */ Component
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(2205);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(8585);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(9754);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/view.ts
var view = __webpack_require__(5225);
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/riba.ts + 2 modules
var riba = __webpack_require__(2505);
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// CONCATENATED MODULE: ./node_modules/@ribajs/utils/src/color.ts
/**
 * Generates a random color
 * @see https://stackoverflow.com/a/1484514/1465919
 */
var getRandomColor = function getRandomColor() {
  var letters = "0123456789ABCDEF";
  var color = "#";

  for (var i = 0; i < 6; i++) {
    color += letters[Math.floor(Math.random() * 16)];
  }

  return color;
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/component/fake-html-element.ts


/**
 * This fake html element makes it possible to use custom elements with prototype classes for backward compatibility on old browsers
 */
var FakeHTMLElement
/*implements HTMLElement*/
= // tslint:disable-next-line
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function FakeHTMLElement(element) {
  classCallCheck_default()(this, FakeHTMLElement);

  if (window.customElements && !window.forceComponentFallback) {
    return Reflect.construct(HTMLElement, [], this.constructor);
  }
};

if (window.customElements && !window.forceComponentFallback) {
  try {
    FakeHTMLElement.prototype = Object.create(HTMLElement.prototype, {
      constructor: {
        value: HTMLElement,
        configurable: true,
        writable: true
      }
    });
  } catch (error) {
    console.error(error);
  }

  Object.setPrototypeOf(FakeHTMLElement, HTMLElement);
}


// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/component/component.ts










function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/* eslint-disable @typescript-eslint/no-unused-vars */

/**
 * This implementation of components replaces the old components of rivets following the Web Components v1 specs
 *
 * @see https://developer.mozilla.org/de/docs/Web/Web_Components/Using_custom_elements
 */







var Component = /*#__PURE__*/function (_FakeHTMLElement) {
  inherits_default()(Component, _FakeHTMLElement);

  var _super = _createSuper(Component);

  /**
   * Used to check if all passed observedAttributes are initialized
   */

  /**
   * If true the component will automatically bind the component to riba if all required attributes are set.
   */
  function Component(element) {
    var _this;

    classCallCheck_default()(this, Component);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "_debug", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "_color", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "_fallback", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "view", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "templateLoaded", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "observedAttributesToCheck", {});

    defineProperty_default()(assertThisInitialized_default()(_this), "observedAttributes", []);

    defineProperty_default()(assertThisInitialized_default()(_this), "riba", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "el", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "bound", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "attributeObserverFallback", void 0);

    if (_this._debug) {
      _this._color = getRandomColor();
    }

    if (element) {
      _this.el = element;
    } else if (window.customElements) {
      _this.el = assertThisInitialized_default()(_this);
    } else {
      throw new Error("element is required on browsers without custom elements support");
    }

    return _this;
  }
  /**
   * Remove this custom element
   */


  createClass_default()(Component, [{
    key: "remove",
    value: function remove() {
      if (this.el && this.el.parentElement) {
        this.el.parentElement.removeChild(this.el);

        if (!window.customElements || this._fallback) {
          this.disconnectedFallbackCallback();
        }
      }
    }
  }, {
    key: "connectedFallbackCallback",
    value: function connectedFallbackCallback() {
      // this.debug(`Called connectedFallbackCallback`);
      this.connectedCallback();
    }
  }, {
    key: "disconnectedFallbackCallback",
    value: function disconnectedFallbackCallback() {
      // this.debug(`Called disconnectedFallbackCallback`);
      this.disconnectedCallback();
    }
  }, {
    key: "debug",
    value: function debug() {
      var _console;

      if (!this._debug) {
        return;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (typeof args[0] === "string") {
        var name = this.constructor.name || this.el.tagName;

        if (this._color) {
          args[0] = "%c[".concat(name, "] ").concat(args[0]);
          args.splice(1, 0, "color: ".concat(this._color, ";"));
        } else {
          args[0] = "[".concat(name, "] ").concat(args[0]);
        }
      }

      (_console = console).debug.apply(_console, args);
    }
    /**
     * returns a list of attributes wich are required until the riba binding starts
     */

  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return [];
    }
  }, {
    key: "init",
    value: function () {
      var _init = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(observedAttributes) {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.initAttributeObserver(observedAttributes);
                this.initRibaAttributeObserver(observedAttributes);
                this.getPassedObservedAttributes(observedAttributes);
                return _context.abrupt("return", this.bindIfReady());

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "ready",
    value: function ready() {
      return this.allPassedObservedAttributesAreInitialized() && this.checkRequiredAttributes();
    }
    /**
     * If `autobind` is true this component will bind riba automatically in this component if all all passed observed and required attributes are initialized
     */

  }, {
    key: "bindIfReady",
    value: function () {
      var _bindIfReady = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        var _template;

        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.ready()) {
                  _context2.next = 14;
                  break;
                }

                _context2.next = 3;
                return this.beforeTemplate();

              case 3:
                _context2.next = 5;
                return this.loadTemplate();

              case 5:
                _template = _context2.sent;
                _context2.next = 8;
                return this.afterTemplate(_template);

              case 8:
                if (!this.autobind) {
                  _context2.next = 11;
                  break;
                }

                _context2.next = 11;
                return this.bind();

              case 11:
                _context2.next = 13;
                return this.onReady();

              case 13:
                return _context2.abrupt("return");

              case 14:
                this.debug("Not all required or passed attributes are set to load and bind the template", this.observedAttributesToCheck, this.scope);
                return _context2.abrupt("return", null);

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function bindIfReady() {
        return _bindIfReady.apply(this, arguments);
      }

      return bindIfReady;
    }()
    /**
     * Check if the attribute (e.g. `src`) is passed to this custom element
     * @param observedAttribute
     */

  }, {
    key: "attributeIsPassed",
    value: function attributeIsPassed(observedAttribute) {
      return this.el.hasAttribute(observedAttribute);
    }
    /**
     * Get passed observed attributes, used to check if all passed attributes are initialized
     * @param observedAttributes
     */

  }, {
    key: "getPassedObservedAttributes",
    value: function getPassedObservedAttributes(observedAttributes) {
      var oa2c = this.observedAttributesToCheck;

      var _iterator = _createForOfIteratorHelper(observedAttributes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var observedAttribute = _step.value;

          if (!oa2c[observedAttribute]) {
            oa2c[observedAttribute] = {
              passed: false,
              initialized: false
            };
          } else {
            if (!oa2c[observedAttribute].passed) {
              oa2c[observedAttribute].passed = this.attributeIsPassed(observedAttribute);
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * Checks if all passed observed attributes are initialized
     */

  }, {
    key: "allPassedObservedAttributesAreInitialized",
    value: function allPassedObservedAttributesAreInitialized() {
      var _this2 = this;

      return Object.keys(this.observedAttributesToCheck).every(function (key) {
        var _this2$observedAttrib, _this2$observedAttrib2;

        return !((_this2$observedAttrib = _this2.observedAttributesToCheck[key]) === null || _this2$observedAttrib === void 0 ? void 0 : _this2$observedAttrib.passed) || ((_this2$observedAttrib2 = _this2.observedAttributesToCheck[key]) === null || _this2$observedAttrib2 === void 0 ? void 0 : _this2$observedAttrib2.initialized);
      });
    }
    /**
     * Required attributes before the view is bound
     *
     * The attributeChangedCallback is called for each attribute wich updates the riba view each time
     * which can have a big impact on performance or required attributes are not yet available which can lead to errors.
     * So define required attriutes and the view is ony bind the first time after all this attributes are transmitted.
     */

  }, {
    key: "checkRequiredAttributes",
    value: function checkRequiredAttributes() {
      var _this3 = this;

      return this.requiredAttributes().every( // eslint-disable-next-line no-prototype-builtins
      function (requiredAttribute) {
        return _this3.scope.hasOwnProperty(requiredAttribute);
      });
    }
  }, {
    key: "parseAttribute",
    value: function parseAttribute(attr) {
      var value = attr;

      if (attr === "true") {
        value = true;
      } else if (attr === "false") {
        value = false;
      } else if (attr === "null") {
        value = null;
      } else if (attr === "undefined") {
        value = undefined;
      } else if (attr === "") {
        value = undefined;
      } else if (!isNaN(Number(attr))) {
        value = Number(attr); // If number is too large store the value as string

        if (value >= Number.MAX_SAFE_INTEGER) {
          value = attr;
        }
      } else {
        var jsonString = (0,type/* parseJsonString */.uO)(value);
        value = jsonString ? jsonString : value;
      }

      return value;
    }
    /**
     * Event handler to liste for publish binder event for two-way-binding in web components
     */
    // protected publish(name: string, newValue: any, namespace: string | null) {
    //   this.el.dispatchEvent(
    //     new CustomEvent("publish-binder-change:" + name, {
    //       detail: {
    //         name,
    //         newValue,
    //         namespace: null, // TODO
    //       },
    //     })
    //   );
    // }

    /**
     * Returns an event handler for the bindings (most on-*) inside this component.
     */

  }, {
    key: "eventHandler",
    value: function eventHandler(self) {
      // IMPORTANT this must be a function and not a Arrow Functions
      return function (context, event, binding, el) {
        if (!this || !this.call) {
          var error = new Error("[rv-".concat(binding.type, "=\"").concat(binding.keypath, "\"] Event handler \"").concat(binding.keypath, "\" not found!\""));
          console.error(binding, el);
          throw error;
        }

        this.call(self, event, binding.view.models, el);
      };
    }
    /**
     * Extra call formatter to avoid the "this" context problem
     */

  }, {
    key: "callFormatterHandler",
    value: function callFormatterHandler(self) {
      return {
        name: "call",
        read: function read(fn) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          if (!fn) {
            console.error("[".concat(self.el.tagName, "] Can not use \"call\" formatter: fn is undefined! Arguments: "), args);
            throw new Error("TypeError: fn is undefined");
          }

          return fn.apply(self, args);
        }
      };
    }
    /**
     * Extra args formatter to avoid the "this" context problem
     *
     * Sets arguments to a function without directly call them
     * @param fn The function you wish to call
     * @param args the parameters you wish to call the function with
     */

  }, {
    key: "argsFormatterHandler",
    value: function argsFormatterHandler(self) {
      return {
        name: "args",
        read: function read(fn) {
          for (var _len3 = arguments.length, fnArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            fnArgs[_key3 - 1] = arguments[_key3];
          }

          return function (event, scope, el, binding) {
            // append the event handler args to passed args
            fnArgs.push(event);
            fnArgs.push(scope);
            fnArgs.push(el);
            fnArgs.push(binding);
            return fn.apply(self, fnArgs);
          };
        }
      };
    }
    /**
     * Default custom Element method
     * Invoked when the custom element is first connected to the document's DOM.
     */

  }, {
    key: "connectedCallback",
    value: function connectedCallback() {// console.warn('connectedCallback called');
    }
    /**
     * Default custom Element method
     * Invoked when the custom element is disconnected from the document's DOM.
     */

  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      if (this.bound && this.view) {// IMPORTANT ROUTE FIXME, if we unbind the component then it will no longer work if it is retrieved from the cache and the connectedCallback is called
        // because the riba attributes are removed. We need a solution for that, maybe we do not remove the attributes or we recreate the attributes
        // See view bind / unbind methods for that.
        // only unbind if cache is not enabled?
        // this.unbind();
      }

      if (this.attributeObserverFallback) {
        this.attributeObserverFallback.disconnect();
      }

      this.removeEventListenerForRibaParent();
      this.removeEventListenersForRibaAttributes(this.observedAttributes);
    }
    /**
     * Default custom Element method
     * Invoked when one of the custom element's attributes is added, removed, or changed.
     * @param attributeName
     * @param oldValue
     * @param newValue
     * @param namespace
     */

  }, {
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      // this.debug("attributeChangedCallback", attributeName, newValue);
      if (this.observedAttributesToCheck && this.observedAttributesToCheck[attributeName]) {
        this.observedAttributesToCheck[attributeName].initialized = true;
      }

      newValue = this.parseAttribute(newValue);
      var parsedAttributeName = (0,type/* camelCase */.eV)(attributeName);

      if (this.scope && this.scope[parsedAttributeName]) {
        oldValue = this.scope[parsedAttributeName];
      } // automatically inject observed attributes to view scope


      this.scope[parsedAttributeName] = newValue; // call custom attribute changed callback with parsed values

      this.parsedAttributeChangedCallback(parsedAttributeName, oldValue, newValue, namespace);
      this.bindIfReady();
    }
    /**
     * Similar to attributeChangedCallback but attribute arguments are already parsed as they are stored in the scope
     * @param attributeName
     * @param oldValue
     * @param newValue
     * @param namespace
     */

  }, {
    key: "parsedAttributeChangedCallback",
    value: function parsedAttributeChangedCallback(attributeNames, oldValue, newValue, namespace) {// console.warn('parsedAttributeChangedCallback called', attributeNames, oldValue, newValue, namespace);
    }
    /**
     * Default custom Element method
     * Invoked when one of the custom element's attributes is added, removed, or changed.
     * Note: Not supported on polyfill: https://github.com/webcomponents/custom-elements#known-bugs-and-limitations
     * @param oldDocument
     * @param newDocument
     */

  }, {
    key: "adoptedCallback",
    value: function adoptedCallback(oldDocument, newDocument) {// console.warn('adoptedCallback called', oldDocument, newDocument);
    }
  }, {
    key: "loadTemplate",
    value: function () {
      var _loadTemplate = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        var _this4 = this;

        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this.templateLoaded === true)) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", null);

              case 2:
                if (this.checkRequiredAttributes()) {
                  _context3.next = 5;
                  break;
                }

                this.debug("Not all required attributes are set to load the template");
                return _context3.abrupt("return", null);

              case 5:
                this.templateLoaded = true; // if innerHTML is null this component uses the innerHTML which he already has!

                return _context3.abrupt("return", Promise.resolve(this.template()).then(function (template) {
                  if (template instanceof HTMLElement) {
                    _this4.el.innerHTML = "";

                    _this4.el.appendChild(template);
                  } else if (template !== null) {
                    _this4.el.innerHTML = template;
                  }

                  return template;
                })["catch"](function (error) {
                  console.error(error);
                  _this4.templateLoaded = false;
                  return null;
                }));

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function loadTemplate() {
        return _loadTemplate.apply(this, arguments);
      }

      return loadTemplate;
    }()
  }, {
    key: "bind",
    value: function () {
      var _bind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee4() {
        var _this5 = this;

        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this.bound === true)) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt("return", this.view);

              case 2:
                if (this.checkRequiredAttributes()) {
                  _context4.next = 5;
                  break;
                }

                this.debug("Not all required attributes are set for bind");
                return _context4.abrupt("return");

              case 5:
                this.bound = true;
                _context4.next = 8;
                return this.beforeBind().then(function () {
                  if (!_this5.el) {
                    throw new Error("this.el is not defined");
                  }

                  _this5.debug("Start to bind Riba");

                  _this5.riba = new riba/* Riba */.D();

                  var viewOptions = _this5.riba.getViewOptions({
                    handler: _this5.eventHandler(_this5),
                    formatters: {
                      call: _this5.callFormatterHandler(_this5),
                      args: _this5.argsFormatterHandler(_this5)
                    }
                  });

                  _this5.view = new view/* View */.G(Array.prototype.slice.call(_this5.el.childNodes), _this5.scope, viewOptions);
                  _this5.scope = _this5.view.models;

                  _this5.view.bind();

                  return _this5.view;
                }).then(function () {
                  return _this5.afterBind();
                })["catch"](function (error) {
                  _this5.bound = false;
                  console.error(error);
                });

              case 8:
                return _context4.abrupt("return", this.view);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function bind() {
        return _bind.apply(this, arguments);
      }

      return bind;
    }()
  }, {
    key: "unbind",
    value: function () {
      var _unbind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee5() {
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (this.view) {
                  this.bound = false;
                  this.view.unbind();
                  delete this.view;
                }

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function unbind() {
        return _unbind.apply(this, arguments);
      }

      return unbind;
    }()
  }, {
    key: "build",
    value: function () {
      var _build = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee6() {
        return regenerator_default().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (this.view) {
                  this.view.build();
                }

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function build() {
        return _build.apply(this, arguments);
      }

      return build;
    }()
  }, {
    key: "beforeBind",
    value: function () {
      var _beforeBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee7() {
        return regenerator_default().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.debug("beforeBind", this.scope);

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function beforeBind() {
        return _beforeBind.apply(this, arguments);
      }

      return beforeBind;
    }()
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee8() {
        return regenerator_default().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.debug("afterBind", this.scope);

              case 1:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "beforeTemplate",
    value: function () {
      var _beforeTemplate = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee9() {
        return regenerator_default().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      function beforeTemplate() {
        return _beforeTemplate.apply(this, arguments);
      }

      return beforeTemplate;
    }()
  }, {
    key: "afterTemplate",
    value: function () {
      var _afterTemplate = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee10(template) {
        return regenerator_default().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function afterTemplate(_x2) {
        return _afterTemplate.apply(this, arguments);
      }

      return afterTemplate;
    }()
  }, {
    key: "onReady",
    value: function () {
      var _onReady = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee11() {
        return regenerator_default().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      function onReady() {
        return _onReady.apply(this, arguments);
      }

      return onReady;
    }()
  }, {
    key: "askForRibaParent",
    value: function askForRibaParent() {
      this.el.dispatchEvent(new CustomEvent("ask-for-parent"));
    }
  }, {
    key: "askForRibaAttribute",
    value: function askForRibaAttribute(attrName) {
      //TODO Fix if co-* has different keypath as attribute name
      var eventName = "ask-for-attribute:" + attrName; // this.debug("Trigger " + eventName);

      this.el.dispatchEvent(new CustomEvent(eventName));
    }
  }, {
    key: "askForRibaAttributes",
    value: function askForRibaAttributes(observedAttributes) {
      var _iterator2 = _createForOfIteratorHelper(observedAttributes),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var observedAttribute = _step2.value;
          this.askForRibaAttribute(observedAttribute);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "onParentChanged",
    value: function onParentChanged(event) {
      // this.debug("onParentChanged", event.detail);
      this.scope.$parent = event.detail;
    }
  }, {
    key: "onRibaAttributeChanged",
    value: function onRibaAttributeChanged(event) {
      var data = event.detail;
      this.debug("onRibaAttributeChanged", data);
      var oldValue = this.scope[data.name];
      this.attributeChangedCallback(data.name, oldValue, data.newValue, data.namespace);
    }
  }, {
    key: "listenForRibaParent",
    value: function listenForRibaParent() {
      this.el.addEventListener("parent", this.onParentChanged.bind(this));
    }
  }, {
    key: "removeEventListenerForRibaParent",
    value: function removeEventListenerForRibaParent() {
      this.el.removeEventListener("parent", this.onParentChanged.bind(this));
    }
  }, {
    key: "listenForRibaAttribute",
    value: function listenForRibaAttribute(attrName) {
      var eventName = "attribute:" + attrName;
      this.debug("Listen for " + eventName);
      this.el.addEventListener(eventName, this.onRibaAttributeChanged.bind(this));
    }
  }, {
    key: "removeEventListenerForRibaAttribute",
    value: function removeEventListenerForRibaAttribute(attrName) {
      this.el.removeEventListener("attribute:" + attrName, this.onRibaAttributeChanged.bind(this));
    }
  }, {
    key: "listenForRibaAttributes",
    value: function listenForRibaAttributes(observedAttributes) {
      var _iterator3 = _createForOfIteratorHelper(observedAttributes),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var observedAttribute = _step3.value;
          this.listenForRibaAttribute(observedAttribute);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "removeEventListenersForRibaAttributes",
    value: function removeEventListenersForRibaAttributes(observedAttributes) {
      var _iterator4 = _createForOfIteratorHelper(observedAttributes),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var observedAttribute = _step4.value;
          this.removeEventListenerForRibaAttribute(observedAttribute);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "initRibaAttributeObserver",
    value: function initRibaAttributeObserver(observedAttributes) {
      this.listenForRibaParent();
      this.listenForRibaAttributes(observedAttributes);
      this.askForRibaParent();
      this.askForRibaAttributes(observedAttributes);
    }
    /**
     * Load all attributes and calls the attributeChangedCallback for each attribute.
     * This method is used for fallback implementations, normally the browser calls the attributeChangedCallback for you
     */

  }, {
    key: "loadAttributes",
    value: function loadAttributes(observedAttributes) {
      var attributes = this.el.attributes;

      for (var i in attributes) {
        var attribute = attributes[i];
        var name = attribute.nodeName;

        if (observedAttributes.indexOf(name) !== -1) {
          var newValue = attribute.nodeValue;
          this.attributeChangedCallback(name, undefined, newValue, null);
        }
      }
    }
    /**
     * Event handler to listen attribute change event as fallback for MutationObserver
     */

  }, {
    key: "initAttributeObserver",
    value: function initAttributeObserver(observedAttributes) {
      var _this6 = this;

      this.loadAttributes(observedAttributes);
      this.observedAttributes = observedAttributes;

      if (window.customElements && !this._fallback && !window.forceComponentFallback) {// use native implementaion
        // this.debug("initAttributeObserver: Use native implementaion");
      } else {
        if (window.MutationObserver) {
          // use MutationObserver as fallback
          this.attributeObserverFallback = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
              if (mutation.type === "attributes") {
                if (mutation.attributeName) {
                  // if this attribute is a watched attribute
                  if (observedAttributes.indexOf(mutation.attributeName) !== -1) {
                    var newValue = _this6.el.getAttribute(mutation.attributeName);

                    _this6.attributeChangedCallback(mutation.attributeName, mutation.oldValue, newValue, mutation.attributeNamespace);
                  }
                }
              }
            });
          });
          this.attributeObserverFallback.observe(this.el, {
            attributes: true
          });
        }
      }
    }
  }]);

  return Component;
}(FakeHTMLElement);

defineProperty_default()(Component, "tagName", void 0);

/***/ }),

/***/ 4164:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "w": () => /* reexport safe */ _component_component__WEBPACK_IMPORTED_MODULE_1__.w
/* harmony export */ });
/* harmony import */ var _services_component_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8549);
/* harmony import */ var _component_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6598);



/***/ }),

/***/ 2580:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "VideoComponent": () => /* reexport */ VideoComponent
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(6525);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(2205);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(8585);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(9754);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/component/component.ts + 2 modules
var component = __webpack_require__(6598);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/components/video/video.component.ts











function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var VideoComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(VideoComponent, _Component);

  var _super = _createSuper(VideoComponent);

  createClass_default()(VideoComponent, [{
    key: "muted",
    get: function get() {
      return this.video && this.video.muted;
    },
    set: function set(muted) {
      this.video.muted = muted;
      this.scope.muted = this.video.muted;

      if (muted) {
        this.video.setAttribute("muted", "");
      } else {
        this.video.removeAttribute("muted");
      }
    }
    /**
     * * 1.0 is highest volume (100%. This is default)
     * * 0.5 is half volume (50%)
     * * 0.0 is silent (same as mute)
     */

  }, {
    key: "volume",
    get: function get() {
      return this.video ? this.video.volume : 0;
    },
    set: function set(volume) {
      this.video.volume = volume;
      this.scope.volume = this.video.volume;
    }
  }, {
    key: "loop",
    get: function get() {
      return this.video && this.video.loop;
    },
    set: function set(loop) {
      this.video.loop = loop;
      this.scope.loop = this.video.loop;

      if (loop) {
        this.video.setAttribute("loop", "");
      } else {
        this.video.removeAttribute("loop");
      }
    }
  }, {
    key: "controls",
    get: function get() {
      return this.video && this.video.controls;
    },
    set: function set(controls) {
      this.video.controls = controls;
      this.scope.controls = this.video.controls;

      if (controls) {
        this.video.setAttribute("controls", ""); // show controls

        this.video.dispatchEvent(new Event("mouseover"));
        this.video.dispatchEvent(new Event("mouseenter"));
        this.video.dispatchEvent(new Event("mousemove"));
      } else {
        this.video.removeAttribute("controls");
      }
    }
  }, {
    key: "currentTime",
    get: function get() {
      return this.video ? this.video.currentTime : 0;
    },
    set: function set(currentTime) {
      this.video.currentTime = currentTime;
      this.scope.currentTime = this.video.currentTime;
    }
    /**
     * @readonly
     */

  }, {
    key: "paused",
    get: function get() {
      return this.video && this.video.paused;
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ["video-src", "autoplay-on-min-buffer", "autoplay-media-query"];
    }
  }]);

  function VideoComponent(element) {
    var _this;

    classCallCheck_default()(this, VideoComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", true);

    defineProperty_default()(assertThisInitialized_default()(_this), "alreadyStartedPlaying", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "wasPaused", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "video", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      // properties
      muted: _this.muted,
      volume: _this.volume,
      loop: _this.loop,
      controls: _this.controls,
      currentTime: _this.currentTime,
      videoSrc: undefined,
      autoplayOnMinBuffer: 0,
      autoplayMediaQuery: "",

      /**
       * @readonly
       */
      paused: _this.paused,
      // methods
      toggleMute: _this.toggleMute,
      toggleControls: _this.toggleControls,
      play: _this.play,
      pause: _this.pause,
      togglePlay: _this.togglePlay
    });

    var video = _this.el.querySelector("video");

    _this.video = video;
    return _this;
  }

  createClass_default()(VideoComponent, [{
    key: "toggleMute",
    value: function toggleMute() {
      this.muted = !this.muted;
    }
  }, {
    key: "toggleControls",
    value: function toggleControls() {
      this.controls = !this.controls;
    }
  }, {
    key: "play",
    value: function play() {
      this.video.play();
    }
  }, {
    key: "pause",
    value: function pause() {
      this.video.pause();
    }
  }, {
    key: "togglePlay",
    value: function togglePlay() {
      if (this.paused) {
        this.play();
      } else {
        this.pause();
      }
    }
  }, {
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(VideoComponent.prototype), "connectedCallback", this).call(this);

      var video = this.el.querySelector("video");

      if (!video) {
        throw new Error("The video child element is required!");
      }

      this.video = video;
      this.scope.muted = this.video.muted;
      this.scope.volume = this.video.volume;
      this.scope.loop = this.video.loop;
      this.scope.controls = this.video.controls;
      this.scope.currentTime = this.video.currentTime;
      this.scope.paused = this.video.paused;
      this.init(VideoComponent.observedAttributes);
    }
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        var sourceElement, mediaQueryList;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return get_default()(getPrototypeOf_default()(VideoComponent.prototype), "afterBind", this).call(this);

              case 2:
                //video-src attribute
                if (this.scope.videoSrc) {
                  sourceElement = this.video.querySelector("source");

                  if (!sourceElement) {
                    sourceElement = document.createElement("source");
                    this.video.appendChild(sourceElement);
                  }

                  sourceElement.setAttribute("src", this.scope.videoSrc);
                }

                if (this.scope.autoplayMediaQuery) {
                  //autoplay-media-query attribute
                  mediaQueryList = window.matchMedia(this.scope.autoplayMediaQuery);
                  mediaQueryList.addEventListener("change", this.onMediaQueryListEvent.bind(this));

                  if (mediaQueryList.matches) {
                    this.autoplay();
                  }
                } else if (this.scope.autoplayOnMinBuffer) {
                  //autoplay-on-min-buffer attribute
                  this.autoplay();
                }

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
    /**
     * Loads the media and checks if the autoplay-on-min-buffer is set
     */

  }, {
    key: "autoplay",
    value: function autoplay() {
      if (this.scope.autoplayOnMinBuffer) {
        this.video.addEventListener("progress", this.onVideoProgress.bind(this));
        this.video.addEventListener("canplaythrough", this.forceAutoplay.bind(this) //trust browser more than ourselves
        );
        this.forceLoad();
      } else {
        this.forceAutoplay();
      }
    }
  }, {
    key: "forceLoad",
    value: function forceLoad() {
      this.video.setAttribute("preload", "auto");
      this.video.load();
    }
    /**
     * Forces autoplay without checking for the autoplay-on-min-buffer event
     */

  }, {
    key: "forceAutoplay",
    value: function forceAutoplay() {
      if (!this.alreadyStartedPlaying) {
        this.alreadyStartedPlaying = true;
        this.video.muted = true; //video is required to be muted if autoplay video is supposed to autoplay

        this.forceLoad();
        this.video.play();
      }
    }
    /*********************
     * Event listener start
     *********************/

  }, {
    key: "onMediaQueryListEvent",
    value: function onMediaQueryListEvent(event) {
      if (event.matches) {
        //if mediaquery matches, play video or start autoplay
        if (this.alreadyStartedPlaying) {
          if (!this.wasPaused) {
            this.play();
          }
        } else {
          this.autoplay();
        }
      } else {
        //if mediaquery stops matching, pause video if not already paused
        this.wasPaused = this.video.paused;
        this.pause();
      }
    }
  }, {
    key: "onVideoProgress",
    value: function onVideoProgress() {
      if (this.alreadyStartedPlaying) return;

      if (isNaN(this.video.duration)) {
        console.warn("Video duration is NaN");
        return;
      } //calculate already buffered amount


      var bufferedAmount = 0;

      for (var i = 0; i < this.video.buffered.length; i++) {
        bufferedAmount += this.video.buffered.end(i) - this.video.buffered.start(i);
      } //if buffered amount is over given percentage in scope, force autoplay


      if (bufferedAmount / this.video.duration > this.scope.autoplayOnMinBuffer) {
        this.forceAutoplay();
      }
    }
    /*********************
     * Event listener end
     *********************/

  }, {
    key: "init",
    value: function () {
      var _init = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2(observedAttributes) {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", get_default()(getPrototypeOf_default()(VideoComponent.prototype), "init", this).call(this, observedAttributes).then(function (view) {
                  return view;
                }));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }() // deconstructor

  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      get_default()(getPrototypeOf_default()(VideoComponent.prototype), "disconnectedCallback", this).call(this);
    }
  }, {
    key: "template",
    value: function template() {
      return null;
    }
  }]);

  return VideoComponent;
}(component/* Component */.w);

defineProperty_default()(VideoComponent, "tagName", "rv-video");
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/components/index.ts
// Do not export abstract components: export { TemplatesComponent } from "./templates/templates.component";


/***/ }),

/***/ 1381:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => /* binding */ coreModule
/* harmony export */ });
/* harmony import */ var _binders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47);
/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5293);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8192);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2580);
/* harmony import */ var _adapters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6405);





var coreModule = {
  formatters: _formatters__WEBPACK_IMPORTED_MODULE_1__,
  binders: _binders__WEBPACK_IMPORTED_MODULE_0__,
  services: _services__WEBPACK_IMPORTED_MODULE_2__,
  components: _components__WEBPACK_IMPORTED_MODULE_3__,
  adapters: _adapters__WEBPACK_IMPORTED_MODULE_4__
};
window.coreModule = coreModule;


/***/ }),

/***/ 5293:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "MapFormatter": () => /* reexport */ MapFormatter,
  "andFormatter": () => /* reexport */ andFormatter,
  "appendFormatter": () => /* reexport */ appendFormatter,
  "argsFormatter": () => /* reexport */ argsFormatter,
  "betweenFormatter": () => /* reexport */ betweenFormatter,
  "booleanFormatter": () => /* reexport */ booleanFormatter,
  "callFormatter": () => /* reexport */ callFormatter,
  "containsFormatter": () => /* reexport */ containsFormatter,
  "debugFormatter": () => /* reexport */ debugFormatter,
  "defaultFormatter": () => /* reexport */ defaultFormatter,
  "digitsFormatter": () => /* reexport */ digitsFormatter,
  "dividedByFormatter": () => /* reexport */ dividedByFormatter,
  "downcaseFormatter": () => /* reexport */ downcaseFormatter,
  "egtFormatter": () => /* reexport */ egtFormatter,
  "eltFormatter": () => /* reexport */ eltFormatter,
  "emptyFormatter": () => /* reexport */ emptyFormatter,
  "eqFormatter": () => /* reexport */ eqFormatter,
  "evenFormatter": () => /* reexport */ evenFormatter,
  "filledFormatter": () => /* reexport */ filledFormatter,
  "firstFormatter": () => /* reexport */ firstFormatter,
  "gcdFormatter": () => /* reexport */ gcdFormatter,
  "getFormatter": () => /* reexport */ getFormatter,
  "gtFormatter": () => /* reexport */ gtFormatter,
  "handleizeFormatter": () => /* reexport */ handleizeFormatter,
  "isArrayFormatter": () => /* reexport */ isArrayFormatter,
  "isBooleanFormatter": () => /* reexport */ isBooleanFormatter,
  "isDefinedFormatter": () => /* reexport */ isDefinedFormatter,
  "isIntegerFormatter": () => /* reexport */ isIntegerFormatter,
  "isLastFormatter": () => /* reexport */ isLastFormatter,
  "isNumberFormatter": () => /* reexport */ isNumberFormatter,
  "isObjectFormatter": () => /* reexport */ isObjectFormatter,
  "isStringFormatter": () => /* reexport */ isStringFormatter,
  "isUndefinedFormatter": () => /* reexport */ isUndefinedFormatter,
  "jsonFormatter": () => /* reexport */ jsonFormatter,
  "lastFormatter": () => /* reexport */ lastFormatter,
  "ltFormatter": () => /* reexport */ ltFormatter,
  "matchFormatter": () => /* reexport */ matchFormatter,
  "minusFormatter": () => /* reexport */ minusFormatter,
  "moduloFormatter": () => /* reexport */ moduloFormatter,
  "neFormatter": () => /* reexport */ neFormatter,
  "notFormatter": () => /* reexport */ notFormatter,
  "numberFormatFormatter": () => /* reexport */ numberFormatFormatter,
  "orFormatter": () => /* reexport */ orFormatter,
  "padEndFormatter": () => /* reexport */ padEndFormatter,
  "padStartFormatter": () => /* reexport */ padStartFormatter,
  "parseFormatter": () => /* reexport */ parseFormatter,
  "pluralizeFormatter": () => /* reexport */ pluralizeFormatter,
  "plusFormatter": () => /* reexport */ plusFormatter,
  "prependFormatter": () => /* reexport */ prependFormatter,
  "randomFormatter": () => /* reexport */ randomFormatter,
  "rangeFormatter": () => /* reexport */ rangeFormatter,
  "replaceFirstFormatter": () => /* reexport */ replaceFirstFormatter,
  "replaceFormatter": () => /* reexport */ replaceFormatter,
  "setFormatter": () => /* reexport */ setFormatter,
  "sizeFormatter": () => /* reexport */ sizeFormatter,
  "sliceFormatter": () => /* reexport */ sliceFormatter,
  "stringFormatter": () => /* reexport */ stringFormatter,
  "stripFormatter": () => /* reexport */ stripFormatter,
  "stripHtmlFormatter": () => /* reexport */ stripHtmlFormatter,
  "timesFormatter": () => /* reexport */ timesFormatter,
  "toDecimalFormatter": () => /* reexport */ toDecimalFormatter,
  "toFloatFormatter": () => /* reexport */ toFloatFormatter,
  "toIntegerFormatter": () => /* reexport */ toIntegerFormatter,
  "toNumberFormatter": () => /* reexport */ toNumberFormatter,
  "toStringFormatter": () => /* reexport */ toStringFormatter,
  "unevenFormatter": () => /* reexport */ unevenFormatter,
  "upcaseFormatter": () => /* reexport */ upcaseFormatter
});

// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/contains.formatter.ts

/**
 * Returns true if an object, array or string contains an object, property or substring.
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

var containsFormatter = {
  name: "contains",
  read: function read(value, attr, search) {
    if ((0,type/* isString */.HD)(value)) {
      return value.indexOf(attr) > -1;
    } else if ((0,type/* isArray */.kJ)(value)) {
      if ((0,type/* isDefined */.$K)(attr)) {
        if ((0,type/* isDefined */.$K)(search)) {
          return value[attr] === search;
        } else {
          return value.indexOf(attr) !== -1;
        }
      }
    } else if ((0,type/* isObject */.Kn)(value)) {
      if ((0,type/* isDefined */.$K)(attr)) {
        if ((0,type/* isDefined */.$K)(search)) {
          return value[attr] === search;
        } else {
          return Object.keys(value).indexOf(attr) !== -1;
        }
      }
    }

    return false;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/size.formatter.ts
/**
 * Returns the size of a string (the number of characters) or an array (the number of elements).
 * @see https://help.shopify.com/themes/liquid/filters/array-filters#size
 */
var sizeFormatter = {
  name: "size",
  read: function read(value) {
    return value && value.length ? value.length : 0;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/empty.formatter.ts

var emptyFormatter = {
  name: "empty",
  read: function read(a) {
    return sizeFormatter.read(a) <= 0;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/get.formatter.ts

/**
 * Get property of object or array
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

var getFormatter = {
  name: "get",
  read: function read(value, key) {
    if ((0,type/* isObject */.Kn)(value) || (0,type/* isArray */.kJ)(value)) {
      return value[key];
    }

    if ((0,type/* isString */.HD)(value)) {
      if ((0,type/* isNumber */.hj)(key)) {
        return value.charAt(key);
      }
    }

    return null;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/first.formatter.ts

/**
 * Array formatter to get the first element of an array
 */

var firstFormatter = {
  name: "first",
  read: function read(value) {
    return getFormatter.read(value, 0);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/is-last.formatter.ts
/**
 * Returns true if value index is the last index of the array. Returns false if it is not the last index.
 * ```
 *  <div rv-each-image="product.images" rv-hide="product.images | last %image%"></div>
 * ```
 * @see https://help.shopify.com/themes/liquid/objects/for-loops#forloop-last
 */
var isLastFormatter = {
  name: "isLast",
  read: function read(array, i) {
    return array.length === i + 1;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/last.formatter.ts

/**
 * Array formatter to get the last element of an array
 */

var lastFormatter = {
  name: "last",
  read: function read(array) {
    return getFormatter.read(array, array.length - 1);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/random.formatter.ts

/**
 * Gets back random value of array
 * @example <div rv-add-class='"["col-2", "col-3", "col-4", "col-5", "col-6"]" | parse | random'>
 *
 * Or gets back a randon number
 * Random number between 0 and 6:
 * @example <div rv-add-class='6 | random'>
 * Random number between 1 and 6:
 * @example <div rv-add-class='6 | random 1'>
 */

var randomFormatter = {
  name: "random",
  read: function read(arrayOrMaxNumber) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    // If is array
    if ((0,type/* isArray */.kJ)(arrayOrMaxNumber)) {
      return arrayOrMaxNumber[Math.floor(Math.random() * arrayOrMaxNumber.length)];
    } // If is number


    if ((0,type/* isNumber */.hj)(arrayOrMaxNumber)) {
      var max = arrayOrMaxNumber;
      return Math.floor(Math.random() * (max - min + 1) + min);
    }

    return null;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/range.formatter.ts

/**
 * Array formatter to get a subarray from array
 */

var rangeFormatter = {
  name: "range",
  read: function read(arr, start, end) {
    start = Number((0,type/* isNumber */.hj)(start) ? start : 0);
    end = Number((0,type/* isNumber */.hj)(end) ? end : arr.length - 1);

    if (end > arr.length - 1) {
      end = arr.length - 1;
    }

    if (start > end) {
      return [];
    }

    return arr.slice(Number(start || 0), 1 + end);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/set.formatter.ts

/**
 * Sets property of object, array or value
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

var setFormatter = {
  name: "set",
  read: function read(obj, key, value) {
    // the key is the value if value is not set
    if (!value) {
      value = key;
    }

    if ((0,type/* isObject */.Kn)(obj) || (0,type/* isArray */.kJ)(obj)) {
      obj[key] = value;
    } else {
      obj = value;
    }

    return obj;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/array/index.ts
// property / object / array formatters










// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/and.formatter.ts
/**
 * a && b
 */
var andFormatter = {
  name: "and",
  read: function read(a, b) {
    return a && b;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/between.formatter.ts
/**
 * a >= b && a <= c
 */
var betweenFormatter = {
  name: "between",
  read: function read(num) {
    return num >= (arguments.length <= 1 ? undefined : arguments[1]) && num <= (arguments.length <= 2 ? undefined : arguments[2]);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/egt.formatter.ts
/**
 * equal or greater than
 * a >= b
 */
var egtFormatter = {
  name: "egt",
  read: function read(a, b) {
    return a >= b;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/eq.formatter.ts
/**
 * a === b
 */
var eqFormatter = {
  name: "eq",
  read: function read(a, b) {
    return a === b;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/gt.formatter.ts
/**
 * greater than
 * a > b
 */
var gtFormatter = {
  name: "gt",
  read: function read(a, b) {
    return a > b;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/ne.formatter.ts
/**
 * a !== b
 */
var neFormatter = {
  name: "ne",
  read: function read(a, b) {
    return a !== b;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/lt.formatter.ts
/**
 * lower than
 * a < b
 */
var ltFormatter = {
  name: "lt",
  read: function read(a, b) {
    return a < b;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/elt.formatter.ts
/**
 * euqal or lower than
 * a <= b
 */
var eltFormatter = {
  name: "elt",
  read: function read(a, b) {
    return a <= b;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/or.formatter.ts
/**
 * a || b
 */
var orFormatter = {
  name: "or",
  read: function read(a, b) {
    return a || b;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/not.formatter.ts
/**
 * !a
 */
var notFormatter = {
  name: "not",
  read: function read(a) {
    return !a;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/compare/index.ts
/**
 * compare functions
 * Add useful general-purpose formatters for Rivets.js
 * Some formatters from cart.js and rivetsjs-stdlib
 * @see https://github.com/discolabs/cartjs/
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib
 * @see https://github.com/JumpLinkNetwork/shopify-productjs
 */










// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/plus.formatter.ts
/**
 * Adds a number to an value.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#plus
 */
var plusFormatter = {
  name: "plus",
  read: function read(a, b) {
    return Number(a) + Number(b);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/minus.formatter.ts
/**
 * Subtracts a number from an output.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#minus
 */
var minusFormatter = {
  name: "minus",
  read: function read(a, b) {
    return Number(a) - Number(b);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/times.formatter.ts
/**
 * Multiplies an value by a number.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#times
 */
var timesFormatter = {
  name: "times",
  read: function read(a, b) {
    return Number(a) * Number(b);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/divided-by.formatter.ts
/**
 * Divides an output by a number. The output is rounded down to the nearest integer.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#divided_by
 */
var dividedByFormatter = {
  name: "dividedBy",
  read: function read(a, b) {
    return Number(a) / Number(b);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/modulo.formatter.ts
/**
 * Divides an value by a number and returns the remainder.
 * @see https://help.shopify.com/themes/liquid/filters/math-filters#modulo
 */
var moduloFormatter = {
  name: "modulo",
  read: function read(a, b) {
    return Number(a) % Number(b);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/gcd.formatter.ts
/**
 * Greatest common divisor (GCD) useful to calculate a ratio
 * @see https://stackoverflow.com/a/1186465/1465919
 */
var _gcd = function _gcd(a, b) {
  return b === 0 ? a : _gcd(b, a % b);
};

var gcdFormatter = {
  name: "gcd",
  read: _gcd
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/even.formatter.ts
/**
 * Check if a number is even or not
 */
var evenFormatter = {
  name: "even",
  read: function read(num) {
    return num % 2 === 0;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/uneven.formatter.ts
var unevenFormatter = {
  name: "uneven",
  read: function read(num) {
    return num % 2 !== 0;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/digits.formatter.ts

/**
 * Just get the digits of a string, useful to remove px from css value
 * @see http://stackoverflow.com/a/1100653/1465919
 */

var digitsFormatter = {
  name: "digits",
  read: function read(str) {
    if ((0,type/* isNumber */.hj)(str)) {
      return str;
    }

    return (0,type/* justDigits */.XM)(str);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/math/index.ts
// math formatters









// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/special/args.formatter.ts
/**
 * Sets arguments to a function without directly call them
 * ```html
 * <button rv-on-click="sum | args 1 2"></button>
 * ```
 * @param fn The function the event handler should call
 * @param fnArgs the parameters you wish to get called the function with
 */
var argsFormatter = {
  name: "args",
  read: function read(fn) {
    var _this = this;

    for (var _len = arguments.length, fnArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      fnArgs[_key - 1] = arguments[_key];
    }

    return function (event, scope, el, binding) {
      // append the event handler args to passed args
      fnArgs.push(event);
      fnArgs.push(scope);
      fnArgs.push(el);
      fnArgs.push(binding);
      return fn.apply(_this, fnArgs);
    };
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/special/debug.formatter.ts
var debugFormatter = {
  name: "debug",
  read: function read(toPrint) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "debug";
    console[level](toPrint);
    return toPrint;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/special/default.formatter.ts

/**
 * Sets a default value if the first value is not set
 * @see https://gist.github.com/der-On/cdafe908847e2b882691
 */

var defaultFormatter = {
  name: "default",
  read: function read(value, defaultValue) {
    if ((0,type/* isDefined */.$K)(value)) {
      if ((0,type/* isString */.HD)(value)) {
        if (value.length > 0) {
          return value;
        } else {
          return defaultValue;
        }
      }

      return value;
    }

    return defaultValue;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/special/call.formatter.ts
// babel misinterprets the "this" fake parameter, so we define it in this interfaces

/**
 * Calls a function with arguments
 * @param fn The function you wish to call
 * @param args the parameters you wish to call the function with
 */
var callFormatter = {
  name: "call",
  read: function read(fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return fn.apply(this, args);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/special/map.formatter.ts
/* eslint-disable prefer-spread */

/* eslint-disable prefer-rest-params */

/**
 * Calls a method on the given object. The first parameters defines the object and the second the methodname.
 * Target will be passed as the first argument to the method.
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib#map
 * @example
 * ```html
 * <span rv-text="10 | map 'Math' 'sin'"></span>
 * ```
 * @returns e.g. as in the example: `<span>-0.5440211108893699</span>`
 */
var MapFormatter = {
  name: "map",

  /**
   * Calls a method on the given object. The first parameters defines the object and the second the methodname.
   * Target will be passed as the first argument to the method.
   * @see https://github.com/matthieuriolo/rivetsjs-stdlib#map
   * @example
   * ```html
   * <span rv-text="10 | map 'Math' 'sin'"></span>
   * ```
   * @returns e.g. as in the example: `<span>-0.5440211108893699</span>`
   * @param target
   * @param obj
   * @param prop
   */
  read: function read(target, obj, prop) {
    var args = Array.prototype.slice.call(arguments);
    args.splice(1, 2);
    return obj[prop].apply(obj, args);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/special/index.ts
// special helper formatters





// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/append.formatter.ts
/**
 * Appends characters to a string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#append
 */
var appendFormatter = {
  name: "append",
  read: function read(a, b) {
    return a + b;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/downcase.formatter.ts
/**
 * Converts a string into lowercase.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#downcase
 */
var downcaseFormatter = {
  name: "downcase",
  read: function read(str) {
    return str.toLowerCase();
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/filled.formatter.ts


/**
 * Check if value is a string and not empty
 */

var filledFormatter = {
  name: "filled",
  read: function read(str) {
    return (0,type/* isString */.HD)(str) && !emptyFormatter.read(str.replace(/\s/g, ""));
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/strip.formatter.ts
/**
 * Strips tabs, spaces, and newlines (all whitespace) from the left and right side of a string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#strip
 */
var stripFormatter = {
  name: "strip",
  read: function read(str) {
    return str.trim();
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/handleize.formatter.ts


var strip = stripFormatter.read;
var downcase = downcaseFormatter.read;
/**
 * Formats a string into a handle.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#handle-handleize
 */

var handleizeFormatter = {
  name: "handleize",
  read: function read(str) {
    str = strip(str);
    str = str.replace(/[^\w\s]/gi, ""); // http://stackoverflow.com/a/4374890

    str = downcase(str);
    return str.replace(/ /g, "-");
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/match.formatter.ts
var matchFormatter = {
  name: "match",
  read: function read(a, regexp, flags) {
    if (!a || !regexp) {
      return false;
    }

    return a.match(new RegExp(regexp, flags));
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/pad-start.formatter.ts
/**
 * The padStart formatter pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.
 * The padding is applied from the start of the current string.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
 */
var padStartFormatter = {
  name: "padStart",

  /**
   * The padStart formatter pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.
   * The padding is applied from the start of the current string.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
   * @param target
   * @param length The length of the resulting string once the current `str` has been padded. If the value is less than `str.length`, then `str` is returned as-is.
   * @param padString The string to pad the current `str` with. If `padString` is too long to stay within the `targetLength`, it will be truncated from the end. The default value is `" "` (`U+0020 'SPACE'`).
   */
  read: function read(target) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "0";
    return target.padStart(length, padString);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/pad-end.formatter.ts
/**
 * The padEnd formatters pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length.
 * The padding is applied from the end of the current string.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
 */
var padEndFormatter = {
  name: "padEnd",

  /**
   *
   * The padEnd formatters pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length.
   * The padding is applied from the end of the current string.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
   *
   * @param target
   * @param length The length of the resulting string once the current `str` has been padded. If the value is lower than `str.length`, the current string will be returned as-is.
   * @param padString The string to pad the current `str` with. If `padString` is too long to stay within `targetLength`, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is " " (`U+0020`).
   */
  read: function read(target) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var padString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "0";
    return target.padEnd(length, padString);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/to-integer.formatter.ts
/**
 * Returns the integer representation of the given target.
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib/blob/master/src/rivetsstdlib.js#L128
 */
var toIntegerFormatter = {
  name: "toInteger",

  /**
   * Returns the integer representation of the given target.
   * @param target
   */
  read: function read(target) {
    var ret = parseInt(target * 1, 10);
    return isNaN(ret) ? 0 : ret;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/to-float.formatter.ts
/**
 * Returns the float representation of the given target
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib/blob/master/src/rivetsstdlib.js#L133
 */
var toFloatFormatter = {
  name: "toFloat",

  /**
   * Returns the integer representation of the given target.
   * @param target
   */
  read: function read(target) {
    var ret = parseFloat(target * 1.0);
    return isNaN(ret) ? 0.0 : ret;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/to-decimal.formatter.ts


var toDecimalFormatter = {
  name: "toDecimal",
  read: function read(target) {
    if (!toIntegerFormatter.read) {
      throw new Error("toIntegerFormatter must have a read function");
    }

    if (!toFloatFormatter.read) {
      throw new Error("toFloatFormatter must have a read function");
    }

    var retI = toIntegerFormatter.read(target * 1);
    var retF = toFloatFormatter.read(target);
    return retI == retF ? retI : retF;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/is-integer.formatter.ts
/**
 * Checks if value is a number
 * @see https://github.com/matthieuriolo/rivetsjs-stdlib/blob/master/src/rivetsstdlib.js#L82
 */
var isIntegerFormatter = {
  name: "isInteger",
  read: function read(n) {
    /**
     * Thanks a lot to Dagg Nabbit
     * http://stackoverflow.com/questions/3885817/how-to-check-if-a-number-is-float-or-integer
     */
    return n === +n && n === (n | 0);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/number-format.formatter.ts


 // TODO set by current locale

var DEFAULT_DECIMAL_SEPARATOR = ".";
var DEFAULT_THOUSAND_SEPARATOR = "'";
var DEFAULT_PRECISION = 2;
/**
 * Returns a formatted version of the target as string.
 * The number will always be rounded after the DIN 1333 (1.55 => 1.6 and -1.55 => -1.6)
 */

var numberFormatFormatter = {
  name: "numberFormat",

  /**
   * Returns a formatted version of the target as string.
   * The number will always be rounded after the DIN 1333 (1.55 => 1.6 and -1.55 => -1.6)
   * @param target
   * @param precision (default: 2)
   * @param decimalSeparator (default: ".")
   * @param thousandSeparator (default: "'")
   */
  read: function read(target) {
    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PRECISION;
    var decimalSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_DECIMAL_SEPARATOR;
    var thousandSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THOUSAND_SEPARATOR;

    if (!toDecimalFormatter.read) {
      throw new Error("toDecimalFormatter must have a read function");
    }

    if (!isIntegerFormatter.read) {
      throw new Error("isIntegerFormatter must have a read function");
    }

    target = (0,type/* isNumber */.hj)(target) ? target : toDecimalFormatter.read(target);

    if (!isIntegerFormatter.read(precision)) {
      precision = DEFAULT_PRECISION;
    }
    /*
     * Thanks to user2823670
     * http://stackoverflow.com/questions/10015027/javascript-tofixed-not-rounding
     */


    var retStr = (+(Math.round(+(Math.abs(target) + "e" + precision)) + "e" + -precision)).toFixed(precision);
    if (target < 0) retStr = "-" + retStr;
    /**
     * Thanks to Elias Zamaria
     * http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
     */

    var ret = retStr.split(".");

    if (ret.length == 2) {
      return ret[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator) + decimalSeparator + ret[1];
    }

    return ret[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/pluralize.formatter.ts

var pluralizeFormatter = {
  name: "pluralize",
  read: function read(input, singular, plural) {
    if (plural === null) {
      plural = singular + "s";
    }

    if ((0,type/* isArray */.kJ)(input)) {
      input = input.length;
    }

    if (input === 1) {
      return singular;
    } else {
      return plural;
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/prepend.formatter.ts
/**
 * Prepends characters to a string.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#prepend
 */
var prependFormatter = {
  name: "prepend",
  read: function read(a, b) {
    return b + a;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/upcase.formatter.ts
/**
 * Converts a string into uppercase.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#upcase
 */
var upcaseFormatter = {
  name: "upcase",
  read: function read(str) {
    return str.toUpperCase();
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/replace.formatter.ts
/**
 * Replaces all occurrences of a string with a substring.
 * @see https://help.shopify.com/en/themes/liquid/filters/string-filters#replace
 */
var replaceFormatter = {
  name: "replace",
  read: function read(str, value, replaceValue) {
    return str.replace(new RegExp(value, "g"), replaceValue);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/replace-first.formatter.ts
/* tslint:disable:variable-name */

/**
 * Replaces the first occurrence of a string with a substring.
 * @see https://help.shopify.com/en/themes/liquid/filters/string-filters#replace_first
 */
var replaceFirstFormatter = {
  name: "replaceFirst",
  read: function read(str, value, replaceValue) {
    return str.replace(value, replaceValue);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/slice.formatter.ts
/**
 * The `slice` formatter returns a substring, starting at the specified index.
 * An optional second parameter can be passed to specify the length of the substring.
 * If no second parameter is given, a substring of one character will be returned.
 * @see https://help.shopify.com/themes/liquid/filters/string-filters#slice
 */
var sliceFormatter = {
  name: "slice",
  read: function read(value, start, end) {
    return value.slice(start, end);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/strip-html.formatter.ts

/**
 * Strips all HTML tags from a string.
 * @see https://help.shopify.com/en/themes/liquid/filters/string-filters#strip_html
 */

var stripHtmlFormatter = {
  name: "stripHtml",
  read: function read(html) {
    return (0,type/* stripHtml */.Vt)(html);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/string/index.ts
// string formatters
















// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/boolean.formatter.ts
/**
 * Converts a variable to boolean
 */
var booleanFormatter = {
  name: "boolean",
  read: function read(value) {
    if (value === "true") {
      return true;
    } else if (value === "false") {
      return false;
    } else {
      return !!value;
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/is-array.formatter.ts

/**
 * Checks if value is an array
 */

var isArrayFormatter = {
  name: "isArray",
  read: type/* isArray */.kJ
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/is-boolean.formatter.ts

/**
 * Checks if value is an boolean
 */

var isBooleanFormatter = {
  name: "isBoolean",
  read: type/* isBoolean */.jn
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/is-defined.formatter.ts

/**
 * Checks if value is defined
 */

var isDefinedFormatter = {
  name: "isDefined",
  read: type/* isDefined */.$K
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/is-number.formatter.ts

/**
 * Checks if value is a number
 */

var isNumberFormatter = {
  name: "isNumber",
  read: type/* isNumber */.hj
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/is-object.formatter.ts

/**
 * Checks if value is a object
 */

var isObjectFormatter = {
  name: "isObject",
  read: type/* isObject */.Kn
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/is-string.formatter.ts

/**
 * Check if value is a string
 */

var isStringFormatter = {
  name: "isString",
  read: function read(str) {
    return (0,type/* isString */.HD)(str);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/is-undefined.formatter.ts

/**
 * Check if value is undefined
 */

var isUndefinedFormatter = {
  name: "isUndefined",
  read: type/* isUndefined */.o8
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/json.formatter.ts
/**
 * Converts a string into a JSON string.
 * @see https://help.shopify.com/themes/liquid/filters/additional-filters#json
 */
var jsonFormatter = {
  name: "json",
  read: function read(object) {
    var space = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var replaceSingleQuate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var result = JSON.stringify(object, null, space);

    if (replaceSingleQuate && result) {
      return result.replace(/'/g, "&#39;");
    }

    return result;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/parse.formatter.ts

/**
 * parse json string to object
 * @example <div rv-add-class='"["col-2", "col-3", "col-4", "col-5", "col-6"]" | parse | random'>
 */

var parseFormatter = {
  name: "parse",
  read: function read(jsonString) {
    if ((0,type/* isString */.HD)(jsonString)) {
      return (0,type/* parseJsonString */.uO)(jsonString);
    } else if ((0,type/* isObject */.Kn)(jsonString) || Array.isArray(jsonString)) {
      console.warn("[parseFormatter] You do not need to parse the value because since it already been parsed");
      return jsonString;
    }

    return null;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/to-string.formatter.ts

/**
 * Parses a value to string
 * @param value The value you want to parse to string
 * @param def Default value if value is undefined
 */

var toStringFormatter = {
  name: "toString",
  read: function read(value, def) {
    // If value is an array convert each value in array to string
    if (Array.isArray(value)) {
      for (var i in value) {
        if (value[i]) {
          value[i] = (0,type/* getString */.KF)(value[i]);
        }
      }
    } else if ((0,type/* isObject */.Kn)(value)) {
      for (var key in value) {
        value[key] = (0,type/* getString */.KF)(value[key]);
      }
    } else {
      value = (0,type/* getString */.KF)(value);
    } // If default value is set return the default value if num is 0, null or undefined


    if (def) {
      return value ? value : def;
    }

    return value;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/string.formatter.ts

var stringFormatter = {
  name: "string",
  read: function read(value, def) {
    if (!toStringFormatter || toStringFormatter.read) {
      throw new Error("toStringFormatter.read not defined!");
    } else {
      console.warn("The string formatter is depricated, please use toString instead!");
      return toStringFormatter.read(value, def);
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/to-number.formatter.ts

/**
 * Parse a string to number / float
 * @see http://stackoverflow.com/a/1100653/1465919
 */

var toNumberFormatter = {
  name: "toNumber",
  read: function read(str, def) {
    var num = (0,type/* getNumber */.Dx)(str); // If default value is set return the default value if num is 0, null or undefined

    if (def) {
      return num ? num : def;
    }

    return num;
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/type/index.ts
// property / object formatters

















// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/formatters/index.ts







/***/ }),

/***/ 425:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": () => /* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher,
/* harmony export */   "HttpService": () => /* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_2__.HttpService,
/* harmony export */   "Utils": () => /* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_2__.Utils,
/* harmony export */   "getDataset": () => /* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_2__.getDataset,
/* harmony export */   "Component": () => /* reexport safe */ _component__WEBPACK_IMPORTED_MODULE_5__.w,
/* harmony export */   "handleizeFormatter": () => /* reexport safe */ _formatters__WEBPACK_IMPORTED_MODULE_7__.handleizeFormatter,
/* harmony export */   "Riba": () => /* reexport safe */ _riba__WEBPACK_IMPORTED_MODULE_10__.D,
/* harmony export */   "View": () => /* reexport safe */ _view__WEBPACK_IMPORTED_MODULE_11__.G,
/* harmony export */   "coreModule": () => /* reexport safe */ _core_module__WEBPACK_IMPORTED_MODULE_12__.h
/* harmony export */ });
/* harmony import */ var _interfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4292);
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_0__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_0__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_0__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_0__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_0__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_0__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_0__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_0__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_0__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_0__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_0__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_0__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_0__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_0__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_0__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_0__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_0__.handleizeFormatter; } });
/* harmony import */ var _vendors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3075);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8192);
/* harmony import */ var _adapters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6405);
/* harmony import */ var _binders__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(47);
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4164);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2580);
/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5293);
/* harmony import */ var _binding__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(155);
/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(6872);
/* harmony import */ var _riba__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(2505);
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(5225);
/* harmony import */ var _core_module__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(1381);














/***/ }),

/***/ 338:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* unused harmony export Adapter */
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);



/**
 * The default `.` adapter that comes with riba.js. Allows subscribing to
 * properties on plain objects, implemented in ES5 natives using
 * `Object.defineProperty`.
 */

/**
 * TODO For what is this?
 */
var Adapter = function Adapter() {
  _classCallCheck(this, Adapter);

  _defineProperty(this, "name", void 0);

  _defineProperty(this, "counter", void 0);

  _defineProperty(this, "weakmap", void 0);

  _defineProperty(this, "weakReference", void 0);

  _defineProperty(this, "cleanupWeakReference", void 0);

  _defineProperty(this, "stubFunction", void 0);

  _defineProperty(this, "observeMutations", void 0);

  _defineProperty(this, "unobserveMutations", void 0);

  _defineProperty(this, "observe", void 0);

  _defineProperty(this, "unobserve", void 0);

  _defineProperty(this, "get", void 0);

  _defineProperty(this, "set", void 0);
};

/***/ }),

/***/ 8305:
/***/ (() => {



/***/ }),

/***/ 86:
/***/ (() => {



/***/ }),

/***/ 354:
/***/ (() => {



/***/ }),

/***/ 2993:
/***/ (() => {



/***/ }),

/***/ 2010:
/***/ (() => {



/***/ }),

/***/ 5285:
/***/ (() => {



/***/ }),

/***/ 1589:
/***/ (() => {



/***/ }),

/***/ 8280:
/***/ (() => {



/***/ }),

/***/ 8471:
/***/ (() => {



/***/ }),

/***/ 5944:
/***/ (() => {



/***/ }),

/***/ 7912:
/***/ (() => {



/***/ }),

/***/ 4292:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(338);
/* harmony import */ var _adapters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8305);
/* harmony import */ var _adapters__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_adapters__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_adapters__WEBPACK_IMPORTED_MODULE_1__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _adapters__WEBPACK_IMPORTED_MODULE_1__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_adapters__WEBPACK_IMPORTED_MODULE_1__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _adapters__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_adapters__WEBPACK_IMPORTED_MODULE_1__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _adapters__WEBPACK_IMPORTED_MODULE_1__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_adapters__WEBPACK_IMPORTED_MODULE_1__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _adapters__WEBPACK_IMPORTED_MODULE_1__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_adapters__WEBPACK_IMPORTED_MODULE_1__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _adapters__WEBPACK_IMPORTED_MODULE_1__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_adapters__WEBPACK_IMPORTED_MODULE_1__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _adapters__WEBPACK_IMPORTED_MODULE_1__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_adapters__WEBPACK_IMPORTED_MODULE_1__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _adapters__WEBPACK_IMPORTED_MODULE_1__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_adapters__WEBPACK_IMPORTED_MODULE_1__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _adapters__WEBPACK_IMPORTED_MODULE_1__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_adapters__WEBPACK_IMPORTED_MODULE_1__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _adapters__WEBPACK_IMPORTED_MODULE_1__.handleizeFormatter; } });
/* harmony import */ var _binder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(86);
/* harmony import */ var _binder__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_binder__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder__WEBPACK_IMPORTED_MODULE_2__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _binder__WEBPACK_IMPORTED_MODULE_2__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder__WEBPACK_IMPORTED_MODULE_2__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _binder__WEBPACK_IMPORTED_MODULE_2__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder__WEBPACK_IMPORTED_MODULE_2__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _binder__WEBPACK_IMPORTED_MODULE_2__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder__WEBPACK_IMPORTED_MODULE_2__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _binder__WEBPACK_IMPORTED_MODULE_2__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder__WEBPACK_IMPORTED_MODULE_2__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _binder__WEBPACK_IMPORTED_MODULE_2__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder__WEBPACK_IMPORTED_MODULE_2__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _binder__WEBPACK_IMPORTED_MODULE_2__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder__WEBPACK_IMPORTED_MODULE_2__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _binder__WEBPACK_IMPORTED_MODULE_2__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder__WEBPACK_IMPORTED_MODULE_2__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _binder__WEBPACK_IMPORTED_MODULE_2__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder__WEBPACK_IMPORTED_MODULE_2__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _binder__WEBPACK_IMPORTED_MODULE_2__.handleizeFormatter; } });
/* harmony import */ var _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(354);
/* harmony import */ var _binder_wrapper__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binder_wrapper__WEBPACK_IMPORTED_MODULE_3__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _binder_wrapper__WEBPACK_IMPORTED_MODULE_3__.handleizeFormatter; } });
/* harmony import */ var _binders__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2993);
/* harmony import */ var _binders__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_binders__WEBPACK_IMPORTED_MODULE_4__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_binders__WEBPACK_IMPORTED_MODULE_4__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _binders__WEBPACK_IMPORTED_MODULE_4__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binders__WEBPACK_IMPORTED_MODULE_4__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _binders__WEBPACK_IMPORTED_MODULE_4__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binders__WEBPACK_IMPORTED_MODULE_4__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _binders__WEBPACK_IMPORTED_MODULE_4__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binders__WEBPACK_IMPORTED_MODULE_4__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _binders__WEBPACK_IMPORTED_MODULE_4__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binders__WEBPACK_IMPORTED_MODULE_4__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _binders__WEBPACK_IMPORTED_MODULE_4__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binders__WEBPACK_IMPORTED_MODULE_4__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _binders__WEBPACK_IMPORTED_MODULE_4__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binders__WEBPACK_IMPORTED_MODULE_4__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _binders__WEBPACK_IMPORTED_MODULE_4__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binders__WEBPACK_IMPORTED_MODULE_4__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _binders__WEBPACK_IMPORTED_MODULE_4__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binders__WEBPACK_IMPORTED_MODULE_4__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _binders__WEBPACK_IMPORTED_MODULE_4__.handleizeFormatter; } });
/* harmony import */ var _binding__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2010);
/* harmony import */ var _binding__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_binding__WEBPACK_IMPORTED_MODULE_5__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.handleizeFormatter; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_binding__WEBPACK_IMPORTED_MODULE_5__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _binding__WEBPACK_IMPORTED_MODULE_5__.handleizeFormatter; } });
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5285);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_components__WEBPACK_IMPORTED_MODULE_6__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_components__WEBPACK_IMPORTED_MODULE_6__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _components__WEBPACK_IMPORTED_MODULE_6__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_components__WEBPACK_IMPORTED_MODULE_6__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _components__WEBPACK_IMPORTED_MODULE_6__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_components__WEBPACK_IMPORTED_MODULE_6__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _components__WEBPACK_IMPORTED_MODULE_6__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_components__WEBPACK_IMPORTED_MODULE_6__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _components__WEBPACK_IMPORTED_MODULE_6__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_components__WEBPACK_IMPORTED_MODULE_6__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _components__WEBPACK_IMPORTED_MODULE_6__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_components__WEBPACK_IMPORTED_MODULE_6__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _components__WEBPACK_IMPORTED_MODULE_6__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_components__WEBPACK_IMPORTED_MODULE_6__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _components__WEBPACK_IMPORTED_MODULE_6__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_components__WEBPACK_IMPORTED_MODULE_6__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _components__WEBPACK_IMPORTED_MODULE_6__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_components__WEBPACK_IMPORTED_MODULE_6__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _components__WEBPACK_IMPORTED_MODULE_6__.handleizeFormatter; } });
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1589);
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_formatter__WEBPACK_IMPORTED_MODULE_7__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatter__WEBPACK_IMPORTED_MODULE_7__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _formatter__WEBPACK_IMPORTED_MODULE_7__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatter__WEBPACK_IMPORTED_MODULE_7__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _formatter__WEBPACK_IMPORTED_MODULE_7__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatter__WEBPACK_IMPORTED_MODULE_7__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _formatter__WEBPACK_IMPORTED_MODULE_7__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatter__WEBPACK_IMPORTED_MODULE_7__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _formatter__WEBPACK_IMPORTED_MODULE_7__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatter__WEBPACK_IMPORTED_MODULE_7__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _formatter__WEBPACK_IMPORTED_MODULE_7__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatter__WEBPACK_IMPORTED_MODULE_7__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _formatter__WEBPACK_IMPORTED_MODULE_7__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatter__WEBPACK_IMPORTED_MODULE_7__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _formatter__WEBPACK_IMPORTED_MODULE_7__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatter__WEBPACK_IMPORTED_MODULE_7__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _formatter__WEBPACK_IMPORTED_MODULE_7__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatter__WEBPACK_IMPORTED_MODULE_7__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _formatter__WEBPACK_IMPORTED_MODULE_7__.handleizeFormatter; } });
/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8280);
/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_formatters__WEBPACK_IMPORTED_MODULE_8__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatters__WEBPACK_IMPORTED_MODULE_8__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _formatters__WEBPACK_IMPORTED_MODULE_8__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatters__WEBPACK_IMPORTED_MODULE_8__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _formatters__WEBPACK_IMPORTED_MODULE_8__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatters__WEBPACK_IMPORTED_MODULE_8__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _formatters__WEBPACK_IMPORTED_MODULE_8__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatters__WEBPACK_IMPORTED_MODULE_8__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _formatters__WEBPACK_IMPORTED_MODULE_8__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatters__WEBPACK_IMPORTED_MODULE_8__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _formatters__WEBPACK_IMPORTED_MODULE_8__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatters__WEBPACK_IMPORTED_MODULE_8__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _formatters__WEBPACK_IMPORTED_MODULE_8__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatters__WEBPACK_IMPORTED_MODULE_8__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _formatters__WEBPACK_IMPORTED_MODULE_8__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatters__WEBPACK_IMPORTED_MODULE_8__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _formatters__WEBPACK_IMPORTED_MODULE_8__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_formatters__WEBPACK_IMPORTED_MODULE_8__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _formatters__WEBPACK_IMPORTED_MODULE_8__.handleizeFormatter; } });
/* harmony import */ var _http_data_type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8471);
/* harmony import */ var _http_data_type__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_http_data_type__WEBPACK_IMPORTED_MODULE_9__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_data_type__WEBPACK_IMPORTED_MODULE_9__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _http_data_type__WEBPACK_IMPORTED_MODULE_9__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_data_type__WEBPACK_IMPORTED_MODULE_9__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _http_data_type__WEBPACK_IMPORTED_MODULE_9__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_data_type__WEBPACK_IMPORTED_MODULE_9__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _http_data_type__WEBPACK_IMPORTED_MODULE_9__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_data_type__WEBPACK_IMPORTED_MODULE_9__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _http_data_type__WEBPACK_IMPORTED_MODULE_9__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_data_type__WEBPACK_IMPORTED_MODULE_9__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _http_data_type__WEBPACK_IMPORTED_MODULE_9__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_data_type__WEBPACK_IMPORTED_MODULE_9__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _http_data_type__WEBPACK_IMPORTED_MODULE_9__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_data_type__WEBPACK_IMPORTED_MODULE_9__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _http_data_type__WEBPACK_IMPORTED_MODULE_9__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_data_type__WEBPACK_IMPORTED_MODULE_9__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _http_data_type__WEBPACK_IMPORTED_MODULE_9__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_data_type__WEBPACK_IMPORTED_MODULE_9__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _http_data_type__WEBPACK_IMPORTED_MODULE_9__.handleizeFormatter; } });
/* harmony import */ var _http_method__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(5944);
/* harmony import */ var _http_method__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_http_method__WEBPACK_IMPORTED_MODULE_10__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_method__WEBPACK_IMPORTED_MODULE_10__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _http_method__WEBPACK_IMPORTED_MODULE_10__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_method__WEBPACK_IMPORTED_MODULE_10__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _http_method__WEBPACK_IMPORTED_MODULE_10__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_method__WEBPACK_IMPORTED_MODULE_10__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _http_method__WEBPACK_IMPORTED_MODULE_10__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_method__WEBPACK_IMPORTED_MODULE_10__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _http_method__WEBPACK_IMPORTED_MODULE_10__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_method__WEBPACK_IMPORTED_MODULE_10__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _http_method__WEBPACK_IMPORTED_MODULE_10__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_method__WEBPACK_IMPORTED_MODULE_10__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _http_method__WEBPACK_IMPORTED_MODULE_10__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_method__WEBPACK_IMPORTED_MODULE_10__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _http_method__WEBPACK_IMPORTED_MODULE_10__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_method__WEBPACK_IMPORTED_MODULE_10__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _http_method__WEBPACK_IMPORTED_MODULE_10__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_method__WEBPACK_IMPORTED_MODULE_10__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _http_method__WEBPACK_IMPORTED_MODULE_10__.handleizeFormatter; } });
/* harmony import */ var _http_service_options__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(7912);
/* harmony import */ var _http_service_options__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_http_service_options__WEBPACK_IMPORTED_MODULE_11__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_service_options__WEBPACK_IMPORTED_MODULE_11__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _http_service_options__WEBPACK_IMPORTED_MODULE_11__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_service_options__WEBPACK_IMPORTED_MODULE_11__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _http_service_options__WEBPACK_IMPORTED_MODULE_11__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_service_options__WEBPACK_IMPORTED_MODULE_11__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _http_service_options__WEBPACK_IMPORTED_MODULE_11__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_service_options__WEBPACK_IMPORTED_MODULE_11__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _http_service_options__WEBPACK_IMPORTED_MODULE_11__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_service_options__WEBPACK_IMPORTED_MODULE_11__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _http_service_options__WEBPACK_IMPORTED_MODULE_11__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_service_options__WEBPACK_IMPORTED_MODULE_11__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _http_service_options__WEBPACK_IMPORTED_MODULE_11__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_service_options__WEBPACK_IMPORTED_MODULE_11__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _http_service_options__WEBPACK_IMPORTED_MODULE_11__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_service_options__WEBPACK_IMPORTED_MODULE_11__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _http_service_options__WEBPACK_IMPORTED_MODULE_11__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_http_service_options__WEBPACK_IMPORTED_MODULE_11__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _http_service_options__WEBPACK_IMPORTED_MODULE_11__.handleizeFormatter; } });
/* harmony import */ var _module_element_type__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(4919);
/* harmony import */ var _module_element_type__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_module_element_type__WEBPACK_IMPORTED_MODULE_12__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_module_element_type__WEBPACK_IMPORTED_MODULE_12__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _module_element_type__WEBPACK_IMPORTED_MODULE_12__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module_element_type__WEBPACK_IMPORTED_MODULE_12__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _module_element_type__WEBPACK_IMPORTED_MODULE_12__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module_element_type__WEBPACK_IMPORTED_MODULE_12__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _module_element_type__WEBPACK_IMPORTED_MODULE_12__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module_element_type__WEBPACK_IMPORTED_MODULE_12__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _module_element_type__WEBPACK_IMPORTED_MODULE_12__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module_element_type__WEBPACK_IMPORTED_MODULE_12__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _module_element_type__WEBPACK_IMPORTED_MODULE_12__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module_element_type__WEBPACK_IMPORTED_MODULE_12__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _module_element_type__WEBPACK_IMPORTED_MODULE_12__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module_element_type__WEBPACK_IMPORTED_MODULE_12__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _module_element_type__WEBPACK_IMPORTED_MODULE_12__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module_element_type__WEBPACK_IMPORTED_MODULE_12__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _module_element_type__WEBPACK_IMPORTED_MODULE_12__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module_element_type__WEBPACK_IMPORTED_MODULE_12__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _module_element_type__WEBPACK_IMPORTED_MODULE_12__.handleizeFormatter; } });
/* harmony import */ var _module__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(6120);
/* harmony import */ var _module__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_module__WEBPACK_IMPORTED_MODULE_13__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_module__WEBPACK_IMPORTED_MODULE_13__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _module__WEBPACK_IMPORTED_MODULE_13__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module__WEBPACK_IMPORTED_MODULE_13__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _module__WEBPACK_IMPORTED_MODULE_13__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module__WEBPACK_IMPORTED_MODULE_13__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _module__WEBPACK_IMPORTED_MODULE_13__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module__WEBPACK_IMPORTED_MODULE_13__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _module__WEBPACK_IMPORTED_MODULE_13__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module__WEBPACK_IMPORTED_MODULE_13__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _module__WEBPACK_IMPORTED_MODULE_13__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module__WEBPACK_IMPORTED_MODULE_13__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _module__WEBPACK_IMPORTED_MODULE_13__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module__WEBPACK_IMPORTED_MODULE_13__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _module__WEBPACK_IMPORTED_MODULE_13__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module__WEBPACK_IMPORTED_MODULE_13__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _module__WEBPACK_IMPORTED_MODULE_13__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_module__WEBPACK_IMPORTED_MODULE_13__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _module__WEBPACK_IMPORTED_MODULE_13__.handleizeFormatter; } });
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(4088);
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_observer__WEBPACK_IMPORTED_MODULE_14__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_observer__WEBPACK_IMPORTED_MODULE_14__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _observer__WEBPACK_IMPORTED_MODULE_14__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_observer__WEBPACK_IMPORTED_MODULE_14__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _observer__WEBPACK_IMPORTED_MODULE_14__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_observer__WEBPACK_IMPORTED_MODULE_14__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _observer__WEBPACK_IMPORTED_MODULE_14__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_observer__WEBPACK_IMPORTED_MODULE_14__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _observer__WEBPACK_IMPORTED_MODULE_14__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_observer__WEBPACK_IMPORTED_MODULE_14__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _observer__WEBPACK_IMPORTED_MODULE_14__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_observer__WEBPACK_IMPORTED_MODULE_14__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _observer__WEBPACK_IMPORTED_MODULE_14__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_observer__WEBPACK_IMPORTED_MODULE_14__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _observer__WEBPACK_IMPORTED_MODULE_14__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_observer__WEBPACK_IMPORTED_MODULE_14__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _observer__WEBPACK_IMPORTED_MODULE_14__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_observer__WEBPACK_IMPORTED_MODULE_14__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _observer__WEBPACK_IMPORTED_MODULE_14__.handleizeFormatter; } });
/* harmony import */ var _riba__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(5881);
/* harmony import */ var _riba__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_riba__WEBPACK_IMPORTED_MODULE_15__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_riba__WEBPACK_IMPORTED_MODULE_15__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _riba__WEBPACK_IMPORTED_MODULE_15__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_riba__WEBPACK_IMPORTED_MODULE_15__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _riba__WEBPACK_IMPORTED_MODULE_15__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_riba__WEBPACK_IMPORTED_MODULE_15__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _riba__WEBPACK_IMPORTED_MODULE_15__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_riba__WEBPACK_IMPORTED_MODULE_15__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _riba__WEBPACK_IMPORTED_MODULE_15__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_riba__WEBPACK_IMPORTED_MODULE_15__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _riba__WEBPACK_IMPORTED_MODULE_15__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_riba__WEBPACK_IMPORTED_MODULE_15__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _riba__WEBPACK_IMPORTED_MODULE_15__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_riba__WEBPACK_IMPORTED_MODULE_15__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _riba__WEBPACK_IMPORTED_MODULE_15__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_riba__WEBPACK_IMPORTED_MODULE_15__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _riba__WEBPACK_IMPORTED_MODULE_15__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_riba__WEBPACK_IMPORTED_MODULE_15__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _riba__WEBPACK_IMPORTED_MODULE_15__.handleizeFormatter; } });
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(4550);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_services__WEBPACK_IMPORTED_MODULE_16__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_16__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _services__WEBPACK_IMPORTED_MODULE_16__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_16__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _services__WEBPACK_IMPORTED_MODULE_16__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_16__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _services__WEBPACK_IMPORTED_MODULE_16__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_16__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _services__WEBPACK_IMPORTED_MODULE_16__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_16__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _services__WEBPACK_IMPORTED_MODULE_16__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_16__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _services__WEBPACK_IMPORTED_MODULE_16__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_16__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _services__WEBPACK_IMPORTED_MODULE_16__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_16__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _services__WEBPACK_IMPORTED_MODULE_16__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_services__WEBPACK_IMPORTED_MODULE_16__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _services__WEBPACK_IMPORTED_MODULE_16__.handleizeFormatter; } });
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(4090);
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_type__WEBPACK_IMPORTED_MODULE_17__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_type__WEBPACK_IMPORTED_MODULE_17__, "Component")) __webpack_require__.d(__webpack_exports__, { "Component": function() { return _type__WEBPACK_IMPORTED_MODULE_17__.Component; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_type__WEBPACK_IMPORTED_MODULE_17__, "EventDispatcher")) __webpack_require__.d(__webpack_exports__, { "EventDispatcher": function() { return _type__WEBPACK_IMPORTED_MODULE_17__.EventDispatcher; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_type__WEBPACK_IMPORTED_MODULE_17__, "HttpService")) __webpack_require__.d(__webpack_exports__, { "HttpService": function() { return _type__WEBPACK_IMPORTED_MODULE_17__.HttpService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_type__WEBPACK_IMPORTED_MODULE_17__, "Riba")) __webpack_require__.d(__webpack_exports__, { "Riba": function() { return _type__WEBPACK_IMPORTED_MODULE_17__.Riba; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_type__WEBPACK_IMPORTED_MODULE_17__, "Utils")) __webpack_require__.d(__webpack_exports__, { "Utils": function() { return _type__WEBPACK_IMPORTED_MODULE_17__.Utils; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_type__WEBPACK_IMPORTED_MODULE_17__, "View")) __webpack_require__.d(__webpack_exports__, { "View": function() { return _type__WEBPACK_IMPORTED_MODULE_17__.View; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_type__WEBPACK_IMPORTED_MODULE_17__, "coreModule")) __webpack_require__.d(__webpack_exports__, { "coreModule": function() { return _type__WEBPACK_IMPORTED_MODULE_17__.coreModule; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_type__WEBPACK_IMPORTED_MODULE_17__, "getDataset")) __webpack_require__.d(__webpack_exports__, { "getDataset": function() { return _type__WEBPACK_IMPORTED_MODULE_17__.getDataset; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_type__WEBPACK_IMPORTED_MODULE_17__, "handleizeFormatter")) __webpack_require__.d(__webpack_exports__, { "handleizeFormatter": function() { return _type__WEBPACK_IMPORTED_MODULE_17__.handleizeFormatter; } });




















/***/ }),

/***/ 4919:
/***/ (() => {



/***/ }),

/***/ 6120:
/***/ (() => {



/***/ }),

/***/ 4088:
/***/ (() => {



/***/ }),

/***/ 5881:
/***/ (() => {



/***/ }),

/***/ 4550:
/***/ (() => {



/***/ }),

/***/ 4090:
/***/ (() => {



/***/ }),

/***/ 3017:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Q": () => /* binding */ Observer
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3913);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4498);




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */

var Observer = /*#__PURE__*/function () {
  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Observer, null, [{
    key: "updateOptions",
    value: function updateOptions(options) {
      if (!options.adapters) {
        throw new Error("adapters are required!");
      }

      if (options.adapters) {
        Observer.adapters = _objectSpread(_objectSpread({}, Observer.adapters), options.adapters);
        Observer.interfaces = Object.keys(Observer.adapters);
      }

      Observer.rootInterface = options.rootInterface || Observer.interfaces[0];

      if (!Observer.rootInterface) {
        throw new Error("rootInterface is required!");
      }
    }
    /**
     * Tokenizes the provided keypath string into interface + path tokens for the
     * observer to work with.
     */

  }, {
    key: "tokenize",
    value: function tokenize(keypath, root) {
      var tokens = [];
      var current = {
        i: root,
        path: ""
      };
      var index;
      var chr;

      for (index = 0; index < keypath.length; index++) {
        chr = keypath.charAt(index);

        if (~Observer.interfaces.indexOf(chr)) {
          tokens.push(current);
          current = {
            i: chr,
            path: ""
          };
        } else {
          current.path += chr;
        }
      }

      tokens.push(current);
      return tokens;
    }
  }]);

  /**
   * Constructs a new keypath observer and kicks things off.
   * @param obj
   * @param keypath
   * @param callback
   */
  function Observer(obj, keypath, callback) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Observer);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "keypath", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "callback", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "objectPath", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "obj", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "target", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "key", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "tokens", void 0);

    this.keypath = keypath;
    this.callback = callback;
    this.objectPath = [];
    var parseResult = this.parse();
    this.key = parseResult.key;
    this.tokens = parseResult.tokens;
    this.obj = this.getRootObject(obj);
    this.target = this.realize();

    if ((0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .Kn)(this.target)) {
      this.set(true, this.key, this.target, this.callback);
    }
  }
  /**
   * Parses the keypath using the interfaces defined on the view. Sets variables
   * for the tokenized keypath as well as the end key.
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Observer, [{
    key: "parse",
    value: function parse() {
      var path;
      var root;

      if (!Observer.interfaces || !Observer.interfaces.length) {
        throw new Error("[Observer] Must define at least one adapter interface. interfaces: \"".concat(JSON.stringify(Observer.interfaces), "\" adapters: \"").concat(JSON.stringify(Observer.adapters), "\""));
      }

      if (~Observer.interfaces.indexOf(this.keypath[0])) {
        root = this.keypath[0];
        path = this.keypath.substr(1);
      } else {
        root = Observer.rootInterface;
        path = this.keypath;
      }

      this.tokens = Observer.tokenize(path, root);

      if (!this.tokens.length) {
        throw new Error("[Observer] No tokens");
      }

      this.key = this.tokens.pop();
      return {
        key: this.key,
        tokens: this.tokens
      };
    }
    /**
     * Realizes the full keypath, attaching observers for every key and correcting
     * old observers to any changed objects in the keypath.
     */

  }, {
    key: "realize",
    value: function realize() {
      var current = this.obj;
      var unreached = -1;
      var prev;
      var token;

      for (var index = 0; index < this.tokens.length; index++) {
        token = this.tokens[index];

        if ((0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .Kn)(current)) {
          if (typeof this.objectPath[index] !== "undefined") {
            prev = this.objectPath[index];

            if (current !== prev) {
              this.set(false, token, prev, this);
              this.set(true, token, current, this);
              this.objectPath[index] = current;
            }
          } else {
            this.set(true, token, current, this);
            this.objectPath[index] = current;
          }

          current = this.get(token, current);
        } else {
          if (unreached === -1) {
            unreached = index;
          }

          prev = this.objectPath[index];

          if (prev) {
            this.set(false, token, prev, this);
          }
        }
      }

      if (unreached !== -1) {
        this.objectPath.splice(unreached);
      }

      return current;
    }
    /**
     * Updates the keypath. This is called when any intermediary key is changed.
     */

  }, {
    key: "sync",
    value: function sync() {
      var oldValue;
      var newValue;
      var next = this.realize();

      if (next !== this.target) {
        if ((0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .Kn)(this.target)) {
          this.set(false, this.key, this.target, this.callback);
        }

        if ((0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .Kn)(next)) {
          this.set(true, this.key, next, this.callback);
        }

        oldValue = this.value();
        this.target = next;
        newValue = this.value();

        if (newValue !== oldValue || Array.isArray(newValue)) {
          this.callback.sync();
        }
      } else if (Array.isArray(next)) {
        this.callback.sync();
      }
    }
    /**
     * Reads the current end value of the observed keypath. Returns undefined if
     * the full keypath is unreachable.
     */

  }, {
    key: "value",
    value: function value() {
      if ((0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .Kn)(this.target)) {
        return this.get(this.key, this.target);
      }
    }
    /**
     * Sets the current end value of the observed keypath. Calling setValue when
     *  the full keypath is unreachable is a no-op.
     * @param value
     */

  }, {
    key: "setValue",
    value: function setValue(value) {
      if ((0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .Kn)(this.target)) {
        Observer.adapters[this.key.i].set(this.target, this.key.path, value);
      }
    }
    /**
     * Gets the provided key on an object.
     * @param key
     * @param obj
     */

  }, {
    key: "get",
    value: function get(key, obj) {
      return Observer.adapters[key.i].get(obj, key.path);
    }
    /**
     * Observes or unobserves a callback on the object using the provided key.
     * @param active
     * @param key
     * @param obj
     * @param callback
     */

  }, {
    key: "set",
    value: function set(active, key, obj, callback) {
      if (active) {
        Observer.adapters[key.i].observe(obj, key.path, callback);
      } else {
        Observer.adapters[key.i].unobserve(obj, key.path, callback);
      }
    }
    /**
     * Unobserves the entire keypath.
     */

  }, {
    key: "unobserve",
    value: function unobserve() {
      var obj;
      var token;

      for (var index = 0; index < this.tokens.length; index++) {
        token = this.tokens[index];
        obj = this.objectPath[index];

        if (obj) {
          this.set(false, token, obj, this);
        }
      }

      if ((0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .Kn)(this.target)) {
        this.set(false, this.key, this.target, this.callback);
      }
    }
    /**
     * traverse the scope chain to find the scope which has the root property
     * if the property is not found in chain, returns the root scope
     * @param obj
     */

  }, {
    key: "getRootObject",
    value: function getRootObject(obj) {
      var rootProp;
      var current;

      if (!obj.$parent) {
        return obj;
      }

      if (this.tokens.length) {
        rootProp = this.tokens[0].path;
      } else {
        rootProp = this.key.path;
      }

      current = obj;

      while (current.$parent && current[rootProp] === undefined) {
        current = current.$parent;
      }

      return current;
    }
  }]);

  return Observer;
}();

_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(Observer, "adapters", void 0);

_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(Observer, "interfaces", []);

_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(Observer, "rootInterface", void 0);

/***/ }),

/***/ 6872:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "uk": () => /* binding */ PRIMITIVE,
/* harmony export */   "pm": () => /* binding */ KEYPATH,
/* harmony export */   "gZ": () => /* binding */ parseType,
/* harmony export */   "$M": () => /* binding */ parseTemplate,
/* harmony export */   "T3": () => /* binding */ parseNode,
/* harmony export */   "ER": () => /* binding */ parseDeclaration
/* harmony export */ });
/* unused harmony exports TEXT, BINDING */
/* harmony import */ var _ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4498);
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5225);


/**
 * Used also in parsers.parseType
 * TODO outsource
 */

var PRIMITIVE = 0;
var KEYPATH = 1;
var TEXT = 0;
var BINDING = 1;
var QUOTED_STR = /^'.*'$|^".*"$/; // regex to test if string is wrapped in " or '

var DECLARATION_SPLIT = /((?:'[^']*')*(?:(?:[^|']*(?:'[^']*')+[^|']*)+|[^|]+))|^$/g;
/**
 * Parser and tokenizer for getting the type and value from a string.
 * @param string
 */

function parseType(str) {
  var type = PRIMITIVE;
  var value = str;

  if (str === undefined) {
    return {
      type: type,
      value: undefined
    };
  }

  if (QUOTED_STR.test(str)) {
    value = str.slice(1, -1);
    var jsonString = (0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_0__/* .parseJsonString */ .uO)(value);
    value = jsonString ? jsonString : value;
  } else if (str === "true") {
    value = true;
  } else if (str === "false") {
    value = false;
  } else if (str === "null") {
    value = null;
  } else if (str === "undefined") {
    value = undefined;
  } else if (str === "") {
    value = undefined;
  } else if (!isNaN(Number(str))) {
    value = Number(str);
  } else if (value.startsWith("{") || value.startsWith("[")) {
    var _jsonString = (0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_0__/* .parseJsonString */ .uO)(value);

    value = _jsonString ? _jsonString : value;
  } else {
    type = KEYPATH;
  }

  return {
    type: type,
    value: value
  };
}

/**
 * Template parser and tokenizer for {{ mustache-style }} text content bindings.
 * Parses the template and returns a set of tokens, separating static portions
 * of text from binding declarations.
 * @param template
 * @param delimiters
 */
function parseTemplate(template, delimiters) {
  var tokens = null;
  var length = template.length;
  var index = 0;
  var lastIndex = 0;
  var open = delimiters[0];
  var close = delimiters[1];

  while (lastIndex < length) {
    index = template.indexOf(open, lastIndex);

    if (index < 0) {
      if (tokens) {
        tokens.push({
          type: TEXT,
          value: template.slice(lastIndex)
        });
      }

      break;
    } else {
      tokens = tokens || [];

      if (index > 0 && lastIndex < index) {
        tokens.push({
          type: TEXT,
          value: template.slice(lastIndex, index)
        });
      }

      lastIndex = index + open.length;
      index = template.indexOf(close, lastIndex);

      if (index < 0) {
        var substring = template.slice(lastIndex - open.length);
        var lastToken = tokens[tokens.length - 1];

        if (lastToken && lastToken.type === TEXT) {
          lastToken.value += substring;
        } else {
          tokens.push({
            type: TEXT,
            value: substring
          });
        }

        break;
      }

      var value = template.slice(lastIndex, index).trim();
      tokens.push({
        type: BINDING,
        value: value
      });
      lastIndex = index + close.length;
    }
  }

  return tokens;
}
function parseNode(view, node, templateDelimiters) {
  /** If true stop / block the parseNode  recursion */
  var blockRecursion = false;
  node = node;

  if (node.nodeType === Node.TEXT_NODE) {
    var tokens = null; // TODO why check data?

    if (node.data) {
      tokens = parseTemplate(node.data, templateDelimiters);
    }

    if (tokens && tokens.length) {
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        var text = document.createTextNode(token.value);

        if (node.parentNode) {
          node.parentNode.insertBefore(text, node);
        }

        if (token.type === BINDING) {
          // TODO fix any
          view.buildBinding(text, null, token.value, _view__WEBPACK_IMPORTED_MODULE_1__/* .View.mustacheTextBinder */ .G.mustacheTextBinder, null);
        }
      }

      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    }

    blockRecursion = true;
  } else if (node.nodeType === Node.ELEMENT_NODE) {
    // traverse binds attributes
    blockRecursion = view.traverse(node);
  }

  if (!blockRecursion) {
    if (node.childNodes && node.childNodes.length > 0) {
      for (var _i = 0; _i < node.childNodes.length; _i++) {
        var childNode = node.childNodes[_i];

        if (childNode) {
          parseNode(view, childNode, templateDelimiters);
        }
      }
    }
  }
}

/**
 * Parses an attribute argument to his keypath and splits the formatter names into a pipes array.
 * @param declaration e.g. `object.data | validate | json`
 *
 * if declaration is
 * ```
 * object.data | validate | json`
 * ``
 *
 * the result is
 * ```
 * {
 *    keypath: "object.data",
 *    pipes: ["validate", "json"]
 * }
 * ```
 */
function parseDeclaration(declaration) {
  var matches = declaration.match(DECLARATION_SPLIT);

  if (matches === null) {
    throw new Error("[View] No matches");
  }

  var pipes = matches.map(function (str) {
    return str.trim();
  });
  var keypath = pipes.shift() || undefined;
  return {
    keypath: keypath,
    pipes: pipes
  };
}

/***/ }),

/***/ 2505:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "D": () => /* binding */ Riba
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(3038);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/parsers.ts
var parsers = __webpack_require__(6872);
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/binders/attribute.binder.ts
var attribute_binder = __webpack_require__(6358);
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/view.ts
var src_view = __webpack_require__(5225);
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/observer.ts
var observer = __webpack_require__(3017);
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/services/binder.service.ts
var binder_service = __webpack_require__(8886);
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/services/component.service.ts
var component_service = __webpack_require__(8549);
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/services/formatter.service.ts
var formatter_service = __webpack_require__(3901);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(2205);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(8585);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(9754);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/services/module-element.service.ts
var module_element_service = __webpack_require__(3769);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/services/adapter.service.ts








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }



var AdapterService = /*#__PURE__*/function (_ModuleElementService) {
  inherits_default()(AdapterService, _ModuleElementService);

  var _super = _createSuper(AdapterService);

  /**
   *
   */
  function AdapterService(adapters) {
    var _this;

    classCallCheck_default()(this, AdapterService);

    _this = _super.call(this, adapters);

    defineProperty_default()(assertThisInitialized_default()(_this), "type", "adapter");

    return _this;
  }
  /**
   * Regist a adapter with his name
   * @param adapter
   * @param name
   */


  createClass_default()(AdapterService, [{
    key: "regist",
    value: function regist(adapter, fallbackName) {
      var forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var name = forceFallback ? fallbackName || adapter.name : adapter.name || fallbackName;

      if (!name) {
        throw new Error("Adapter name not found!");
      }

      this.elements[name] = adapter;
      var options = {
        adapters: this.elements
      };
      observer/* Observer.updateOptions */.Q.updateOptions(options);
      return this.elements;
    }
  }]);

  return AdapterService;
}(module_element_service/* ModuleElementService */.G);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/services/module.service.ts







var ModulesService = /*#__PURE__*/function () {
  /**
   *
   * @param binders;
   * @param components;
   * @param formatters;
   * @param adapters;
   */
  function ModulesService(binders, components, formatters, adapters) {
    classCallCheck_default()(this, ModulesService);

    defineProperty_default()(this, "binder", void 0);

    defineProperty_default()(this, "component", void 0);

    defineProperty_default()(this, "formatter", void 0);

    defineProperty_default()(this, "adapter", void 0);

    this.binder = new binder_service/* BindersService */.Z(binders);
    this.component = new component_service/* ComponentService */.m(components);
    this.formatter = new formatter_service/* FormatterService */.H(formatters);
    this.adapter = new AdapterService(adapters);
  }

  createClass_default()(ModulesService, [{
    key: "regist",
    value: function regist(module) {
      if (!module) {
        console.error(module);
        throw new Error("The Riba module is falsy!");
      }

      if (module.binders) {
        this.binder.regists(module.binders);
      }

      if (module.components) {
        this.component.regists(module.components);
      }

      if (module.formatters) {
        this.formatter.regists(module.formatters);
      }

      if (module.adapters) {
        this.adapter.regists(module.adapters);
      }
    }
  }]);

  return ModulesService;
}();
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/riba.ts





function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






var Riba = /*#__PURE__*/function () {
  createClass_default()(Riba, [{
    key: "prefix",
    set: function set(value) {
      this._prefix = value;
      this._fullPrefix = value + "-";
    },
    get: function get() {
      return this._prefix;
    }
  }, {
    key: "fullPrefix",
    get: function get() {
      return this._fullPrefix;
    }
    /**
     * Creates an singleton instance of Riba.
     */

  }], [{
    key: "handler",

    /**
     * Sets the attribute on the element. If no binder above is matched it will fall
     * back to using this binder.
     */

    /**
     * Default event handler, calles the function defined in his binder
     * @see Binding.eventHandler
     * @param el The element the event was triggered from
     */
    value: function handler(context, ev, binding, el) {
      if (!this || !this.call) {
        var error = new Error("[rv-".concat(binding.type, "=\"").concat(binding.keypath, "\"] Event handler \"").concat(binding.keypath, "\" not found!\""));
        console.error(error, binding, el, binding.view.models);
        throw error;
      }

      this.call(context, ev, binding.view.models, el);
    }
    /** singleton instance */

  }]);

  function Riba() {
    classCallCheck_default()(this, Riba);

    defineProperty_default()(this, "module", void 0);

    defineProperty_default()(this, "binders", {});

    defineProperty_default()(this, "components", {});

    defineProperty_default()(this, "formatters", {});

    defineProperty_default()(this, "adapters", {});

    defineProperty_default()(this, "parseTemplate", parsers/* parseTemplate */.$M);

    defineProperty_default()(this, "parseType", parsers/* parseType */.gZ);

    defineProperty_default()(this, "templateDelimiters", ["{", "}"]);

    defineProperty_default()(this, "rootInterface", ".");

    defineProperty_default()(this, "preloadData", true);

    defineProperty_default()(this, "removeBinderAttributes", true);

    defineProperty_default()(this, "blockNodeNames", ["SCRIPT", "STYLE", "TEMPLATE", "CODE"]);

    defineProperty_default()(this, "_prefix", "rv");

    defineProperty_default()(this, "_fullPrefix", "rv-");

    defineProperty_default()(this, "forceComponentFallback", false);

    this.module = new ModulesService(this.binders, this.components, this.formatters, this.adapters);

    if (Riba.instance) {
      return Riba.instance;
    }

    Riba.instance = this;
  }
  /**
   * Merges an object literal into the corresponding global options.
   * @param options
   */


  createClass_default()(Riba, [{
    key: "configure",
    value: function configure(options) {
      if (!options) {
        return;
      }

      for (var _i = 0, _Object$entries = Object.entries(options); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = slicedToArray_default()(_Object$entries[_i], 2),
            option = _Object$entries$_i[0],
            value = _Object$entries$_i[1];

        switch (option) {
          case "binders":
            this.binders = _objectSpread(_objectSpread({}, this.binders), value);
            break;

          case "formatters":
            this.formatters = _objectSpread(_objectSpread({}, this.formatters), value);
            break;

          case "components":
            this.components = _objectSpread(_objectSpread({}, this.components), value);
            break;

          case "adapters":
            this.adapters = _objectSpread(_objectSpread({}, this.adapters), value);
            break;

          case "prefix":
            this.prefix = value;
            break;

          case "parseTemplate":
            this.parseTemplate = value;
            break;

          case "parseType":
            this.parseType = value;
            break;

          case "templateDelimiters":
            this.templateDelimiters = value;
            break;

          case "rootInterface":
            this.rootInterface = value;
            break;

          case "preloadData":
            this.preloadData = value;
            break;

          case "blockNodeNames":
            this.blockNodeNames = value;
            break;

          case "forceComponentFallback":
            this.forceComponentFallback = value;
            break;

          default:
            console.warn("Option not supported", option, value);
            break;
        }
      }
    }
  }, {
    key: "getViewOptions",
    value: function getViewOptions(options) {
      var viewOptions = {
        // EXTENSIONS
        adapters: {},
        binders: {},
        components: {},
        formatters: {},
        // other
        attributeBinders: {},
        // sightglass
        rootInterface: {},
        forceComponentFallback: false
      };

      if (options) {
        viewOptions.binders = _objectSpread(_objectSpread({}, viewOptions.binders), options.binders);
        viewOptions.formatters = _objectSpread(_objectSpread({}, viewOptions.formatters), options.formatters);
        viewOptions.components = _objectSpread(_objectSpread({}, viewOptions.components), options.components);
        viewOptions.adapters = _objectSpread(_objectSpread({}, viewOptions.adapters), options.adapters);
      }

      viewOptions.prefix = options && options.prefix || this.prefix;
      viewOptions.fullPrefix = viewOptions.prefix && viewOptions.prefix + "-" || this.fullPrefix;
      viewOptions.templateDelimiters = options && options.templateDelimiters || this.templateDelimiters;
      viewOptions.rootInterface = options && options.rootInterface || this.rootInterface;
      viewOptions.removeBinderAttributes = options && typeof options.removeBinderAttributes === "boolean" ? options.removeBinderAttributes : this.removeBinderAttributes;
      viewOptions.blockNodeNames = options && options.blockNodeNames || this.blockNodeNames;
      viewOptions.preloadData = options && typeof options.preloadData === "boolean" ? options.preloadData : this.preloadData;
      viewOptions.forceComponentFallback = options && typeof options.forceComponentFallback === "boolean" ? options.forceComponentFallback : this.forceComponentFallback;
      viewOptions.handler = options && options.handler || Riba.handler; // WORKAROUND for FakeHTMLElement

      if (viewOptions.forceComponentFallback) {
        window.forceComponentFallback = viewOptions.forceComponentFallback;
      } // merge extensions


      viewOptions.binders = _objectSpread(_objectSpread({}, this.binders), viewOptions.binders);
      viewOptions.formatters = _objectSpread(_objectSpread({}, this.formatters), viewOptions.formatters);
      viewOptions.components = _objectSpread(_objectSpread({}, this.components), viewOptions.components);
      viewOptions.adapters = _objectSpread(_objectSpread({}, this.adapters), viewOptions.adapters); // get all attributeBinders from available binders

      if (viewOptions.binders) {
        viewOptions.attributeBinders = Object.keys(viewOptions.binders).filter(function (key) {
          return key.indexOf("*") >= 1;
        } // Should contain, but not start with, *
        );
      }

      return viewOptions;
    }
    /**
     * Binds some data to a template / element. Returns a riba.View instance.
     */

  }, {
    key: "bind",
    value: function bind(el, models, options) {
      var viewOptions = this.getViewOptions(options);
      models = models || Object.create(null);
      observer/* Observer.updateOptions */.Q.updateOptions(viewOptions);
      var view = new src_view/* View */.G(el, models, viewOptions);
      view.bind();
      return view;
    }
  }]);

  return Riba;
}();

defineProperty_default()(Riba, "fallbackBinder", attribute_binder/* attributeBinder */.A);

defineProperty_default()(Riba, "instance", void 0);

window.Riba = Riba;

/***/ }),

/***/ 8886:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ BindersService
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3913);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2205);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8585);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9754);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _module_element_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3769);








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var BindersService = /*#__PURE__*/function (_ModuleElementService) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(BindersService, _ModuleElementService);

  var _super = _createSuper(BindersService);

  /**
   *
   * @param binders;
   */
  function BindersService(binders) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BindersService);

    _this = _super.call(this, binders);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default()(_this), "type", "binder");

    return _this;
  }
  /**
   * Regist a binder
   * @param binder
   * @param name  Overwrites the name to access the binder over
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BindersService, [{
    key: "regist",
    value: function regist(binder, fallbackName) {
      var forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (!binder || typeof binder.routine !== "function") {
        console.warn(new Error("Can not regist binder!"), binder);
        return this.elements;
      }

      var name = forceFallback ? fallbackName || binder.name : binder.name || fallbackName;

      if (!name) {
        console.warn(new Error("Binder name not found!"), binder);
        return this.elements;
      }

      this.elements[name] = binder;
      return this.elements;
    }
  }]);

  return BindersService;
}(_module_element_service__WEBPACK_IMPORTED_MODULE_7__/* .ModuleElementService */ .G);

/***/ }),

/***/ 8549:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "m": () => /* binding */ ComponentService
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3913);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2205);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8585);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9754);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _module_element_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3769);








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var ComponentService = /*#__PURE__*/function (_ModuleElementService) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(ComponentService, _ModuleElementService);

  var _super = _createSuper(ComponentService);

  /**
   *
   * @param components
   */
  function ComponentService(components) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, ComponentService);

    _this = _super.call(this, components);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default()(_this), "type", "components");

    return _this;
  }
  /**
   * Regist a component with his name
   * @param component
   * @param name
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(ComponentService, [{
    key: "regist",
    value: function regist(component, fallbackName) {
      var forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var name = forceFallback ? fallbackName || component.tagName : component.tagName || fallbackName;

      if (!name) {
        console.warn(new Error("Component name not found!"), component);
        return this.elements;
      }

      this.elements[name] = component;
      return this.elements;
    }
  }]);

  return ComponentService;
}(_module_element_service__WEBPACK_IMPORTED_MODULE_7__/* .ModuleElementService */ .G);

/***/ }),

/***/ 3901:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "H": () => /* binding */ FormatterService
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3913);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1506);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2205);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8585);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9754);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _module_element_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3769);








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var FormatterService = /*#__PURE__*/function (_ModuleElementService) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(FormatterService, _ModuleElementService);

  var _super = _createSuper(FormatterService);

  /**
   *
   */
  function FormatterService(formatters) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, FormatterService);

    _this = _super.call(this, formatters);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default()(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default()(_this), "type", "formatter");

    return _this;
  }
  /**
   * Regist a formatter with his name
   * @param formatter
   * @param name
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(FormatterService, [{
    key: "regist",
    value: function regist(formatter, fallbackName) {
      var forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var name = forceFallback ? fallbackName || formatter.name : formatter.name || fallbackName;

      if (!name) {
        throw new Error("Formatter name not found!");
      }

      this.elements[name] = formatter;
      return this.elements;
    }
  }]);

  return FormatterService;
}(_module_element_service__WEBPACK_IMPORTED_MODULE_7__/* .ModuleElementService */ .G);

/***/ }),

/***/ 8192:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "BindersService": () => /* reexport */ binder_service/* BindersService */.Z,
  "ComponentService": () => /* reexport */ component_service/* ComponentService */.m,
  "EventDispatcher": () => /* reexport */ EventDispatcher,
  "FormatterService": () => /* reexport */ formatter_service/* FormatterService */.H,
  "HttpService": () => /* reexport */ HttpService,
  "Utils": () => /* reexport */ Utils,
  "getDataset": () => /* reexport */ getDataset,
  "parseAttribute": () => /* reexport */ parseAttribute
});

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/services/binder.service.ts
var binder_service = __webpack_require__(8886);
// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/services/component.service.ts
var component_service = __webpack_require__(8549);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/services/event-dispatcher.service.ts




/**
 * Little Dispatcher inspired by MicroEvent.js
 *
 * @type {object}
 */
var EventDispatcher = /*#__PURE__*/function () {
  createClass_default()(EventDispatcher, null, [{
    key: "getInstance",
    value: function getInstance(namespace) {
      var result = EventDispatcher.instances[namespace];

      if (!result) {
        throw new Error("No EventDispatcher instance with namespace ".concat(namespace, " found!"));
      }

      return result;
    }
    /**
     * Object that keeps all the events
     *
     * @readOnly
     * @type {object}
     */

  }]);

  /**
   * Creates an singleton instance of Dispatcher.
   */
  function EventDispatcher() {
    var namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";

    classCallCheck_default()(this, EventDispatcher);

    defineProperty_default()(this, "events", {});

    defineProperty_default()(this, "namespace", void 0);

    this.namespace = namespace;

    if (EventDispatcher.instances[this.namespace]) {
      return EventDispatcher.instances[this.namespace];
    }

    EventDispatcher.instances[this.namespace] = this;
    return EventDispatcher.instances[this.namespace];
  }
  /**
   * Bind a callback to an event
   *
   * @param eventName
   * @param function
   */


  createClass_default()(EventDispatcher, [{
    key: "on",
    value: function on(e, f) {
      this.events[e] = this.events[e] || [];
      this.events[e].push(f);
    }
    /**
     * Unbind event
     *
     * @param eventName
     * @param function
     */

  }, {
    key: "off",
    value: function off(e, f) {
      if (e in this.events === false) {
        return;
      }

      var idx = this.events[e].indexOf(f);

      if (idx !== -1) {
        this.events[e].splice(idx, 1);
      }
    }
    /**
     * Fire the event running all the event associated to it
     *
     * @param eventName
     * @param args
     */

  }, {
    key: "trigger",
    value: function trigger(e) {
      // e, ...args
      if (e in this.events === false) {
        return;
      }

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      for (var i = 0; i < this.events[e].length; i++) {
        this.events[e][i].apply(this, args);
      }
    }
  }]);

  return EventDispatcher;
}();

defineProperty_default()(EventDispatcher, "instances", {});


// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/services/formatter.service.ts
var formatter_service = __webpack_require__(3901);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/services/http.service.ts






function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var HttpService = /*#__PURE__*/function () {
  function HttpService() {
    classCallCheck_default()(this, HttpService);
  }

  createClass_default()(HttpService, null, [{
    key: "setRequestHeaderEachRequest",

    /**
     * Set header for each xhr and jquery request
     * @param name Header name
     * @param value Hander value
     */
    value: function setRequestHeaderEachRequest(name, value) {
      this._requestHeadersEachRequest.push({
        name: name,
        value: value
      }); // console.debug(
      //   "[HttpService] setRequestHeaderEachRequest",
      //   name,
      //   value,
      //   this._requestHeadersEachRequest
      // );

    }
    /**
     * Load JSON-encoded data from the server using a GET HTTP request.
     * @param url A string containing the URL to which the request is sent.
     * @param data A plain object or string that is sent to the server with the request.
     * @see https://api.jquery.com/jquery.getjson/
     */

  }, {
    key: "getJSON",
    value: function () {
      var _getJSON = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(url, data) {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.fetch(url, "GET", data, "json"));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getJSON(_x2, _x3) {
        return _getJSON.apply(this, arguments);
      }

      return getJSON;
    }()
    /**
     * Load data from the server using a HTTP POST request.
     * @param url A string containing the URL to which the request is sent.
     * @param data A plain object or string that is sent to the server with the request.
     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
     * @see https://api.jquery.com/jquery.post/
     */

  }, {
    key: "post",
    value: function () {
      var _post = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2(url, data, dataType) {
        var headers,
            options,
            _args2 = arguments;
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                headers = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};
                options = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : {};
                return _context2.abrupt("return", this.fetch(url, "POST", data, dataType, headers, options));

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function post(_x4, _x5, _x6) {
        return _post.apply(this, arguments);
      }

      return post;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee3(url, data, dataType) {
        var headers,
            options,
            _args3 = arguments;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                headers = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {};
                options = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : {};
                return _context3.abrupt("return", this.fetch(url, "DELETE", data, dataType, headers, options));

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _delete(_x7, _x8, _x9) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "put",
    value: function () {
      var _put = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee4(url, data, dataType) {
        var headers,
            options,
            _args4 = arguments;
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                headers = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : {};
                options = _args4.length > 4 && _args4[4] !== undefined ? _args4[4] : {};
                return _context4.abrupt("return", this.fetch(url, "PUT", data, dataType, headers, options));

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function put(_x10, _x11, _x12) {
        return _put.apply(this, arguments);
      }

      return put;
    }()
    /**
     * Load data from the server using a HTTP GET request.
     * @param url A string containing the URL to which the request is sent.
     * @param data A plain object or string that is sent to the server with the request.
     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
     * @see https://api.jquery.com/jquery.get/
     */

  }, {
    key: "get",
    value: function () {
      var _get = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee5(url, data, dataType) {
        var headers,
            options,
            _args5 = arguments;
        return regenerator_default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                headers = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : {};
                options = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : {};
                return _context5.abrupt("return", this.fetch(url, "GET", data, dataType, headers, options));

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function get(_x13, _x14, _x15) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
    /**
     *
     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
     */

  }, {
    key: "parseDataType",
    value: function parseDataType(dataType) {
      var headers = {};
      var contentType = "application/x-www-form-urlencoded";
      var accept = "*/*";

      switch (dataType) {
        case "script":
          contentType = "application/javascript";
          break;

        case "json":
          contentType = "application/json";
          accept = "application/json, text/javascript";
          break;

        case "xml":
          contentType = "application/xml";
          accept = "application/xml, text/xml";
          break;

        case "text":
          contentType = "text/plain";
          accept = "text/plain";
          break;

        case "html":
          contentType = "text/html";
          accept = "text/html";
          break;

        case "form":
          contentType = "application/x-www-form-urlencoded";
          break;

        /*case "multi-form":
          contentType = "multipart/form-data";
          break;*/
      }

      if (contentType) {
        headers["Content-Type"] = contentType; // tslint:disable-next-line:no-string-literal

        headers["Accept"] = accept;
      }

      return headers;
    }
    /**
     * Start an XMLHttpRequest() and return a Promise
     *
     * @param url
     * @param xhrTimeout Time in millisecond after the xhr request goes in timeout
     */

  }, {
    key: "xhr",
    value: function xhr(url) {
      var _this = this;

      var xhrTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
      var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "GET";
      var dataType = arguments.length > 3 ? arguments[3] : undefined;
      var data = arguments.length > 4 ? arguments[4] : undefined;
      return new Promise(function (resolve, reject) {
        var req = new XMLHttpRequest();

        req.onreadystatechange = function () {
          if (req.readyState === 4) {
            if (req.status === 200) {
              if (typeof dataType === "string" && (dataType === "json" || dataType.indexOf("json") !== -1)) {
                try {
                  var responseText = JSON.parse(req.responseText);
                  resolve(responseText);
                } catch (error) {
                  // If json can't be parsed
                  return resolve(req.responseText);
                }
              }

              return resolve(req.responseText);
            } else {
              return reject(req);
            }
          }
        };

        req.ontimeout = function () {
          return reject(new Error("xhr: Timeout exceeded"));
        };

        req.open(method, url);
        req.timeout = xhrTimeout; // headers

        var _iterator = _createForOfIteratorHelper(_this._requestHeadersEachRequest),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var header = _step.value;
            req.setRequestHeader(header.name, header.value);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (dataType) {
          var dataTypeHeader = _this.parseDataType(dataType);

          if (dataTypeHeader["Content-Type"]) {
            req.setRequestHeader("Content-Type", dataTypeHeader["Content-Type"]);
          }

          if (dataTypeHeader.Accept) {
            req.setRequestHeader("Accept", dataTypeHeader.Accept);
          }
        }

        req.send(method !== "GET" && data ? JSON.stringify(data) : data);
      });
    }
  }, {
    key: "fetch",
    value: function (_fetch) {
      function fetch(_x) {
        return _fetch.apply(this, arguments);
      }

      fetch.toString = function () {
        return _fetch.toString();
      };

      return fetch;
    }( /*#__PURE__*/function () {
      var _ref = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee6(url) {
        var method,
            data,
            dataType,
            headers,
            options,
            body,
            _iterator2,
            _step2,
            header,
            cache,
            _args6 = arguments;

        return regenerator_default().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                method = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : "GET";
                data = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};
                dataType = _args6.length > 3 ? _args6[3] : undefined;
                headers = _args6.length > 4 && _args6[4] !== undefined ? _args6[4] : {};
                options = _args6.length > 5 && _args6[5] !== undefined ? _args6[5] : {};

                if (!fetch) {
                  _context6.next = 13;
                  break;
                }

                // headers
                _iterator2 = _createForOfIteratorHelper(this._requestHeadersEachRequest);

                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    header = _step2.value;
                    headers[header.name] = header.value;
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }

                if (dataType) {
                  headers = (0,type/* concat */.zo)(false, headers, this.parseDataType(dataType));
                }

                if (!options.crossDomain && !headers["X-Requested-With"]) {
                  headers["X-Requested-With"] = "XMLHttpRequest";
                }

                cache = options.cache ? options.cache : "default";

                if (method === "GET" && data) {
                  url = url + "?" + new URLSearchParams(data);
                } else if (data) {
                  if (dataType === "form") {
                    body = new URLSearchParams(data);
                  } else {
                    body = JSON.stringify(data);
                  }
                } // console.debug("[HttpService] url", url);
                // console.debug("[HttpService] method", method);
                // console.debug("[HttpService] body", body);
                // console.debug(
                //   "[HttpService] headers",
                //   headers,
                //   this._requestHeadersEachRequest
                // );


                return _context6.abrupt("return", fetch(url, {
                  credentials: "same-origin",
                  cache: cache,
                  method: method,
                  body: body,
                  headers: headers
                }).then(function (response) {
                  if (response.status >= 400) {
                    throw response;
                  }

                  if (typeof dataType === "string" && (dataType === "json" || dataType.indexOf("json") !== -1) && typeof response.json === "function") {
                    try {
                      return response.json();
                    } catch (error) {
                      return response.text();
                    }
                  }

                  return response.text();
                })["catch"](function (error) {
                  // console.error(error);
                  throw error;
                }));

              case 13:
                return _context6.abrupt("return", this.xhr(url, undefined, method, dataType, data));

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function (_x16) {
        return _ref.apply(this, arguments);
      };
    }())
    /**
     * Header name value pair to send on each request
     */

  }]);

  return HttpService;
}();

defineProperty_default()(HttpService, "_requestHeadersEachRequest", []);
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/dom.ts
var dom = __webpack_require__(8277);
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/services/utils.ts



/**
 * Just a class with some helpful functions
 *
 * @export
 * @class Utils
 */

var Utils = /*#__PURE__*/function () {
  function Utils() {
    classCallCheck_default()(this, Utils);
  }

  createClass_default()(Utils, null, [{
    key: "domIsReady",

    /**
     * Cross-browser Document Ready check
     * @see https://www.competa.com/blog/cross-browser-document-ready-with-vanilla-javascript/
     * @param callback
     */
    value: function domIsReady(callback) {
      console.warn("Utils.domIsReady is deprecated, use import { ready } from '@ribajs/utils/src/dom' instead");
      return (0,dom/* ready */.Cd)(callback);
    }
  }]);

  return Utils;
}();
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/services/dom.ts

/**
 * TODO move Dom utils here
 */

var parseAttribute = function parseAttribute(attr) {
  var value = attr;

  if (attr === "true") {
    value = true;
  } else if (attr === "false") {
    value = false;
  } else if (attr === "null") {
    value = null;
  } else if (attr === "undefined") {
    value = undefined;
  } else if (attr === "") {
    value = undefined;
  } else if (!isNaN(Number(attr))) {
    value = Number(attr); // If number is too large store the value as string

    if (value >= Number.MAX_SAFE_INTEGER) {
      value = attr;
    }
  } else {
    var jsonString = (0,type/* parseJsonString */.uO)(value);
    value = jsonString ? jsonString : value;
  }

  return value;
};
var getDataset = function getDataset(element) {
  var dataset = (0,type/* clone */.d9)(false, element.dataset);

  for (var attr in dataset) {
    if (dataset[attr]) {
      dataset[attr] = parseAttribute(dataset[attr]);
    }
  }

  return dataset;
};
// CONCATENATED MODULE: ./node_modules/@ribajs/core/src/services/index.ts








/***/ }),

/***/ 3769:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": () => /* binding */ ModuleElementService
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3913);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4498);




var ModuleElementService = /*#__PURE__*/function () {
  /**
   *
   * @param elements;
   */
  function ModuleElementService(elements) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, ModuleElementService);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "elements", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "type", void 0);

    this.elements = elements;
  }
  /**
   * Regist a element
   * @param element
   * @param name  Overwrites the name to access the element over
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(ModuleElementService, [{
    key: "regists",

    /**
     * Regist a set / array of elements
     * @param elements
     */
    value: function regists(elements) {
      if (!(0,_ribajs_utils_src_type__WEBPACK_IMPORTED_MODULE_3__/* .isObject */ .Kn)(elements)) {
        throw new Error("Elements to register must be an object of elements");
      }

      for (var _key in elements) {
        if (elements[_key] && _key !== "__esModule") {
          var _element = elements[_key];
          this.regist(_element, _key);
        }
      }

      return this.elements;
    }
  }]);

  return ModuleElementService;
}();

/***/ }),

/***/ 3075:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony import */ var _polyfills_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(581);
/* harmony import */ var _polyfills_module__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polyfills_module__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ 581:
/***/ (() => {

// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill#Polyfill
(function () {
  if (typeof window.CustomEvent === "function") {
    return false;
  }

  function CustomEvent(event, params) {
    params = params || {
      bubbles: false,
      cancelable: false,
      detail: undefined
    };
    var evt = document.createEvent("CustomEvent");
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  }

  CustomEvent.prototype = window.Event.prototype;
  window.CustomEvent = CustomEvent;
})();

/***/ }),

/***/ 5225:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": () => /* binding */ View
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4575);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3913);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9713);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _riba__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2505);
/* harmony import */ var _binding__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(155);
/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6872);




function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }





/**
 * A collection of bindings built from a set of parent nodes.
 */
var View = /*#__PURE__*/function () {
  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(View, null, [{
    key: "create",

    /**
     * Binder for mustache style `{model.property}` text Binders
     */

    /**
     * Helper function to create a new view inside of a binding
     * @param bindin
     * @param models
     * @param anchorEl
     */
    value: function create(binding, models, anchorEl) {
      var _binding$marker;

      var template = binding.el.cloneNode(true);
      var view = new View(template, models, binding.view.options);
      view.bind();

      if (!(binding === null || binding === void 0 ? void 0 : (_binding$marker = binding.marker) === null || _binding$marker === void 0 ? void 0 : _binding$marker.parentNode)) {
        console.warn("[View]: No parent node for binding!");
      } else {
        binding.marker.parentNode.insertBefore(template, anchorEl);
      }

      return view;
    }
  }]);

  // public componentView: View | null = null;

  /**
   * The DOM elements and the model objects for binding are passed into the
   * constructor along with any local options that should be used throughout the
   * context of the view and it's bindings.
   * @param els
   * @param models
   * @param options
   */
  function View(els, models, options) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, View);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "els", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "models", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "options", void 0);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "bindings", []);

    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(this, "webComponents", []);

    if (Array.isArray(els)) {
      this.els = els;
    } else {
      this.els = [els];
    }

    this.models = models;
    this.options = options;
    this.build();
  }
  /**
   * Regist all components
   * This can sometimes be useful so that the browser automatically recognizes whether a component is inserted into the dom.
   * However, the components are already registered when they are found by riba in the DOM.
   *
   * Please note, this method does not support the browser fallback for browsers that cannot use custom elements.
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(View, [{
    key: "registComponents",
    value: function registComponents() {
      for (var nodeName in this.options.components) {
        if (this.options.components[nodeName]) {
          // Not already registred?
          if (!customElements.get(nodeName)) {
            var COMPONENT = this.options.components[nodeName];
            this.registComponent(COMPONENT, nodeName);
          }
        }
      }
    }
    /**
     * Binds all of the current bindings for this view.
     */

  }, {
    key: "bind",
    value: function bind() {
      var _this = this;

      this.bindings.forEach(function (binding) {
        binding.bind();
      });
      this.webComponents.forEach(function (webcomponent) {
        webcomponent._fallback = !!_this.options.forceComponentFallback;
        webcomponent.connectedFallbackCallback();
      });
    }
    /**
     * Unbinds all of the current bindings for this view.
     */

  }, {
    key: "unbind",
    value: function unbind() {
      var _this2 = this;

      if (Array.isArray(this.bindings)) {
        this.bindings.forEach(function (binding) {
          binding.unbind();

          if (binding.el.setAttribute && _this2.options.removeBinderAttributes) {// TODO reset attribute ?
            // binding.el.setAttribute(attribute.name);
          }
        });
        this.webComponents.forEach(function (webcomponent) {
          webcomponent.disconnectedFallbackCallback();
        });
      } // TODO fallback to unbind web components

    }
    /**
     * Syncs up the view with the model by running the routines on all bindings.
     */

  }, {
    key: "sync",
    value: function sync() {
      this.bindings.forEach(function (binding) {
        if (binding.sync) {
          binding.sync();
        }
      });
    }
    /**
     * Publishes the input values from the view back to the model (reverse sync).
     */

  }, {
    key: "publish",
    value: function publish() {
      this.bindings.forEach(function (binding) {
        if (binding.binder && binding.binder.publishes && binding.publish) {
          binding.publish();
        }
      });
    }
    /**
     * Updates the view's models along with any affected bindings.
     * @param models
     */

  }, {
    key: "update",
    value: function update() {
      var _this3 = this;

      var models = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      Object.keys(models).forEach(function (key) {
        _this3.models[key] = models[key];
      });

      var _iterator = _createForOfIteratorHelper(this.bindings),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var binding = _step.value;
          // if ((binding as Binding).update) {
          binding.update(models); // }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * Parses the DOM tree and builds `Binding` instances for every matched
     * binding declaration.
     */

  }, {
    key: "build",
    value: function build() {
      this.bindings = []; // this.bindings || [];

      if (!this.options.templateDelimiters) {
        throw new Error("templateDelimiters required");
      }

      var elements = this.els;

      for (var i = 0; i < elements.length; i++) {
        var element = elements[i];

        if (element) {
          (0,_parsers__WEBPACK_IMPORTED_MODULE_5__/* .parseNode */ .T3)(this, element, this.options.templateDelimiters);
        }
      }

      this.bindings.sort(View.bindingComparator);
    }
  }, {
    key: "traverse",
    value: function traverse(node) {
      var bindingPrefix;

      if (this.options.fullPrefix) {
        bindingPrefix = this.options.fullPrefix;
      } else {
        // TODO FIXME
        bindingPrefix = this.options.prefix + "-";
      }

      if (!bindingPrefix) {
        throw new Error("prefix is required");
      }
      /** If true stop / block the parseNode recursion */


      var block = this.options.blockNodeNames.indexOf(node.nodeName) !== -1;
      var attributes = node.attributes;
      var bindInfos = [];
      var attributeBinders = this.options.attributeBinders; // bind attribute binders if available

      if (attributes && this.options.binders) {
        for (var i = 0, len = attributes.length; i < len; i++) {
          var nodeName = null;
          var binder = null;
          var identifier = null;
          var attribute = attributes[i]; // if attribute starts with the binding prefix. E.g. rv

          if (attribute.name.indexOf(bindingPrefix) === 0) {
            nodeName = attribute.name.slice(bindingPrefix.length); // if binder is not a attributeBinder binder should be setted

            if (this.options.binders[nodeName]) {
              binder = this.options.binders[nodeName];
            }

            if (binder === null) {
              // seems to be a star binder (because binder was not set)
              // Check if any attributeBinder matchs
              for (var k = 0; k < attributeBinders.length; k++) {
                identifier = attributeBinders[k];
                var regexp = new RegExp("^".concat(identifier.replace(/\*/g, ".+"), "$"));

                if (regexp.test(nodeName)) {
                  binder = this.options.binders[identifier];
                  break;
                }
              }
            }

            if (binder === null) {
              if (this.options.binders["*"]) {
                binder = this.options.binders["*"];
                identifier = "*";
              } else {
                binder = _riba__WEBPACK_IMPORTED_MODULE_3__/* .Riba.fallbackBinder */ .D.fallbackBinder;
              }
            } // if block is set, do not bind its childs (this means the binder bound it by itself)
            // and build binding directly (do not push it to bindInfos array)


            if (binder.block) {
              this.buildBinding(node, nodeName, attribute.value, binder, identifier);

              if (node.removeAttribute && this.options.removeBinderAttributes) {
                node.removeAttribute(attribute.name);
              }

              return true;
            }

            bindInfos.push({
              attr: attribute,
              binder: binder,
              nodeName: nodeName,
              identifier: identifier
            });
          }
        }

        for (var _i = 0; _i < bindInfos.length; _i++) {
          var bindInfo = bindInfos[_i];
          this.buildBinding(node, bindInfo.nodeName, bindInfo.attr.value, bindInfo.binder, bindInfo.identifier);

          if (node.removeAttribute && this.options.removeBinderAttributes) {
            node.removeAttribute(bindInfo.attr.name);
          }
        }
      } // bind components


      if (!block && !node._bound && this.options.components) {
        var _nodeName = node.nodeName.toLowerCase();

        var COMPONENT = this.options.components[_nodeName];

        if (COMPONENT) {
          this.registComponentWithFallback(node, COMPONENT, _nodeName);
          block = true;
        }
      }

      return block;
    }
  }, {
    key: "buildBinding",
    value: function buildBinding(node, type, declaration, binder, identifier) {
      var parsedDeclaration = (0,_parsers__WEBPACK_IMPORTED_MODULE_5__/* .parseDeclaration */ .ER)(declaration);
      var keypath = parsedDeclaration.keypath;
      var pipes = parsedDeclaration.pipes;
      this.bindings.push(new _binding__WEBPACK_IMPORTED_MODULE_4__/* .Binding */ .K(this, node, type, keypath, binder, pipes, identifier));
    }
  }, {
    key: "registComponentWithFallback",
    value: function registComponentWithFallback(node, COMPONENT, nodeName) {
      nodeName = nodeName || COMPONENT.tagName; // Fallback

      if (!window.customElements || this.options.forceComponentFallback) {
        this.registComponentFallback(node, COMPONENT, nodeName);
      } else {
        // if node.constructor is not HTMLElement and not HTMLUnknownElement, it was registed
        // @see https://stackoverflow.com/questions/27334365/how-to-get-list-of-registered-custom-elements
        if (customElements.get(nodeName) || node.constructor !== HTMLElement && node.constructor !== HTMLUnknownElement) {// console.warn(`Web component already defined`, node.constructor);
        } else {
          try {
            this.registComponent(COMPONENT, nodeName);
          } catch (error) {
            console.error(error);
            this.registComponentFallback(node, COMPONENT, nodeName);
          }
        }
      }
    }
    /**
     * Regist a custom element using the fallback logic for browsers that cannot native use custom elements.
     * @param node
     * @param COMPONENT
     * @param nodeName
     */

  }, {
    key: "registComponentFallback",
    value: function registComponentFallback(node, COMPONENT, nodeName) {
      nodeName = nodeName || COMPONENT.tagName;
      console.warn("Fallback for Webcomponent ".concat(nodeName));
      var component = new COMPONENT(node);
      component._fallback = !!this.options.forceComponentFallback;
      this.webComponents.push(component);
    }
    /**
     * Regist a custom element using the native customElements feature.
     * @param COMPONENT
     * @param nodeName
     */

  }, {
    key: "registComponent",
    value: function registComponent(COMPONENT, nodeName) {
      if (!window.customElements || this.options.forceComponentFallback) {
        console.warn("customElements not supported by your browser! Do nothing.");
        return;
      }

      nodeName = nodeName || COMPONENT.tagName;
      window.customElements.define(COMPONENT.tagName, COMPONENT); // TODO FIXME as CustomElementConstructor since TypeScript 3.8
      // TODO ?? call unbind (on unbind this view) of this component instance to unbind this view
      // (not disconnectedCallback / disconnectedFallbackCallback, this is automatically called from customElements)

      window.customElements.get(nodeName);
    }
  }]);

  return View;
}();

_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(View, "mustacheTextBinder", {
  name: "mustache-text",
  routine: function routine(node, value) {
    node.data = value != null ? value : "";
  }
});

_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(View, "bindingComparator", function (a, b) {
  var _a$binder, _b$binder;

  var aPriority = ((_a$binder = a.binder) === null || _a$binder === void 0 ? void 0 : _a$binder.priority) || 0;
  var bPriority = ((_b$binder = b.binder) === null || _b$binder === void 0 ? void 0 : _b$binder.priority) || 0;
  return bPriority - aPriority;
});

/***/ }),

/***/ 9468:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "E": () => /* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_0__.E
/* harmony export */ });
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9701);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3730);
/* harmony reexport (checked) */ if(__webpack_require__.o(_types__WEBPACK_IMPORTED_MODULE_1__, "routerModule")) __webpack_require__.d(__webpack_exports__, { "routerModule": function() { return _types__WEBPACK_IMPORTED_MODULE_1__.routerModule; } });



/***/ }),

/***/ 9701:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "E": () => /* reexport */ HistoryManager
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./node_modules/@ribajs/history/src/services/history-manager.service.ts




/**
 * HistoryManager helps to keep track of the navigation
 */
var HistoryManager = /*#__PURE__*/function () {
  /**
   * Keep track of the status in historic order
   */
  function HistoryManager() {
    classCallCheck_default()(this, HistoryManager);

    defineProperty_default()(this, "history", []);

    if (HistoryManager.instance) {
      return HistoryManager.instance;
    }

    HistoryManager.instance = this;
    return HistoryManager.instance;
  }
  /**
   * Return information about the current status
   */


  createClass_default()(HistoryManager, [{
    key: "currentStatus",
    value: function currentStatus() {
      return this.history[this.history.length - 1];
    }
    /**
     * Return information about the previous status
     */

  }, {
    key: "prevStatus",
    value: function prevStatus() {
      var history = this.history;

      if (history.length < 2) {
        return null;
      }

      return history[history.length - 2];
    }
    /**
     * Add a new set of url and namespace
     */

  }, {
    key: "add",
    value: function add(url) {
      var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this.history.push({
        namespace: namespace,
        url: url
      });
    }
  }]);

  return HistoryManager;
}();

defineProperty_default()(HistoryManager, "instance", void 0);
// CONCATENATED MODULE: ./node_modules/@ribajs/history/src/services/index.ts


/***/ }),

/***/ 3730:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2224);
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_state__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_state__WEBPACK_IMPORTED_MODULE_0__, "routerModule")) __webpack_require__.d(__webpack_exports__, { "routerModule": function() { return _state__WEBPACK_IMPORTED_MODULE_0__.routerModule; } });


/***/ }),

/***/ 2224:
/***/ (() => {



/***/ }),

/***/ 350:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ binders
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(319);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/binders/i18n/i18n-star.binder.ts



/**
 *
 */
var i18nStarBinderWrapper = function i18nStarBinderWrapper(localesService) {
  return {
    name: "i18n-*",
    block: false,
    priority: 0,
    bind: function bind(el) {
      var _this = this;

      var getElementData = function getElementData() {
        var customData = {};
        customData.type = el.type;
        customData.tagName = el.tagName;
        customData.contenteditable = el.getAttribute("contenteditable") ? true : false;
        customData.isRadio = customData.tagName === "INPUT" && customData.type === "radio";
        return customData;
      };

      this.customData = getElementData();
      this.customData.i18n = localesService;
      this.customData.vars = {};
      this.customData.translateMePathString = null;
      this.customData.properties = [];
      this.customData.attributeName = this.args[0].toString();

      this.customData.applyTranslation = function (locale) {
        if (!locale) {
          if (_this.customData.i18n.showMissingTranslation) {
            locale = "translation missing: \"".concat(_this.customData.properties.join("."), "\"");
          } else {
            return;
          }
        }

        if (_this.customData.attributeName === "html") {
          el.innerHTML = locale;
        } else if (_this.customData.attributeName === "text") {
          el.innerText = locale;
        } else if (_this.customData.attributeName === "value") {
          // TODO support also: https://github.com/JumpLinkNetwork/tinybind/blob/master/src/binders/basic/value.binder.ts#L51
          if (_this.customData.contenteditable) {
            el.innerHTML = locale;
          } else {
            el.value = locale;
          }
        } else {
          el.setAttribute(_this.customData.attributeName, locale);
        }
      };

      this.customData.parseVars = function (_el) {
        // parse templates to vars
        var newVars = _this.customData.i18n.parseTemplateVars(_el);

        _this.customData.vars = (0,type/* concat */.zo)(true, _this.customData.vars, newVars); // if (Object.keys(this.customData.vars).length) {
        //   console.warn('parsed templates vars', this.customData.vars);
        // }
        // parse data attributes to vars

        _this.customData.vars = (0,type/* concat */.zo)(true, _this.customData.vars, _el.dataset); // if (Object.keys(this.customData.vars).length) {
        //   console.warn('parsed attribute vars', this.customData.vars);
        // }
        // Parse templates wich have his own translations

        _this.customData.langVars = _this.customData.i18n.parseLocalVars(_el); // if (this.customData.langVars && Object.keys(this.customData.langVars).length) {
        //   console.warn('parsed own translations', this.customData.langVars);
        // }
      };

      this.customData.translate = function (langcode) {
        // If language service is not ready do nothing
        if (!_this.customData.i18n.ready) {
          return;
        }

        if (!langcode) {
          langcode = _this.customData.i18n.getLangcode();

          if (!langcode) {
            console.error("Langcode is requred", langcode);
            return;
          }
        } // translate by using the already translated language variable


        if (_this.customData.langVars && _this.customData.langVars[langcode]) {
          return _this.customData.applyTranslation(_this.customData.langVars[langcode]);
        }

        if (!_this.customData.properties || _this.customData.properties.length === 0) {
          // get the default translation if available
          if (_this.customData.langVars && _this.customData.langVars["default"]) {
            // console.warn('Translate by default', this.customData.langVars.default);
            return _this.customData.applyTranslation(_this.customData.langVars["default"]);
          }
        } // translate by properies, e.g. de.cart.add


        return _this.customData.i18n.get([langcode].concat(toConsumableArray_default()(_this.customData.properties)), _this.customData.vars).then(function (local) {
          if (local && typeof local === "string") {
            // console.warn('Translate by properties', [langcode, ...this.customData.properties], local);
            return _this.customData.applyTranslation(local);
          } // get the default translation if available


          if (_this.customData.langVars && _this.customData.langVars["default"]) {
            // console.warn('Translate by default as fallback', this.customData.langVars.default);
            return _this.customData.applyTranslation(_this.customData.langVars["default"]);
          }

          return _this.customData.applyTranslation(null);
        })["catch"](function (error) {
          console.error(error);
        });
      };

      this.customData.onAttributeChanged = function (data) {
        if (data.detail.name.startsWith("data-")) {
          var varName = data.detail.name.slice(5);
          var newVar = {};
          newVar[varName] = data.detail.newValue; // console.warn('binder-changed newVar', newVar);

          _this.customData.vars = (0,type/* concat */.zo)(true, _this.customData.vars, newVar);

          _this.customData.translate();
        }
      };

      this.customData.onLanguageChanged = function (langcode, initial) {
        // Do not translate on inital language change, we use the ready event for this
        if (!initial) {
          _this.customData.translate(langcode);
        }
      };
      /**
       * Initial stuff wee need to do after the language service is ready
       */


      this.customData.initOnReady = function (langcode, translationNeeded) {
        // Translate on translation service ready if needed
        if (translationNeeded) {
          _this.customData.translate(langcode);
        } // Translate if language changes


        _this.customData.i18n.event.on("changed", _this.customData.onLanguageChanged); // Translate if binder attribute event is changed


        el.addEventListener("binder-changed", _this.customData.onAttributeChanged);
      };
    },
    routine: function routine(el, translateMePathString) {
      if (this.customData.translateMePathString === null) {
        // if this is the first call of this function
        this.customData.translateMePathString = translateMePathString;

        if (translateMePathString) {
          this.customData.properties = this.customData.translateMePathString.split(".");
        }

        this.customData.parseVars(el); // Translate if language is ready

        if (this.customData.i18n.ready) {
          this.customData.initOnReady(this.customData.i18n.getLangcode(), this.customData.i18n.currentLangcode !== this.customData.i18n.initalLangcode || !localesService.doNotTranslateDefaultLanguage);
        } else {
          this.customData.i18n.event.on("ready", this.customData.initOnReady);
        }
      } else if (this.customData.translateMePathString !== translateMePathString) {
        // If translate string was changed
        this.customData.translateMePathString = translateMePathString;
        this.customData.properties = this.customData.translateMePathString.split(".");
        this.customData.parseVars(el);
        this.customData.translate();
      }
    },
    unbind: function unbind() {
      this.el.removeEventListener("binder-changed", this.customData.onAttributeChanged);
      this.customData.i18n.event.off("changed", this.customData.onLanguageChanged);
    }
  };
};
// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/binders/index.ts

/* harmony default export */ const binders = (function (localesService) {
  return {
    i18nStarBinder: i18nStarBinderWrapper(localesService)
  };
});

/***/ }),

/***/ 6909:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "V": () => /* reexport */ AI18nSwitcherComponent,
  "Z": () => /* binding */ components
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(6525);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(2205);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(8585);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(9754);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/index.ts
var src = __webpack_require__(425);
// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/components/abstract-switcher/switcher.abstract.component.ts











function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var AI18nSwitcherComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(AI18nSwitcherComponent, _Component);

  var _super = _createSuper(AI18nSwitcherComponent);

  function AI18nSwitcherComponent(element) {
    var _this;

    classCallCheck_default()(this, AI18nSwitcherComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "localesService", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      langcodes: [],
      "switch": _this["switch"],
      toggle: _this.toggle,
      ready: false
    });

    return _this;
  }
  /**
   * Switch to language by langcode
   * @param langcode
   * @param event
   */


  createClass_default()(AI18nSwitcherComponent, [{
    key: "switch",
    value: function _switch(langcode, event) {
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }

      if (!langcode.active) {
        this.setLangcode(langcode.code);
      }
    }
    /**
     * Toggle language, makes only sense if you have only two languages
     * @param langcode
     * @param event
     */

  }, {
    key: "toggle",
    value: function toggle(event) {
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }

      for (var i in this.scope.langcodes) {
        if (Object.prototype.hasOwnProperty.call(this.scope.langcodes, i)) {
          if (this.scope.langcodes[i].active !== true) {
            this.setLangcode(this.scope.langcodes[i].code);
            return;
          }
        }
      }
    }
  }, {
    key: "init",
    value: function () {
      var _init = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(observedAttributes) {
        var _this2 = this;

        var langcode;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.localesService.ready) {
                  _context.next = 4;
                  break;
                }

                langcode = this.localesService.getLangcode();

                if (!langcode) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", this.initLocales(langcode).then(function () {
                  return get_default()(getPrototypeOf_default()(AI18nSwitcherComponent.prototype), "init", _this2).call(_this2, observedAttributes);
                }));

              case 4:
                return _context.abrupt("return", new Promise(function (resolve) {
                  _this2.localesService.event.on("ready", function (langcode)
                  /*, translationNeeded: boolean*/
                  {
                    return _this2.initLocales(langcode).then(function ()
                    /*langcodes*/
                    {
                      return get_default()(getPrototypeOf_default()(AI18nSwitcherComponent.prototype), "init", _this2).call(_this2, observedAttributes).then(function (view) {
                        resolve(view);
                      });
                    });
                  });
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "initLocales",
    value: function () {
      var _initLocales = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2(langcode) {
        var _this3 = this;

        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.localesService.getAvailableLangcodes().then(function (langcodes) {
                  _this3.scope.langcodes = langcodes; // set active langcodes

                  _this3.scope.langcodes.forEach(function (langCode) {
                    langCode.active = langCode.code === langcode;
                  });

                  return _this3.scope.langcodes;
                }).then(function (langcodes) {
                  _this3.localesService.event.on("changed", function (changedLangcode)
                  /*, initial: boolean*/
                  {
                    // Activate localcode and disable the other
                    _this3.scope.langcodes.forEach(function (langCode) {
                      langCode.active = langCode.code === changedLangcode;
                    });
                  });

                  return langcodes;
                }).then(function (langcodes) {
                  _this3.scope.ready = true;
                  return langcodes;
                }));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function initLocales(_x2) {
        return _initLocales.apply(this, arguments);
      }

      return initLocales;
    }()
  }, {
    key: "setLangcode",
    value: function setLangcode(langcode) {
      this.localesService.setLangcode(langcode);
    }
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return [];
    }
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      get_default()(getPrototypeOf_default()(AI18nSwitcherComponent.prototype), "disconnectedCallback", this).call(this);
    }
  }, {
    key: "template",
    value: function template() {
      return null;
    }
  }]);

  return AI18nSwitcherComponent;
}(src.Component);
// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/components/switcher/switcher.component.ts









function switcher_component_createSuper(Derived) { var hasNativeReflectConstruct = switcher_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function switcher_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var i18nSwitcherComponentWrapper = function i18nSwitcherComponentWrapper(localesService) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_AI18nSwitcherCompone) {
    inherits_default()(I18nSwitcherComponent, _AI18nSwitcherCompone);

    var _super = switcher_component_createSuper(I18nSwitcherComponent);

    createClass_default()(I18nSwitcherComponent, null, [{
      key: "observedAttributes",
      get: function get() {
        return [];
      }
    }]);

    function I18nSwitcherComponent(element) {
      var _this;

      classCallCheck_default()(this, I18nSwitcherComponent);

      _this = _super.call(this, element);

      defineProperty_default()(assertThisInitialized_default()(_this), "_debug", false);

      defineProperty_default()(assertThisInitialized_default()(_this), "localesService", localesService);

      defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
        langcodes: [],
        "switch": _this["switch"],
        toggle: _this.toggle,
        ready: false
      });

      _this.init(I18nSwitcherComponent.observedAttributes);

      return _this;
    }
    /**
     * Switch to language by langcode
     * @param langcode
     * @param event
     */


    createClass_default()(I18nSwitcherComponent, [{
      key: "switch",
      value: function _switch(langcode, event) {
        this.debug("switch", langcode);
        return get_default()(getPrototypeOf_default()(I18nSwitcherComponent.prototype), "switch", this).call(this, langcode, event);
      }
      /**
       * Toggle language, makes only sense if you have only two languages
       * @param langcode
       * @param event
       */

    }, {
      key: "toggle",
      value: function toggle(event) {
        return get_default()(getPrototypeOf_default()(I18nSwitcherComponent.prototype), "toggle", this).call(this, event);
      }
    }, {
      key: "setLangcode",
      value: function setLangcode(langcode) {
        return get_default()(getPrototypeOf_default()(I18nSwitcherComponent.prototype), "setLangcode", this).call(this, langcode);
      }
    }, {
      key: "requiredAttributes",
      value: function requiredAttributes() {
        return [];
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        get_default()(getPrototypeOf_default()(I18nSwitcherComponent.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "template",
      value: function template() {
        return null;
      }
    }]);

    return I18nSwitcherComponent;
  }(AI18nSwitcherComponent), defineProperty_default()(_class, "tagName", "i18n-switcher"), _temp;
};
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(319);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/dom.ts
var dom = __webpack_require__(8277);
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-share/bs4-share.component.ts
var bs4_share_component = __webpack_require__(9599);
// EXTERNAL MODULE: ./node_modules/@ribajs/bs4/src/components/bs4-share/bs4-share.component.html
var bs4_share_bs4_share_component = __webpack_require__(4091);
var bs4_share_component_default = /*#__PURE__*/__webpack_require__.n(bs4_share_bs4_share_component);

// EXTERNAL MODULE: ./node_modules/@ribajs/i18n/src/components/share/share.label.html
var share_label = __webpack_require__(8315);
var share_label_default = /*#__PURE__*/__webpack_require__.n(share_label);

// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/components/share/share.component.ts












function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function share_component_createSuper(Derived) { var hasNativeReflectConstruct = share_component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function share_component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }






/**
 * Component to share the a link (i18n version)
 */
var i18nShareComponentWrapper = function i18nShareComponentWrapper(localesService) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_Bs4ShareComponent) {
    inherits_default()(I18nShareComponent, _Bs4ShareComponent);

    var _super = share_component_createSuper(I18nShareComponent);

    createClass_default()(I18nShareComponent, null, [{
      key: "observedAttributes",
      get: function get() {
        return [].concat(toConsumableArray_default()(bs4_share_component/* Bs4ShareComponent.observedAttributes */.X.observedAttributes), ["text-i18n", "label-i18n", "service-label-i18n"]);
      }
    }]);

    function I18nShareComponent(element) {
      var _thisSuper, _this;

      classCallCheck_default()(this, I18nShareComponent);

      _this = _super.call(this, element);

      defineProperty_default()(assertThisInitialized_default()(_this), "_debug", false);

      defineProperty_default()(assertThisInitialized_default()(_this), "localesService", localesService);

      defineProperty_default()(assertThisInitialized_default()(_this), "scope", get_default()((_thisSuper = assertThisInitialized_default()(_this), getPrototypeOf_default()(I18nShareComponent.prototype)), "scope", _thisSuper));

      _this.scope = _this.getScopeDefaults();
      _this.scope.labelTemplate = (share_label_default());

      _this.init(bs4_share_component/* Bs4ShareComponent.observedAttributes */.X.observedAttributes);

      _this.addEventListeners();

      return _this;
    }

    createClass_default()(I18nShareComponent, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        this.init(bs4_share_component/* Bs4ShareComponent.observedAttributes */.X.observedAttributes);
        this.addEventListeners();
      }
    }, {
      key: "initTranslate",
      value: function () {
        var _initTranslate = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee3() {
          var _this2 = this;

          return regenerator_default().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  return _context3.abrupt("return", new Promise(function (resolve) {
                    _this2.localesService.event.on("changed", /*#__PURE__*/function () {
                      var _ref = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(langcode) {
                        return regenerator_default().wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                return _context.abrupt("return", resolve(langcode));

                              case 1:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _callee);
                      }));

                      return function (_x) {
                        return _ref.apply(this, arguments);
                      };
                    }());

                    if (_this2.localesService.ready) {
                      var langcode = _this2.localesService.getLangcode();

                      return resolve(langcode);
                    } else {
                      _this2.localesService.event.on("ready", /*#__PURE__*/function () {
                        var _ref2 = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2(langcode) {
                          return regenerator_default().wrap(function _callee2$(_context2) {
                            while (1) {
                              switch (_context2.prev = _context2.next) {
                                case 0:
                                  return _context2.abrupt("return", resolve(langcode));

                                case 1:
                                case "end":
                                  return _context2.stop();
                              }
                            }
                          }, _callee2);
                        }));

                        return function (_x2) {
                          return _ref2.apply(this, arguments);
                        };
                      }());
                    }
                  }));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function initTranslate() {
          return _initTranslate.apply(this, arguments);
        }

        return initTranslate;
      }()
    }, {
      key: "translate",
      value: function () {
        var _translate = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee4(langcode, value) {
          return regenerator_default().wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (value) {
                    _context4.next = 2;
                    break;
                  }

                  return _context4.abrupt("return");

                case 2:
                  return _context4.abrupt("return", this.localesService.get([langcode].concat(toConsumableArray_default()(value.split(".")))).then(function (locale) {
                    // this.debug('changed local', local);
                    return locale;
                  })["catch"](function (error) {
                    console.error(error);
                  }));

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function translate(_x3, _x4) {
          return _translate.apply(this, arguments);
        }

        return translate;
      }()
    }, {
      key: "beforeBind",
      value: function () {
        var _beforeBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee5() {
          var langcode, _iterator, _step, shareItem;

          return regenerator_default().wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return get_default()(getPrototypeOf_default()(I18nShareComponent.prototype), "beforeBind", this).call(this);

                case 2:
                  _context5.next = 4;
                  return this.initTranslate();

                case 4:
                  langcode = _context5.sent;

                  if (!this.scope.textI18n) {
                    _context5.next = 12;
                    break;
                  }

                  _context5.next = 8;
                  return this.translate(langcode, this.scope.textI18n);

                case 8:
                  _context5.t0 = _context5.sent;

                  if (_context5.t0) {
                    _context5.next = 11;
                    break;
                  }

                  _context5.t0 = this.scope.text;

                case 11:
                  this.scope.text = _context5.t0;

                case 12:
                  if (!this.scope.serviceLabelI18n) {
                    _context5.next = 34;
                    break;
                  }

                  _iterator = _createForOfIteratorHelper(this.scope.shareItems);
                  _context5.prev = 14;

                  _iterator.s();

                case 16:
                  if ((_step = _iterator.n()).done) {
                    _context5.next = 26;
                    break;
                  }

                  shareItem = _step.value;
                  _context5.next = 20;
                  return this.translate(langcode, this.scope.serviceLabelI18n + "." + shareItem.id);

                case 20:
                  _context5.t1 = _context5.sent;

                  if (_context5.t1) {
                    _context5.next = 23;
                    break;
                  }

                  _context5.t1 = shareItem.label;

                case 23:
                  shareItem.label = _context5.t1;

                case 24:
                  _context5.next = 16;
                  break;

                case 26:
                  _context5.next = 31;
                  break;

                case 28:
                  _context5.prev = 28;
                  _context5.t2 = _context5["catch"](14);

                  _iterator.e(_context5.t2);

                case 31:
                  _context5.prev = 31;

                  _iterator.f();

                  return _context5.finish(31);

                case 34:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this, [[14, 28, 31, 34]]);
        }));

        function beforeBind() {
          return _beforeBind.apply(this, arguments);
        }

        return beforeBind;
      }()
    }, {
      key: "afterBind",
      value: function () {
        var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee6() {
          return regenerator_default().wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return get_default()(getPrototypeOf_default()(I18nShareComponent.prototype), "afterBind", this).call(this);

                case 2:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function afterBind() {
          return _afterBind.apply(this, arguments);
        }

        return afterBind;
      }()
    }, {
      key: "template",
      value: function template() {
        this.debug("template", this.el, (0,dom/* hasChildNodesTrim */.Np)(this.el));

        if (this.el && (0,dom/* hasChildNodesTrim */.Np)(this.el)) {
          // If a child is set, this is a custom label template
          this.scope.labelTemplate = this.el.innerHTML;
          this.debug("Custom label template: ", this.scope.labelTemplate);
        }

        return (bs4_share_component_default());
      }
    }]);

    return I18nShareComponent;
  }(bs4_share_component/* Bs4ShareComponent */.X), defineProperty_default()(_class, "tagName", "i18n-share"), _temp;
};
// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/components/index.ts



/* harmony default export */ const components = (function (localesService) {
  return {
    I18nSwitcherComponent: i18nSwitcherComponentWrapper(localesService),
    I18nShareComponent: i18nShareComponentWrapper(localesService)
  };
});

/***/ }),

/***/ 96:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => /* binding */ formatters
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(319);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/formatters/t.formatter.ts




var translate = /*#__PURE__*/function () {
  var _ref = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(translateMePathString, localesService, langcode) {
    var properties;
    return regenerator_default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            properties = translateMePathString.split(".");

            if (langcode) {
              _context.next = 5;
              break;
            }

            langcode = localesService.getLangcode();

            if (langcode) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", null);

          case 5:
            return _context.abrupt("return", localesService.get([langcode].concat(toConsumableArray_default()(properties))
            /*, vars */
            ).then(function (locale) {
              return locale;
            })["catch"](function (error) {
              console.error(error);
            }));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function translate(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

var tFormatterWrapper = function tFormatterWrapper(localesService) {
  return {
    name: "t",
    read: function read(translateMePathString, langcode)
    /*, ...vars: string[]*/
    {
      return new Promise(function (resolve, reject) {
        localesService.event.on("changed", function () {
          // console.debug('changed');
          translate(translateMePathString, localesService, langcode).then(function (locale) {
            resolve(locale);
          })["catch"](function (error) {
            reject(error);
          });
        });
        localesService.event.on("ready", function () {
          translate(translateMePathString, localesService, langcode).then(function (locale) {
            resolve(locale);
          })["catch"](function (error) {
            reject(error);
          });
        });

        if (localesService.ready) {
          translate(translateMePathString, localesService, langcode).then(function (locale) {
            resolve(locale);
          });
        }
      });
    }
  };
};
// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/formatters/index.ts

/* harmony default export */ const formatters = (function (localesService) {
  return {
    t: tFormatterWrapper(localesService)
  };
});

/***/ }),

/***/ 991:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => /* binding */ i18nModule
/* harmony export */ });
/* harmony import */ var _binders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(350);
/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6909);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1038);




var i18nModule = function i18nModule(localesService) {
  return {
    binders: (0,_binders__WEBPACK_IMPORTED_MODULE_0__/* .default */ .Z)(localesService),
    components: (0,_components__WEBPACK_IMPORTED_MODULE_2__/* .default */ .Z)(localesService),
    formatters: (0,_formatters__WEBPACK_IMPORTED_MODULE_1__/* .default */ .Z)(localesService),
    services: _services__WEBPACK_IMPORTED_MODULE_3__
  };
};

/***/ }),

/***/ 4181:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "V": () => /* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_1__.V,
/* harmony export */   "LocalesStaticService": () => /* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_4__.LocalesStaticService,
/* harmony export */   "i18nModule": () => /* reexport safe */ _i18n_module__WEBPACK_IMPORTED_MODULE_5__.Z
/* harmony export */ });
/* harmony import */ var _binders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(350);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6909);
/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96);
/* harmony import */ var _interfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8595);
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_3__, "LocalesStaticService")) __webpack_require__.d(__webpack_exports__, { "LocalesStaticService": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_3__.LocalesStaticService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_3__, "i18nModule")) __webpack_require__.d(__webpack_exports__, { "i18nModule": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_3__.i18nModule; } });
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1038);
/* harmony import */ var _i18n_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(991);







/***/ }),

/***/ 8595:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony import */ var _langcode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3320);
/* harmony import */ var _langcode__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_langcode__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_langcode__WEBPACK_IMPORTED_MODULE_0__, "LocalesStaticService")) __webpack_require__.d(__webpack_exports__, { "LocalesStaticService": function() { return _langcode__WEBPACK_IMPORTED_MODULE_0__.LocalesStaticService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_langcode__WEBPACK_IMPORTED_MODULE_0__, "i18nModule")) __webpack_require__.d(__webpack_exports__, { "i18nModule": function() { return _langcode__WEBPACK_IMPORTED_MODULE_0__.i18nModule; } });
/* harmony import */ var _local_var__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7593);
/* harmony import */ var _local_var__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_local_var__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_local_var__WEBPACK_IMPORTED_MODULE_1__, "LocalesStaticService")) __webpack_require__.d(__webpack_exports__, { "LocalesStaticService": function() { return _local_var__WEBPACK_IMPORTED_MODULE_1__.LocalesStaticService; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_local_var__WEBPACK_IMPORTED_MODULE_1__, "i18nModule")) __webpack_require__.d(__webpack_exports__, { "i18nModule": function() { return _local_var__WEBPACK_IMPORTED_MODULE_1__.i18nModule; } });



/***/ }),

/***/ 3320:
/***/ (() => {



/***/ }),

/***/ 7593:
/***/ (() => {



/***/ }),

/***/ 1038:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ALocalesService": () => /* reexport */ ALocalesService,
  "LocalesRestService": () => /* reexport */ LocalesRestService,
  "LocalesStaticService": () => /* reexport */ LocalesStaticService
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js
var helpers_typeof = __webpack_require__(8);
var typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(319);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/index.ts
var src = __webpack_require__(425);
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/services/locales-base.service.ts








function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



var ALocalesService = /*#__PURE__*/function () {
  createClass_default()(ALocalesService, [{
    key: "ready",
    get: function get() {
      return this._ready;
    }
  }]);

  function ALocalesService(doNotTranslateDefaultLanguage, showMissingTranslation) {
    classCallCheck_default()(this, ALocalesService);

    defineProperty_default()(this, "event", new src.EventDispatcher("i18n"));

    defineProperty_default()(this, "showMissingTranslation", false);

    defineProperty_default()(this, "_ready", false);

    defineProperty_default()(this, "currentLangcode", void 0);

    defineProperty_default()(this, "initalLangcode", void 0);

    this.doNotTranslateDefaultLanguage = doNotTranslateDefaultLanguage;
    this.showMissingTranslation = showMissingTranslation;
  }
  /**
   * Get translation by properties, e.g. `de.form.newsletter_label`
   * Properties object must include the language code, e.g. `de`.
   * @param properties properties, e.g. `['de', 'form', 'newsletter', 'label']`
   * @param force Set this to true if you want to force the request also if the service is not ready, you should use this only one the time
   */


  createClass_default()(ALocalesService, [{
    key: "get",
    value: function () {
      var _get = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(properties, vars) {
        var _this = this;

        var force,
            _args = arguments;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                force = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;

                if (!(!this.ready && !force)) {
                  _context.next = 3;
                  break;
                }

                throw new Error("not ready");

              case 3:
                return _context.abrupt("return", this.getAll() // extract properties
                .then(function (locals) {
                  if (properties && properties.length) {
                    var local = (0,type/* clone */.d9)(true, locals);

                    var _iterator = _createForOfIteratorHelper(properties),
                        _step;

                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done;) {
                        var property = _step.value;

                        if (!property) {
                          return;
                        }

                        if (local[property]) {
                          local = local[property];
                        } else {
                          return null;
                        }
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }

                    return local;
                  }

                  return locals;
                }).then(function (local) {
                  if (local === null && properties) {
                    console.warn("WARNING translation missing: \"".concat(properties.join("."), "\""), local, properties);
                  }

                  return local;
                }) // Replace variables in local string if vars are set
                .then(function (local) {
                  if (vars) {
                    local = _this.setTranslateStringPluralization(local, vars);
                    local = _this.setTranslateStringVars(local, vars);
                  }

                  return local;
                })["catch"](function (error) {
                  console.error(error);
                  _this._ready = false;
                  return error;
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get(_x, _x2) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
    /**
     * Get translation by properties, e.g. `form.newsletter_label`
     * Properties object must not include the language code.
     * @param properties properties, e.g. `[form', 'newsletter', 'label']`
     */

  }, {
    key: "getByCurrentLang",
    value: function () {
      var _getByCurrentLang = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        var properties,
            vars,
            langcode,
            _args2 = arguments;
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                properties = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];
                vars = _args2.length > 1 ? _args2[1] : undefined;
                langcode = this.getLangcode();

                if (langcode) {
                  _context2.next = 5;
                  break;
                }

                throw new Error("Langcode not found in html tag");

              case 5:
                return _context2.abrupt("return", this.get([langcode].concat(toConsumableArray_default()(properties)), vars));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getByCurrentLang() {
        return _getByCurrentLang.apply(this, arguments);
      }

      return getByCurrentLang;
    }()
  }, {
    key: "getBrowserLangcode",
    value: function getBrowserLangcode() {
      var lang = navigator.language || navigator.userLanguage;
      var simplified = lang.split("-")[0].toLowerCase();
      return simplified;
    }
  }, {
    key: "getHTMLLangcode",
    value: function getHTMLLangcode() {
      var langcode = document.documentElement ? document.documentElement.lang : "en";
      return langcode;
    }
    /**
     * Get the current langcode,
     * if lang was not choosed this is the langcode of the lang attribute of the html element.
     * If the language was changed this returns the changed language
     */

  }, {
    key: "getLangcode",
    value: function getLangcode() {
      return this.currentLangcode;
    }
  }, {
    key: "getInitialLangcode",
    value: function getInitialLangcode() {
      return this.initalLangcode;
    }
  }, {
    key: "setLangcode",
    value: function setLangcode(langcode) {
      var initial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (this.currentLangcode !== langcode) {
        this.currentLangcode = langcode; // $('html').attr('lang', langcode);

        if (document.documentElement) {
          document.documentElement.lang = langcode;
        }

        this.event.trigger("changed", langcode, initial);
      }
    }
  }, {
    key: "getAvailableLangcodes",
    value: function () {
      var _getAvailableLangcodes = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee3() {
        var activeCode;
        return regenerator_default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                activeCode = this.getLangcode();
                return _context3.abrupt("return", this.get(undefined, undefined, true).then(function (locals) {
                  var langcodes = [];
                  Object.keys(locals).forEach(function (langcode) {
                    langcodes.push({
                      code: langcode,
                      active: langcode === activeCode
                    });
                  });
                  return langcodes;
                }));

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getAvailableLangcodes() {
        return _getAvailableLangcodes.apply(this, arguments);
      }

      return getAvailableLangcodes;
    }()
    /**
     * Parse templates wich can be used to set variables on language strings
     */

  }, {
    key: "parseTemplateVars",
    value: function parseTemplateVars(el) {
      var templates = el.querySelectorAll("template");
      var vars = {};
      templates.forEach(function (template) {
        var name = template.getAttribute("name");

        if (name !== null) {
          vars[name] = template.innerHTML.trim();
        }
      });
      return vars;
    }
    /**
     * Parse templates wich have his own translations
     */

  }, {
    key: "parseLocalVars",
    value: function parseLocalVars(el) {
      var templates = el.querySelectorAll("template");
      var vars = {};
      templates.forEach(function (template) {
        var lang = template.getAttribute("lang");

        if (lang !== null) {
          vars[lang] = template.innerHTML.trim();
        }
      });
      return vars;
    }
    /**
     * Replace variables on translated string
     * @param translateString
     * @param vars
     */

  }, {
    key: "setTranslateStringVars",
    value: function setTranslateStringVars(translateString, vars) {
      if (!translateString || Object.keys(vars).length === 0 || typeof translateString.match !== "function") {
        return translateString;
      }

      var matches = translateString.match(/{{\s*?[A-Za-z0-9_-]+\s*?}}/gm);

      if (matches) {
        var _iterator2 = _createForOfIteratorHelper(matches),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var match = _step2.value;

            if (match) {
              var varName = match.replace(/{{\s*|\s*}}/gm, "");

              if (typeof vars[varName] === "string" || typeof vars[varName] === "number") {
                translateString = translateString.replace(match, vars[varName]);
              }
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return translateString;
    }
    /**
     * Get file with all languages
     */

  }, {
    key: "init",
    value: function () {
      var _init = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee4() {
        var _this2 = this;

        var browserLangcode;
        return regenerator_default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.initalLangcode = this.getHTMLLangcode();
                this.currentLangcode = this.initalLangcode;

                if (this.initalLangcode) {
                  _context4.next = 4;
                  break;
                }

                throw new Error("The lang attribute on the html element is requred to detect the default theme language: ".concat(this.initalLangcode));

              case 4:
                // Detect browser language and switch to this language when available
                browserLangcode = this.getBrowserLangcode();
                return _context4.abrupt("return", this.getAvailableLangcodes().then(function (availableLangcodes) {
                  var browserLangFound = false;

                  var _iterator3 = _createForOfIteratorHelper(availableLangcodes),
                      _step3;

                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                      var availableLangcodeObj = _step3.value;

                      if (availableLangcodeObj.code === browserLangcode) {
                        browserLangFound = true;
                      }
                    } // only switch language if the browser language is not the default language (if doNotTranslateDefaultLanguage is true)

                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }

                  if (!_this2.doNotTranslateDefaultLanguage || browserLangFound && browserLangcode !== _this2.currentLangcode) {
                    _this2.setLangcode(browserLangcode, true);
                  }

                  return availableLangcodes;
                }).then(function ()
                /*availableLangcodes*/
                {
                  _this2._ready = true; // If the current langcode is not the inital langcode then translation is needed

                  var translationNeeded = _this2.currentLangcode !== _this2.initalLangcode || !_this2.doNotTranslateDefaultLanguage;

                  _this2.event.trigger("ready", _this2.currentLangcode, translationNeeded);
                })["catch"](function (error) {
                  console.error(error);
                  _this2._ready = false;
                  return error;
                }));

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
    /**
     * see https://help.shopify.com/en/themes/development/theme-store-requirements/internationalizing/translation-filter#pluralization-in-translation-keys
     * @param translateString
     * @param vars
     */

  }, {
    key: "setTranslateStringPluralization",
    value: function setTranslateStringPluralization(translateObj, vars) {
      if (vars.count && typeof_default()(translateObj) === "object" && translateObj !== null) {
        var count = Number(vars.count);

        if (count === 0) {
          if (translateObj.zero) {
            return translateObj.zero;
          }
        } else if (count === 1) {
          if (translateObj.one) {
            return translateObj.one;
          }
        } else if (count === 2) {
          if (translateObj.two) {
            return translateObj.two;
          }
        }
      }

      if (typeof_default()(translateObj) === "object" && translateObj !== null && translateObj.other) {
        return translateObj.other;
      }

      return translateObj;
    }
  }]);

  return ALocalesService;
}();
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(2205);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(8585);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(9754);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/services/locales-rest.service.ts










function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }



/**
 * LocalesRestService get locales object from url
 */

var LocalesRestService = /*#__PURE__*/function (_ALocalesService) {
  inherits_default()(LocalesRestService, _ALocalesService);

  var _super = _createSuper(LocalesRestService);

  createClass_default()(LocalesRestService, null, [{
    key: "getInstance",
    value: function getInstance(url) {
      return LocalesRestService.instances[url];
    }
  }]);

  function LocalesRestService(url) {
    var _this;

    var doNotTranslateDefaultLanguage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var showMissingTranslation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    classCallCheck_default()(this, LocalesRestService);

    _this = _super.call(this, doNotTranslateDefaultLanguage, showMissingTranslation);

    defineProperty_default()(assertThisInitialized_default()(_this), "locales", {});

    defineProperty_default()(assertThisInitialized_default()(_this), "currentLangcode", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "initalLangcode", void 0);

    _this.url = url;

    if (!_this.url) {
      throw new Error("Url is requred!");
    }

    if (LocalesRestService.instances[_this.url]) {
      return possibleConstructorReturn_default()(_this, LocalesRestService.instances[_this.url]);
    }

    _this.init();

    LocalesRestService.instances[_this.url] = assertThisInitialized_default()(_this);
    return _this;
  }
  /**
   * Get file with all languages
   * @param themeID
   */


  createClass_default()(LocalesRestService, [{
    key: "getAll",
    value: function () {
      var _getAll = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(url) {
        var _this2 = this;

        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!url) {
                  url = this.url;
                }

                if (url) {
                  _context.next = 3;
                  break;
                }

                throw new Error("Url is requred!");

              case 3:
                if (window.Shopify.shop) {
                  url = url + "?shop=".concat(window.Shopify.shop);
                }

                if (!this.locales[url]) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return", this.locales[url]);

              case 6:
                return _context.abrupt("return", src.HttpService.getJSON(url).then(function (locales) {
                  _this2.locales[url] = locales;
                  return _this2.locales[url];
                }));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getAll(_x) {
        return _getAll.apply(this, arguments);
      }

      return getAll;
    }()
  }]);

  return LocalesRestService;
}(ALocalesService);

defineProperty_default()(LocalesRestService, "instances", {});
// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/services/locales-static.service.ts










function locales_static_service_createSuper(Derived) { var hasNativeReflectConstruct = locales_static_service_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function locales_static_service_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var LocalesStaticService = /*#__PURE__*/function (_ALocalesService) {
  inherits_default()(LocalesStaticService, _ALocalesService);

  var _super = locales_static_service_createSuper(LocalesStaticService);

  createClass_default()(LocalesStaticService, null, [{
    key: "getInstance",
    value: function getInstance() {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
      return LocalesStaticService.instances[id];
    }
    /**
     * The current setted langcode
     */

  }]);

  function LocalesStaticService(locales, id) {
    var _this;

    var doNotTranslateDefaultLanguage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var showMissingTranslation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    classCallCheck_default()(this, LocalesStaticService);

    _this = _super.call(this, doNotTranslateDefaultLanguage, showMissingTranslation);

    defineProperty_default()(assertThisInitialized_default()(_this), "currentLangcode", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "initalLangcode", void 0);

    if (!id) {
      id = "main";
    }

    _this.locales = locales;

    if (LocalesStaticService.instances[id]) {
      return possibleConstructorReturn_default()(_this, LocalesStaticService.instances[id]);
    }

    _this.init();

    LocalesStaticService.instances[id] = assertThisInitialized_default()(_this);
    return _this;
  }
  /**
   * Get file with all languages
   * @param themeID
   */


  createClass_default()(LocalesStaticService, [{
    key: "getAll",
    value: function () {
      var _getAll = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.locales);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getAll() {
        return _getAll.apply(this, arguments);
      }

      return getAll;
    }()
  }]);

  return LocalesStaticService;
}(ALocalesService);

defineProperty_default()(LocalesStaticService, "instances", {});
// CONCATENATED MODULE: ./node_modules/@ribajs/i18n/src/services/index.ts




/***/ }),

/***/ 3544:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Vk": () => /* reexport */ (jquery_default())
});

// UNUSED EXPORTS: jqueryModule, onEventBinder

// NAMESPACE OBJECT: ./node_modules/@ribajs/jquery/src/binders/index.ts
var binders_namespaceObject = {};
__webpack_require__.r(binders_namespaceObject);
__webpack_require__.d(binders_namespaceObject, {
  "onEventBinder": () => onEventBinder
});

// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js
var jquery = __webpack_require__(9755);
var jquery_default = /*#__PURE__*/__webpack_require__.n(jquery);

// CONCATENATED MODULE: ./node_modules/@ribajs/jquery/src/vendors/jquery.module.ts

window.$ = (jquery_default());
window.jQuery = (jquery_default());

// CONCATENATED MODULE: ./node_modules/@ribajs/jquery/src/vendors/index.ts

// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// CONCATENATED MODULE: ./node_modules/@ribajs/jquery/src/binders/on-event.binder.ts


/**
 * Binds an event handler on the element.
 */

var onEventBinder = {
  name: "on-*",
  "function": true,
  priority: 1000,
  bind: function bind(el) {
    if (!this.customData) {
      this.customData = {
        handler: null
      };
    }
  },
  unbind: function unbind(el) {
    if (this.customData.handler) {
      if (this.args === null) {
        throw new Error("args is null");
      }

      var eventName = this.args[0];
      jquery_default()(el).off(eventName, this.customData.handler);
    }
  },
  routine: function routine(el, value) {
    var _this = this;

    if (this.args === null) {
      throw new Error("args is null");
    }

    var eventName = this.args[0];

    if (this.customData.handler) {
      jquery_default()(el).off(eventName, this.customData.handler);
    }

    this.customData.handler = this.eventHandler(value, el);

    try {
      jquery_default()(el).on(eventName, function (event) {
        var extraParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        event.data = (0,type/* extend */.l7)(false, event.data || {}, extraParameters);
        return _this.customData.handler(event);
      });
    } catch (error) {
      console.warn(error);
      jquery_default()(el).on(eventName, function (event, extraParameters) {
        event.data = (0,type/* extend */.l7)(false, event.data || {}, extraParameters);
        return _this.customData.handler(event);
      });
    }
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/jquery/src/binders/index.ts

// CONCATENATED MODULE: ./node_modules/@ribajs/jquery/src/jquery.module.ts
 // import * as formatters from './formatters';
// import * as services from './services';
// import * as components from './components';

var jqueryModule = {
  formatters: {},
  binders: binders_namespaceObject,
  services: {},
  components: {}
};

// CONCATENATED MODULE: ./node_modules/@ribajs/jquery/src/index.ts




/***/ }),

/***/ 6888:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "parentRouteClassStarBinder": () => /* reexport */ parentRouteClassStarBinder,
  "routeBackOnStarBinder": () => /* reexport */ routeBackOnStarBinder,
  "routeBinder": () => /* reexport */ routeBinder,
  "routeClassStarBinder": () => /* reexport */ routeClassStarBinder,
  "viewBinder": () => /* reexport */ viewBinder,
  "viewStaticBinder": () => /* reexport */ viewStaticBinder
});

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/index.ts
var src = __webpack_require__(425);
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/dom.ts
var dom = __webpack_require__(8277);
// EXTERNAL MODULE: ./node_modules/@ribajs/router/src/services/index.ts + 12 modules
var services = __webpack_require__(6662);
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/binders/view.binder.ts





/**
 * The main wrapper for the riba router
 * TODO convert this to a component
 *
 * ```
 *   <div rv-view='{"listenAllLinks": true}'>
 *     <div class="rv-view-container" {% include 'jumplink-utils-barba-container-attributes', parseCollection: true %}>
 *       {{ content_for_layout }}
 *     </div>
 *   </div>
 * ```
 */
var viewBinder = {
  name: "view",
  block: true,
  options: {},
  nested: null,
  bind: function bind(el) {
    var self = this.binder || this;
    self.nested = self.nested || null;
    self.wrapper = self.wrapper || el;
    /*
     * Make the dispatcher available in the model to register event handlers.
     *
     * I.e., if we have initialized rivets/riba with:
     *
     *  `rivets.bind(document.body, model)`,
     *
     * then we can register event handlers for the Barba router dispatcher like this:
     *
     *  `model.routerDispatcher.on('newPageReady', ...);`
     *  `model.routerDispatcher.on('transitionCompleted', ...);`
     * ...etc.
     *
     */
    // this.view.models.routerDispatcher = dispatcher;
  },
  routine: function routine(el, options) {
    var _self$wrapper;

    var self = this.binder || this; // Set default options

    self.options = options || {};
    self.options.viewId = self.options.viewId || el.getAttribute("id") || "main";
    self.options.action = self.options.action || "replace"; // replace / append

    if (self.options.viewId === "main") {
      self.options.containerSelector = self.options.containerSelector || "[data-namespace]";
      self.options.scrollToTop = (0,type/* isBoolean */.jn)(self.options.scrollToTop) ? self.options.scrollToTop : true;
      self.options.listenAllLinks = (0,type/* isBoolean */.jn)(self.options.listenAllLinks) ? self.options.listenAllLinks : true;
      self.options.listenPopstate = (0,type/* isBoolean */.jn)(self.options.listenPopstate) ? self.options.listenPopstate : true;
      self.options.scrollToAnchorHash = (0,type/* isBoolean */.jn)(self.options.scrollToAnchorHash) ? self.options.scrollToAnchorHash : true;
      self.options.datasetToModel = (0,type/* isBoolean */.jn)(self.options.datasetToModel) ? self.options.datasetToModel : true;
      self.options.parseTitle = (0,type/* isBoolean */.jn)(self.options.parseTitle) ? self.options.parseTitle : true;
      self.options.changeBrowserUrl = (0,type/* isBoolean */.jn)(self.options.changeBrowserUrl) ? self.options.changeBrowserUrl : true;
      self.options.prefetchLinks = (0,type/* isBoolean */.jn)(self.options.prefetchLinks) ? self.options.prefetchLinks : true;
    } else {
      self.options.containerSelector = self.options.containerSelector || "#".concat(self.options.viewId, " > *:first-child");
      self.options.scrollToTop = (0,type/* isBoolean */.jn)(self.options.scrollToTop) ? self.options.scrollToTop : false;
      self.options.listenAllLinks = (0,type/* isBoolean */.jn)(self.options.listenAllLinks) ? self.options.listenAllLinks : false;
      self.options.listenPopstate = (0,type/* isBoolean */.jn)(self.options.listenPopstate) ? self.options.listenPopstate : false;
      self.options.scrollToAnchorHash = (0,type/* isBoolean */.jn)(self.options.scrollToAnchorHash) ? self.options.scrollToAnchorHash : false;
      self.options.datasetToModel = (0,type/* isBoolean */.jn)(self.options.datasetToModel) ? self.options.datasetToModel : false;
      self.options.parseTitle = (0,type/* isBoolean */.jn)(self.options.parseTitle) ? self.options.parseTitle : false;
      self.options.changeBrowserUrl = (0,type/* isBoolean */.jn)(self.options.changeBrowserUrl) ? self.options.changeBrowserUrl : false;
      self.options.prefetchLinks = (0,type/* isBoolean */.jn)(self.options.prefetchLinks) ? self.options.prefetchLinks : false;
    }

    self.options.prefetchLinks = (0,type/* isBoolean */.jn)(self.options.prefetchLinks) ? self.options.prefetchLinks : true;
    self.options.transition = self.options.transition || new services.HideShowTransition(self.options.action, self.options.scrollToTop);
    self.dispatcher = new src.EventDispatcher(self.options.viewId);
    (_self$wrapper = self.wrapper) === null || _self$wrapper === void 0 ? void 0 : _self$wrapper.setAttribute("id", self.options.viewId);
    self.dispatcher.on("newPageReady", self.onPageReady.bind(this));
    self.dispatcher.on("transitionCompleted", self.onTransitionCompleted.bind(this));
    var pjaxOptions = {
      id: self.options.viewId,
      wrapper: self.wrapper,
      containerSelector: self.options.containerSelector,
      listenAllLinks: !!self.options.listenAllLinks,
      listenPopstate: !!self.options.listenPopstate,
      transition: self.options.transition,
      parseTitle: !!self.options.parseTitle,
      changeBrowserUrl: !!self.options.changeBrowserUrl,
      prefetchLinks: !!self.options.prefetchLinks
    };
    var pjax = new services.Pjax(pjaxOptions);
    self.prefetch = new services.Prefetch(self.options.viewId);
    self.prefetch.init(pjaxOptions.prefetchLinks);
    pjax.start();
  },
  unbind: function unbind()
  /*el: HTMLUnknownElement*/
  {
    var self = this.binder || this;

    if (self.dispatcher) {
      self.dispatcher.off("newPageReady", self.onPageReady.bind(this));
      self.dispatcher.off("transitionCompleted", self.onTransitionCompleted.bind(this));
    }

    if (self.nested !== null) {
      self.nested.unbind();
      self.nested = null;
    }
  },
  onPageReady: function onPageReady(viewId, currentStatus, prevStatus, container, newPageRawHTML, dataset)
  /*, isInit: boolean*/
  {
    var self = this.binder || this; // Only to anything if the viewID is eqal (in this way it is possible to have multiple views)

    if (viewId !== self.options.viewId) {
      console.warn("not the right view", self.options.viewId, viewId, dataset);
      return;
    } // unbind the old rivets view


    if (self.nested) {
      if (self.options.action === "replace") {// IMPORTANT ROUTE FIXME only unbind if cache is not enabled?
        // self.nested.unbind();
      }
    } // add the dateset to the model


    if (!(0,type/* isObject */.Kn)(this.view.models)) {
      this.view.models = {};
    }

    if (self.options.datasetToModel === true && (0,type/* isObject */.Kn)(dataset)) {
      this.view.models.dataset = dataset; // = container.data();
    } // TODO append on action "append"


    self.nested = new src.View(container, this.view.models, this.view.options);
    self.nested.bind();
  },
  onTransitionCompleted: function onTransitionCompleted(viewId) {
    var self = this.binder || this; // Only to anything if the viewID is eqal (in this way it is possible to have multiple views)

    if (viewId !== self.options.viewId) {
      return;
    } // scroll to Anchor of hash


    if (self.options.scrollToAnchorHash && window.location.hash) {
      var scrollToMe = document.getElementById(window.location.hash.substr(1));

      if (scrollToMe) {
        return new Promise(function (resolve) {
          resolve((0,dom/* scrollTo */.X5)(scrollToMe, 0, window));
        });
      }
    }

    return Promise.resolve();
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/binders/view-static.binder.ts



var handleize = src.handleizeFormatter.read;
/**
 * Loads a url with pjax and show them insite the element this binder is used on
 */

var viewStaticBinder = {
  name: "view-static",
  block: true,
  bind: function bind()
  /*el: HTMLElement*/
  {
    if (!this.customData) {
      this.customData = {
        nested: null
      };
    }
  },
  routine: function routine(el, options) {
    var _this = this;

    var wrapper = el; // Set default options

    options = options || {};
    options.listenAllLinks = false;
    options.listenPopstate = false;
    options.parseTitle = false;
    options.transition = options.transition || new services.HideShowTransition();
    options.viewId = options.viewId || el.getAttribute("id") || handleize(options.url);
    options.containerSelector = options.containerSelector || "[data-namespace]";
    options.changeBrowserUrl = false;
    var pjax = new services.Pjax(options); // TODO use prefetch.loadResponseCached to use the cache

    var response = pjax.loadResponseCached(options.url, false, false);
    response.then(function (_response) {
      wrapper.replaceWith(_response.container);
      _response.container.style.visibility = "visible"; // add the dateset to the model

      if (!(0,type/* isObject */.Kn)(_this.view.models)) {
        _this.view.models = {};
      } // this.view.models.dataset = container.data();


      if (_this.customData.nested) {
        _this.customData.nested.unbind();
      }

      _this.customData.nested = new src.View(_response.container, _this.view.models, _this.view.options);

      _this.customData.nested.bind();
    });
  },
  unbind: function unbind()
  /*el: HTMLUnknownElement*/
  {
    if (this.customData.nested) {
      this.customData.nested.unbind();
    }

    delete this.customData;
  }
};
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/url.ts
var src_url = __webpack_require__(5263);
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/binders/route.binder.ts





/**
 * Open link with pajax if the route is not the active route
 */
var routeBinder = {
  name: "route",
  bind: function bind(el) {
    el.classList.add("route");
    this.customData = {
      dispatcher: undefined,
      options: {
        removeAfterActivation: false,
        newTab: false
      },
      onClick: function onClick(event) {
        // console.log(this.customData.options.url);
        var pjax = services.Pjax.getInstance(this.customData.options.viewId);

        if ((0,src_url/* onRoute */.k9)(this.customData.options.url)) {
          console.debug("already on this site");
        } else if ((0,src_url/* isExternalUrl */.xf)(this.customData.options.url)) {
          // console.debug('check');
          if (!pjax) {
            return;
          }

          pjax.goTo(this.customData.options.url);
        } else {
          if (this.customData.options.url) {
            if (!pjax) {
              return;
            }

            pjax.onLinkClick(event, this.el, this.customData.options.url);
          }
        }

        if (this.customData.options.removeAfterActivation && this.el && this.el.parentNode) {
          // this.unbind(); TODO?
          this.el.parentNode.removeChild(this.el);
        }
      }
    };
    el.addEventListener("click", this.customData.onClick.bind(this));
  },
  routine: function routine(el, optionsOrUrl) {
    if ((0,type/* isString */.HD)(optionsOrUrl)) {
      this.customData.options.url = optionsOrUrl;
    } else if ((0,type/* isObject */.Kn)(optionsOrUrl)) {
      this.customData.options = optionsOrUrl;
    }

    this.customData.options.viewId = this.customData.options.viewId || "main";
    this.customData.prefetch = new services.Prefetch(this.customData.options.viewId), this.customData.options.removeAfterActivation = (0,type/* isBoolean */.jn)(this.customData.options.removeAfterActivation) ? this.customData.options.removeAfterActivation : false;
    this.customData.dispatcher = new src.EventDispatcher(this.customData.options.viewId);
    this.customData.options.newTab = false;
    var isAnkerHTMLElement = el.tagName === "A";

    if (!this.customData.options.url && isAnkerHTMLElement) {
      var url = el.getAttribute("href");

      if (url) {
        this.customData.options.url = url;
      }
    }

    if (el.getAttribute("target") === "_blank") {
      this.customData.options.newTab = true;
    } // normalize url


    this.customData.options.url = (0,src_url/* normalizeUrl */.D5)(this.customData.options.url); // set href if not set

    if (isAnkerHTMLElement && (!el.href || !el.getAttribute("href")) && this.customData.options.url) {
      el.setAttribute("href", this.customData.options.url);
      el.href = this.customData.options.url;
    }

    if (!this.customData.options.newTab) {
      this.customData.prefetch.initBinder(el, this.customData.options.url);
    } // this.customData.checkURL.call(this, this.customData.options.url);

  },
  unbind: function unbind(el) {
    this.customData.prefetch.deInitBinder(el, this.customData.options.url);
    el.removeEventListener("click", this.customData.onClick.bind(this));
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/binders/route-class-star.binder.ts


var routeClassStarBinder = {
  name: "route-class-*",
  bind: function bind()
  /*el: HTMLUnknownElement*/
  {
    this.customData = {
      dispatcher: new src.EventDispatcher("main")
    };
  },

  /**
   * Tests the url with the current location, if the url is equal to the current location this element gets the `[classname]` class
   * @param el Binder HTML Element
   * @param url Url to compare with the current location
   */
  routine: function routine(el, url) {
    var className = this.args[0].toString() || "active";
    var isAnkerHTMLElement = el.tagName === "A";

    if (!url && isAnkerHTMLElement) {
      var href = el.getAttribute("href");

      if (href) {
        url = href;
      }
    }

    var onUrlChange = function onUrlChange(urlToCheck) {
      if (urlToCheck) {
        if ((0,src_url/* onRoute */.k9)(urlToCheck)) {
          el.classList.add(className); // check if element is radio input

          if (el.getAttribute("type") === "radio") {
            el.checked = true;
          }

          return true;
        } else {
          el.classList.remove(className); // uncheck if element is radio input

          if (el.getAttribute("type") === "radio") {
            el.checked = false;
          }
        }
      }

      return false;
    };

    this.customData.dispatcher.on("newPageReady", function () {
      return onUrlChange(url);
    });
    onUrlChange(url);
  },
  unbind: function unbind()
  /*el: HTMLUnknownElement*/
  {// console.warn('routeClassStarBinder routine', el);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/binders/parent-route-class-star.binder.ts


var parentRouteClassStarBinder = {
  name: "parent-route-class-*",
  bind: function bind()
  /*el: HTMLUnknownElement*/
  {
    this.customData = {
      dispatcher: new src.EventDispatcher("main")
    };
  },

  /**
   * Tests the url with the current location, if the current location starts with the url this element gets the `[classname]` class
   * @param el Binder HTML Element
   * @param url Url to compare with the current location
   */
  routine: function routine(el, url) {
    var className = this.args[0].toString() || "active";
    var isAnkerHTMLElement = el.tagName === "A";

    if (!url && isAnkerHTMLElement) {
      var href = el.getAttribute("href");

      if (href) {
        url = href;
      }
    }

    var onUrlChange = function onUrlChange(urlToCheck) {
      if (urlToCheck) {
        if ((0,src_url/* onParentRoute */.UZ)(urlToCheck)) {
          el.classList.add(className); // check if element is radio input

          if (el.getAttribute("type") === "radio") {
            el.checked = true;
          }

          return true;
        } else {
          el.classList.remove(className); // uncheck if element is radio input

          if (el.getAttribute("type") === "radio") {
            el.checked = false;
          }
        }
      }

      return false;
    };

    this.customData.dispatcher.on("newPageReady", function () {
      return onUrlChange(url);
    });
    onUrlChange(url);
  },
  unbind: function unbind()
  /*el: HTMLUnknownElement*/
  {// console.warn('routeClassStarBinder routine', el);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/binders/route-back-on-star.binder.ts
var goBack = function goBack() {
  window.history.back();
};
/**
 * Calls `window.history.back()` an event.
 */

var routeBackOnStarBinder = {
  name: "route-back-on-*",
  priority: 3000,
  bind: function bind()
  /*el: HTMLElement*/
  {// noting
  },
  unbind: function unbind(el) {
    el.removeEventListener(this.args[0], goBack);
  },
  routine: function routine(el)
  /*, options: any*/
  {
    if (this.args === null) {
      throw new Error("args is null");
    } // const eventName = this.args[0] as string;


    el.removeEventListener(this.args[0], goBack);
    el.addEventListener(this.args[0], goBack);
  }
};
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/binders/index.ts







/***/ }),

/***/ 1130:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "LoadScriptComponent": () => /* reexport */ LoadScriptComponent
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(6525);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(2205);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(8585);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(9754);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/index.ts
var src = __webpack_require__(425);
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/dom.ts
var dom = __webpack_require__(8277);
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/components/load-script/load-script.component.ts











function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }



var LoadScriptComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(LoadScriptComponent, _Component);

  var _super = _createSuper(LoadScriptComponent);

  createClass_default()(LoadScriptComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["src", "id", "async", "defer"];
    }
  }]);

  function LoadScriptComponent(element) {
    var _this;

    classCallCheck_default()(this, LoadScriptComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "autobind", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      src: "",
      id: "",
      async: true,
      defer: true
    });

    return _this;
  }

  createClass_default()(LoadScriptComponent, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      get_default()(getPrototypeOf_default()(LoadScriptComponent.prototype), "connectedCallback", this).call(this);

      get_default()(getPrototypeOf_default()(LoadScriptComponent.prototype), "init", this).call(this, LoadScriptComponent.observedAttributes);
    }
  }, {
    key: "onReady",
    value: function () {
      var _onReady = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return get_default()(getPrototypeOf_default()(LoadScriptComponent.prototype), "onReady", this).call(this);

              case 2:
                if (!this.scope.id) {
                  this.scope.id = (0,dom/* getUID */.Kr)("script-");
                }

                (0,dom/* loadScript */.ve)(this.scope.src, this.scope.id, this.scope.async);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function onReady() {
        return _onReady.apply(this, arguments);
      }

      return onReady;
    }()
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return ["src"];
    }
  }, {
    key: "template",
    value: function template() {
      return null;
    }
  }]);

  return LoadScriptComponent;
}(src.Component);

defineProperty_default()(LoadScriptComponent, "tagName", "load-script");
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/components/index.ts


/***/ }),

/***/ 6889:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "routerModule": () => /* reexport safe */ _router_module__WEBPACK_IMPORTED_MODULE_5__.e
/* harmony export */ });
/* harmony import */ var _ribajs_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9468);
/* harmony reexport (checked) */ if(__webpack_require__.o(_ribajs_history__WEBPACK_IMPORTED_MODULE_0__, "routerModule")) __webpack_require__.d(__webpack_exports__, { "routerModule": function() { return _ribajs_history__WEBPACK_IMPORTED_MODULE_0__.routerModule; } });
/* harmony import */ var _binders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6888);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1130);
/* harmony import */ var _interfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4855);
/* harmony reexport (checked) */ if(__webpack_require__.o(_interfaces__WEBPACK_IMPORTED_MODULE_3__, "routerModule")) __webpack_require__.d(__webpack_exports__, { "routerModule": function() { return _interfaces__WEBPACK_IMPORTED_MODULE_3__.routerModule; } });
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6662);
/* harmony import */ var _router_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6591);








/***/ }),

/***/ 4855:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony import */ var _pjax_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7089);
/* harmony import */ var _pjax_options__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pjax_options__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_pjax_options__WEBPACK_IMPORTED_MODULE_0__, "routerModule")) __webpack_require__.d(__webpack_exports__, { "routerModule": function() { return _pjax_options__WEBPACK_IMPORTED_MODULE_0__.routerModule; } });
/* harmony import */ var _response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(183);
/* harmony import */ var _response__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_response__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_response__WEBPACK_IMPORTED_MODULE_1__, "routerModule")) __webpack_require__.d(__webpack_exports__, { "routerModule": function() { return _response__WEBPACK_IMPORTED_MODULE_1__.routerModule; } });
/* harmony import */ var _transition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2353);
/* harmony import */ var _transition__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_transition__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_transition__WEBPACK_IMPORTED_MODULE_2__, "routerModule")) __webpack_require__.d(__webpack_exports__, { "routerModule": function() { return _transition__WEBPACK_IMPORTED_MODULE_2__.routerModule; } });




/***/ }),

/***/ 7089:
/***/ (() => {



/***/ }),

/***/ 183:
/***/ (() => {



/***/ }),

/***/ 2353:
/***/ (() => {



/***/ }),

/***/ 6591:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "e": () => /* binding */ routerModule
/* harmony export */ });
/* harmony import */ var _binders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6888);
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1130);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6662);



var routerModule = {
  binders: _binders__WEBPACK_IMPORTED_MODULE_0__,
  components: _components__WEBPACK_IMPORTED_MODULE_1__,
  services: _services__WEBPACK_IMPORTED_MODULE_2__,
  formatters: {}
};


/***/ }),

/***/ 6662:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "BaseTransition": () => /* reexport */ BaseTransition,
  "BaseView": () => /* reexport */ BaseView,
  "CustomTransition": () => /* reexport */ CustomTransition,
  "Dom": () => /* reexport */ Dom,
  "HideShowTransition": () => /* reexport */ HideShowTransition,
  "Pjax": () => /* reexport */ Pjax,
  "Prefetch": () => /* reexport */ Prefetch
});

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(2205);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(8585);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(9754);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/control.ts
var control = __webpack_require__(417);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/services/Transition/BaseTransition.ts





/**
 * BaseTransition to extend
 */
var BaseTransition = /*#__PURE__*/function () {
  // TODO type
  function BaseTransition() {
    var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "replace";

    classCallCheck_default()(this, BaseTransition);

    defineProperty_default()(this, "oldContainer", void 0);

    defineProperty_default()(this, "newContainer", void 0);

    defineProperty_default()(this, "newContainerLoading", void 0);

    defineProperty_default()(this, "deferred", void 0);

    defineProperty_default()(this, "action", void 0);

    this.action = action;
  }
  /**
   * This function is called from Pjax module to initialize
   * the transition.
   *
   */


  createClass_default()(BaseTransition, [{
    key: "init",
    value: function init(oldContainer, newContainer) {
      var _this = this;

      this.oldContainer = oldContainer;
      this.deferred = (0,control/* deferred */.gX)();
      var newContainerReady = (0,control/* deferred */.gX)();
      this.newContainerLoading = newContainerReady.promise;
      this.start();
      newContainer.then(function (_newContainer) {
        _this.newContainer = _newContainer;
        newContainerReady.resolve();
      });
      return this.deferred.promise;
    }
    /**
     * This function needs to be called as soon the Transition is finished
     */

  }, {
    key: "done",
    value: function done() {
      // this.oldContainer[0].parentNode.removeChild(this.oldContainer[]);
      if (!this.oldContainer) {
        throw new Error("Can't remove old container");
      }

      if (this.action === "replace") {
        this.oldContainer.remove();
      } // this.newContainer.style.visibility = 'visible';


      if (!this.newContainer) {
        throw new Error("Can't show new container");
      }

      this.newContainer.style.visibility = "visible";
      this.deferred.resolve();
    }
    /**
     * Constructor for your Transition
     */

  }]);

  return BaseTransition;
}();
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/services/Transition/CustomTransition.ts






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }




/**
 * Basic Transition object, wait for the new Container to be ready,
 * scroll top, and finish the transition (removing the old container and displaying the new one)
 *
 * @private
 */
var CustomTransition = /*#__PURE__*/function (_BaseTransition) {
  inherits_default()(CustomTransition, _BaseTransition);

  var _super = _createSuper(CustomTransition);

  function CustomTransition() {
    classCallCheck_default()(this, CustomTransition);

    return _super.apply(this, arguments);
  }

  createClass_default()(CustomTransition, [{
    key: "init",
    value: function init(oldContainer, newContainer) {
      var _this = this;

      this.oldContainer = oldContainer;
      this.deferred = (0,control/* deferred */.gX)();
      var newContainerReady = (0,control/* deferred */.gX)();
      this.newContainerLoading = newContainerReady.promise;
      this.start();
      newContainer.then(function (_newContainer) {
        _this.newContainer = _newContainer;
        newContainerReady.resolve();
      });
      return this.deferred.promise;
    }
  }, {
    key: "start",
    value: function start() {
      if (!this.newContainerLoading) {
        throw new Error("this.newContainerLoading is not set");
      }

      this.newContainerLoading.then(this.finish.bind(this));
    }
  }, {
    key: "finish",
    value: function finish()
    /*container: HTMLElement*/
    {
      document.body.scrollTop = 0;
      this.done();
    }
  }]);

  return CustomTransition;
}(BaseTransition);


// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);

// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/services/Transition/HideShowTransition.ts








function HideShowTransition_createSuper(Derived) { var hasNativeReflectConstruct = HideShowTransition_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function HideShowTransition_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }



/**
 * Basic Transition object, wait for the new Container to be ready,
 * scroll top, and finish the transition (removing the old container and displaying the new one)
 *
 * @private
 */
var HideShowTransition = /*#__PURE__*/function (_BaseTransition) {
  inherits_default()(HideShowTransition, _BaseTransition);

  var _super = HideShowTransition_createSuper(HideShowTransition);

  function HideShowTransition() {
    var _this;

    var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "replace";
    var scrollToTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    classCallCheck_default()(this, HideShowTransition);

    _this = _super.call(this, action);

    defineProperty_default()(assertThisInitialized_default()(_this), "action", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "scrollToTop", void 0);

    _this.action = action;
    _this.scrollToTop = scrollToTop;
    return _this;
  }

  createClass_default()(HideShowTransition, [{
    key: "doScrollToTop",
    value: function doScrollToTop() {
      return new Promise(function (resolve) {
        resolve(window.scrollTo({
          top: 0,
          behavior: "smooth"
        }));
      });
    }
  }, {
    key: "start",
    value: function start() {
      if (!this.newContainerLoading) {
        throw new Error("this.newContainerLoading is not set");
      }

      if (this.scrollToTop) {
        this.doScrollToTop();
      }

      this.newContainerLoading.then(this.finish.bind(this));
    }
  }, {
    key: "finish",
    value: function finish() {
      this.done();
    }
  }]);

  return HideShowTransition;
}(BaseTransition);
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/services/Transition/index.ts



// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/index.ts
var src = __webpack_require__(425);
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/type.ts
var type = __webpack_require__(4498);
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/services/View.ts





/**
 * BaseView to be extended
 */

var BaseView = /*#__PURE__*/function () {
  function BaseView() {
    classCallCheck_default()(this, BaseView);

    defineProperty_default()(this, "namespace", void 0);

    defineProperty_default()(this, "container", void 0);

    defineProperty_default()(this, "dispatcher", new src.EventDispatcher());
  }

  createClass_default()(BaseView, [{
    key: "extend",

    /**
     * Helper to extend the object
     */
    value: function extend(obj) {
      return (0,type/* extend */.l7)(false, this, obj);
    }
    /**
     * Init the view.
     * P.S. Is suggested to init the view before starting Barba.Pjax.start(),
     * in this way .onEnter() and .onEnterCompleted() will be fired for the current
     * container when the page is loaded.
     */

  }, {
    key: "init",
    value: function init() {
      var _this = this;

      this.dispatcher.on("initStateChange", function (viewId, newStatus, oldStatus) {
        if (oldStatus && oldStatus.namespace === _this.namespace) {
          _this.onLeave();
        }
      });
      this.dispatcher.on("newPageReady", function (viewId, newStatus, oldStatus, container)
      /*, html: string, isInit: boolean*/
      {
        _this.container = container;

        if (newStatus.namespace === _this.namespace) {
          _this.onEnter();
        }
      });
      this.dispatcher.on("transitionCompleted", function (viewId, newStatus, oldStatus) {
        if (newStatus.namespace === _this.namespace) {
          _this.onEnterCompleted();
        }

        if (oldStatus && oldStatus.namespace === _this.namespace) {
          _this.onLeaveCompleted();
        }
      });
    }
    /**
     * This function will be fired when the container
     * is ready and attached to the DOM.
     */

  }]);

  return BaseView;
}();


// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/services/Pjax/Dom.ts



/**
 * Object that is going to deal with DOM parsing/manipulation
 * TODO move to @ribajs/core dom utils
 */
var Dom = /*#__PURE__*/function () {
  function Dom() {
    classCallCheck_default()(this, Dom);
  }

  createClass_default()(Dom, null, [{
    key: "getPrefetchLinkElements",
    value: function getPrefetchLinkElements(content) {
      // router-preload is a custom preloader
      return content.querySelectorAll('link[href][rel="dns-prefetch"], link[href][rel="preconnect"], link[href][rel="prefetch"], link[href][rel="subresource"], link[href][rel="preload"], link[href][rel="router-preload"]');
    }
  }, {
    key: "parseTitle",
    value: function parseTitle(content) {
      var title = ""; // title = Dom.findHTMLTagContent('title', template.innerHTML) || '';

      var titleElement = content.querySelector("title");

      if (titleElement && titleElement.innerText) {
        title = titleElement.innerText;
      }

      return title;
    }
    /**
     * Parse the responseText obtained from the fetch call
     * @see https://stackoverflow.com/a/41038197/1465919
     */

  }, {
    key: "parseResponse",
    value: function parseResponse(responseText, parseTitle, containerSelector) {
      var prefetchLinks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var title = "";
      var prefetchLinkElements = [];
      var template = document.createElement("template");
      template.innerHTML = responseText;

      if (parseTitle) {
        title = this.parseTitle(template.content);
      }

      if (prefetchLinks) {
        prefetchLinkElements = this.getPrefetchLinkElements(template.content);
      }

      var container = this.getContainer(template, containerSelector);
      return {
        container: container,
        title: title,
        prefetchLinks: prefetchLinkElements
      };
    }
    /**
     * Use this method only on the first page load
     */

  }, {
    key: "parseInitial",
    value: function parseInitial(parseTitle, containerSelector) {
      var prefetchLinks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var title = "";
      var prefetchLinkElements = [];
      var template = document.createElement("template");
      template.innerHTML = document.body.innerHTML;
      var container = this.getContainer(document, containerSelector);

      if (parseTitle) {
        title = this.parseTitle(document);
      }

      if (prefetchLinks) {
        prefetchLinkElements = this.getPrefetchLinkElements(document);
      }

      return {
        container: container,
        title: title,
        prefetchLinks: prefetchLinkElements
      };
    }
    /**
     * Get the container on the current DOM,
     * or from an Element passed via argument
     */

  }, {
    key: "getContainer",
    value: function getContainer(element, containerSelector) {
      if (!element) {
        throw new Error("Barba.js: [getContainer] No element to get container from, maybe the DOM is not ready!");
      }

      var container = this.parseContainer(element, containerSelector);

      if (!container) {
        throw new Error("[DOM] No container found");
      }

      return container;
    }
    /**
     * Get the namespace of the container
     */

  }, {
    key: "getNamespace",
    value: function getNamespace(element) {
      if (element && element.dataset && element.dataset.namespace) {
        return element.dataset.namespace;
      } else {
        return null;
      }
    }
    /**
     * Put the container on the page
     */

  }, {
    key: "putContainer",
    value: function putContainer(element, wrapper) {
      element = element;
      element.style.visibility = "hidden";
      wrapper.appendChild(element);
    }
    /**
     * Get container selector
     */

  }, {
    key: "parseContainer",
    value: function parseContainer(newPage, containerSelector) {
      if (!newPage) {
        var error = new Error("New page not loaded!");
        console.error(error, newPage);
        throw error;
      }

      var result;

      if (newPage.content) {
        result = newPage.content.querySelector(containerSelector);
      } else {
        result = newPage.querySelector(containerSelector);
      }

      if (!result) {
        var _error = new Error("No container with selector \"".concat(containerSelector, "\" found!"));

        console.error(_error, newPage);
        throw _error;
      }

      return result;
    }
  }]);

  return Dom;
}();


// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/dom.ts
var dom = __webpack_require__(8277);
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/url.ts
var src_url = __webpack_require__(5263);
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/constants.ts
/**
 * Class append to links which have caused an error
 */
var ROUTE_ERROR_CLASS = "router-error";
/**
 * Class name used to ignore links
 */

var IGNORE_CLASS_LINK = "no-barba";
/**
 * Class name used to ignore prefetch on links
 */

var IGNORE_CLASS_PREFETCH = "no-barba-prefetch";
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/services/Pjax/Prefetch.ts








/**
 * Prefetch
 */
var Prefetch = /*#__PURE__*/function () {
  createClass_default()(Prefetch, null, [{
    key: "getInstance",
    value: function getInstance() {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
      var result = Prefetch.instances[id];

      if (!result) {
        console.warn("No Pjax instance with id ".concat(id, " found!"));
      }

      return result;
    }
    /** singleton instance */

  }]);

  /**
   * Creates an singleton instance of Prefetch.
   */
  function Prefetch(viewId) {
    classCallCheck_default()(this, Prefetch);

    this.viewId = viewId;

    if (Prefetch.instances[this.viewId]) {
      return Prefetch.instances[this.viewId];
    }

    Prefetch.instances[this.viewId] = this;
  }
  /**
   * Init the event listener on mouseover and touchstart for all links on the document
   * for the prefetch
   *
   */


  createClass_default()(Prefetch, [{
    key: "init",
    value: function init() {
      var autobindLinks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (!window.history.pushState) {
        return false;
      }

      if (autobindLinks) {
        this.deInit();
        document.body.addEventListener("mouseover", this.onLinkEnterIntern.bind(this), {
          passive: true
        });
        document.body.addEventListener("touchstart", this.onLinkEnterIntern.bind(this), {
          passive: true
        });
      }
    }
  }, {
    key: "deInit",
    value: function deInit() {
      document.body.removeEventListener("mouseover", this.onLinkEnterIntern.bind(this));
      document.body.removeEventListener("touchstart", this.onLinkEnterIntern.bind(this));
    }
    /**
     * This method is used from the rv-route binder
     * @param el
     */

  }, {
    key: "initBinder",
    value: function initBinder(el, url) {
      if (!window.history.pushState) {
        return false;
      }

      this.deInitBinder(el, url);
      el.addEventListener("mouseover", this.onLinkEnter.bind(this, url, el), {
        passive: true
      });
      el.addEventListener("touchstart", this.onLinkEnter.bind(this, url, el), {
        passive: true
      });
    }
  }, {
    key: "deInitBinder",
    value: function deInitBinder(el, url) {
      el.removeEventListener("mouseover", this.onLinkEnter.bind(this, url, el));
      el.removeEventListener("touchstart", this.onLinkEnter.bind(this, url, el));
    }
  }, {
    key: "onLinkEnter",
    value: function onLinkEnter(url, el, evt) {
      if (el.classList && (el.classList.contains(IGNORE_CLASS_PREFETCH) || el.classList.contains(ROUTE_ERROR_CLASS))) {
        return;
      }

      url = (0,src_url/* normalizeUrl */.D5)(url);
      var preventCheck = Pjax.preventCheck(evt, el, url); // Check if the link is eligible for Pjax

      if (url && preventCheck) {
        var pjax = Pjax.getInstance(this.viewId);

        if (pjax) {
          pjax.loadResponseCached(url, false, false)["catch"](function (error) {
            el.classList.add(ROUTE_ERROR_CLASS);
            console.error(error);
          });
        } else {
          console.warn("No pjax instace for viewId \"".concat(this.viewId, "\" found!"));
          el.classList.add(ROUTE_ERROR_CLASS);
        }
      } else {
        if (!preventCheck) {// console.warn('preventCheck failed: ' + url, preventCheck);
        }
      }
    }
    /**
     * Callback for the mousehover/touchstart, please use the rv-route binder instead
     *
     */

  }, {
    key: "onLinkEnterIntern",
    value: function onLinkEnterIntern(evt) {
      var el = (0,dom/* getElementFromEvent */._f)(evt);

      if (!el) {
        throw new Error("HTML Element not set");
      }

      while (el && !Pjax.getHref(el)) {
        el = el.parentNode; // TODO testme
      }

      if (!el) {
        return;
      }

      if (el.nodeName !== "A") {
        return;
      }

      var href = Pjax.getHref(el); // Already managed by the rv-route binder

      if (el.classList.contains("route") || el.hasAttribute("rv-route")) {
        return;
      }

      if (!href) {
        console.warn("Url is not defined, you can't cache the link without the url. Please make shure your element has the href attribute or pass the url directly to this function.", el);
        return;
      }

      return this.onLinkEnter(href, el, evt);
    }
  }]);

  return Prefetch;
}();

defineProperty_default()(Prefetch, "instances", {});


// CONCATENATED MODULE: ./node_modules/@ribajs/cache/src/services/base-cache.service.ts




/**
 * BaseCache it's a simple static cache
 */
var BaseCache = /*#__PURE__*/function () {
  /**
   * The Object that keeps all the key value information
   */
  function BaseCache() {
    classCallCheck_default()(this, BaseCache);

    defineProperty_default()(this, "data", void 0);

    this.data = {};
  }
  /**
   * Set a key and value data, mainly Barba is going to save promises
   *
   */


  createClass_default()(BaseCache, [{
    key: "set",
    value: function set(key, val) {
      this.data[key] = val; // console.debug('SET key: ',key);

      return this.data[key];
    }
    /**
     * Retrieve the data using the key
     */

  }, {
    key: "get",
    value: function get(key) {
      // console.debug('GET key: ',key);
      return this.data[key];
    }
    /**
     * Flush the cache
     */

  }, {
    key: "reset",
    value: function reset() {
      this.data = {};
    }
  }]);

  return BaseCache;
}();


// CONCATENATED MODULE: ./node_modules/@ribajs/cache/src/services/index.ts

// CONCATENATED MODULE: ./node_modules/@ribajs/cache/src/index.ts

// EXTERNAL MODULE: ./node_modules/@ribajs/history/src/index.ts
var history_src = __webpack_require__(9468);
// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/services/Pjax/index.ts


















/**
 * Pjax is a static object with main function
 *
 * @borrows Dom as Dom
 */
var Pjax = /*#__PURE__*/function () {
  createClass_default()(Pjax, null, [{
    key: "getInstance",
    value: function getInstance() {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "main";
      var result = Pjax.instances[id];

      if (!result) {
        console.warn("No pjax instance for viewId \"".concat(id, "\" found!"));
      }

      return result;
    }
    /**
     * Determine if the link should be followed
     */

  }, {
    key: "preventCheckUrl",
    value: function preventCheckUrl(href) {
      /**
       * Create fake html element
       */
      var element = document.createElement("a");
      element.setAttribute("href", href);

      if (!element) {
        return false;
      }

      if (!href) {
        return false;
      } // Ignore case when a hash is being tacked on the current URL


      if (href.indexOf("#") > -1) {
        return false;
      } // In case you're trying to load the same page


      if ((0,src_url/* cleanLink */.Qu)(href) === (0,src_url/* cleanLink */.Qu)(location.href)) {
        return false;
      } // Check if it's the same domain


      if (window.location.protocol !== element.protocol || window.location.hostname !== element.hostname) {
        return false;
      } // Check if the port is the same


      if ((0,src_url/* getPort */.EA)() !== (0,src_url/* getPort */.EA)(element.port)) {
        return false;
      }

      return true;
    }
    /**
     * Determine if the link should be followed
     */

  }, {
    key: "preventCheck",
    value: function preventCheck(evt, element, href) {
      if (!window.history.pushState) {
        return false;
      }

      if (!this.preventCheckUrl(href)) {
        return false;
      } // Middle click, cmd click, ctrl click or prefetch load event


      if (evt && evt.which && evt.which > 1 || evt.metaKey || evt.ctrlKey || evt.shiftKey || evt.altKey) {
        return false;
      } // Ignore target with _blank target


      if (element.target && element.target === "_blank") {
        return false;
      } // Ignore case where there is download attribute


      if (element.getAttribute && typeof element.getAttribute("download") === "string") {
        return false;
      }

      if (element.classList.contains(IGNORE_CLASS_LINK)) {
        return false;
      }

      return true;
    }
    /**
     * Get the .href parameter out of an element
     * and handle special cases (like xlink:href)
     */

  }, {
    key: "getHref",
    value: function getHref(el) {
      if (!el) {
        return undefined;
      }

      if (el.getAttribute && typeof el.getAttribute("xlink:href") === "string") {
        return el.getAttribute("xlink:href") || undefined;
      }

      if (typeof el.href === "string" || el.hasAttribute && el.hasAttribute("href")) {
        var href = el.href || el.getAttribute("href");

        if (!href) {
          console.error("href attribute not found for element: ", el);
          throw new Error("href attribute not found!");
        }

        return href;
      }

      return undefined;
    }
  }]);

  /**
   * Creates an singleton instance of Pjax.
   */
  function Pjax(_ref) {
    var id = _ref.id,
        wrapper = _ref.wrapper,
        _ref$containerSelecto = _ref.containerSelector,
        containerSelector = _ref$containerSelecto === void 0 ? "[data-namespace]" : _ref$containerSelecto,
        _ref$listenAllLinks = _ref.listenAllLinks,
        listenAllLinks = _ref$listenAllLinks === void 0 ? false : _ref$listenAllLinks,
        _ref$listenPopstate = _ref.listenPopstate,
        listenPopstate = _ref$listenPopstate === void 0 ? true : _ref$listenPopstate,
        _ref$transition = _ref.transition,
        transition = _ref$transition === void 0 ? new HideShowTransition() : _ref$transition,
        _ref$parseTitle = _ref.parseTitle,
        parseTitle = _ref$parseTitle === void 0 ? true : _ref$parseTitle,
        _ref$changeBrowserUrl = _ref.changeBrowserUrl,
        changeBrowserUrl = _ref$changeBrowserUrl === void 0 ? true : _ref$changeBrowserUrl,
        _ref$prefetchLinks = _ref.prefetchLinks,
        prefetchLinks = _ref$prefetchLinks === void 0 ? true : _ref$prefetchLinks;

    classCallCheck_default()(this, Pjax);

    defineProperty_default()(this, "history", new history_src/* HistoryManager */.E());

    defineProperty_default()(this, "cacheEnabled", true);

    defineProperty_default()(this, "transitionProgress", false);

    defineProperty_default()(this, "listenAllLinks", void 0);

    defineProperty_default()(this, "listenPopstate", void 0);

    defineProperty_default()(this, "parseTitle", void 0);

    defineProperty_default()(this, "changeBrowserUrl", void 0);

    defineProperty_default()(this, "dispatcher", void 0);

    defineProperty_default()(this, "transition", void 0);

    defineProperty_default()(this, "wrapper", void 0);

    defineProperty_default()(this, "viewId", "main");

    defineProperty_default()(this, "containerSelector", void 0);

    defineProperty_default()(this, "prefetchLinks", void 0);

    if (id) {
      this.viewId = id;
    }

    var instance = this;
    this.dispatcher = new src.EventDispatcher(this.viewId);
    this.listenAllLinks = listenAllLinks;
    this.listenPopstate = listenPopstate;
    this.parseTitle = parseTitle;
    this.changeBrowserUrl = changeBrowserUrl;
    this.containerSelector = containerSelector;
    this.prefetchLinks = prefetchLinks;

    if (Pjax.instances[this.viewId]) {
      instance = Pjax.instances[this.viewId];
    }

    instance.transition = instance.transition || transition;
    instance.wrapper = instance.wrapper || wrapper;
    instance.containerSelector = instance.containerSelector || containerSelector;
    instance.listenAllLinks = (0,type/* isBoolean */.jn)(instance.listenAllLinks) ? instance.listenAllLinks : listenAllLinks;
    instance.listenPopstate = (0,type/* isBoolean */.jn)(instance.listenPopstate) ? instance.listenPopstate : listenPopstate;
    instance.parseTitle = (0,type/* isBoolean */.jn)(instance.parseTitle) ? instance.parseTitle : parseTitle;
    instance.changeBrowserUrl = (0,type/* isBoolean */.jn)(instance.changeBrowserUrl) ? instance.changeBrowserUrl : changeBrowserUrl;
    instance.prefetchLinks = (0,type/* isBoolean */.jn)(instance.prefetchLinks) ? instance.prefetchLinks : prefetchLinks;

    if (instance.wrapper) {
      instance.wrapper.setAttribute("aria-live", "polite");
    }

    Pjax.instances[this.viewId] = instance;
    return Pjax.instances[this.viewId];
  }
  /**
   * Function to be called to start Pjax
   */


  createClass_default()(Pjax, [{
    key: "start",
    value: function start() {
      if (this.wrapper) {
        this.init(this.wrapper, this.listenAllLinks, this.listenPopstate);
      } else {
        console.error("Can't init pjax without wrapper");
      }
    }
    /**
     * Return the currentURL cleaned
     */

  }, {
    key: "getCurrentUrl",
    value: function getCurrentUrl() {
      return (0,src_url/* cleanLink */.Qu)((0,src_url/* getUrl */.Gr)());
    }
    /**
     * Change the URL with pushstate and trigger the state change
     */

  }, {
    key: "goTo",
    value: function goTo(url) {
      var newTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (newTab) {
        var win = window.open(url, "_blank");

        if (win) {
          return win.focus();
        }

        return false;
      }

      if (url.indexOf("http") !== 0) {
        if (this.changeBrowserUrl) {
          window.history.pushState(null, "", url);
        }

        return this.onStateChange(undefined, url);
      } // fallback


      this.forceGoTo(url);
    }
    /**
     * Return a transition object
     */

  }, {
    key: "getTransition",
    value: function getTransition() {
      // User customizable
      return this.transition || new HideShowTransition();
    }
    /**
     * Appends a prefetch link to the head and caches the result
     */

  }, {
    key: "prefetchLinkElement",
    value: function prefetchLinkElement(linkElement, head) {
      var rel = linkElement.getAttribute("rel");
      var href = Pjax.getHref(linkElement);

      if (rel === "router-preload" && href && this.cacheEnabled && !linkElement.classList.contains(ROUTE_ERROR_CLASS)) {
        // normalize url, returns the relative url for internal urls and the full url for external urls
        href = (0,src_url/* normalizeUrl */.D5)(href);
        var follow = Pjax.preventCheckUrl(href);

        if (follow) {
          // TODO wait for idle because we do not want to block the user
          return this.loadResponseCached(href, true, false)["catch"](function (error) {
            linkElement.classList.add(ROUTE_ERROR_CLASS);
            console.error(error);
          });
        }
      } // Append The link elements to the head for native prefetching by the browser


      head.appendChild(linkElement);
    }
  }, {
    key: "removePrefetchLinks",
    value: function removePrefetchLinks(head) {
      var removePrefetchLinkElements = head.querySelectorAll('link[href][rel="dns-prefetch"], link[href][rel="preconnect"], link[href][rel="prefetch"], link[href][rel="subresource"], link[href][rel="preload"], link[href][rel="router-preload"]'); // Remove the old prefetch link elements

      removePrefetchLinkElements.forEach(function (linkElement) {
        if (linkElement && linkElement.parentNode) {
          linkElement.parentNode.removeChild(linkElement);
        }
      });
    }
    /**
     * Replaces the prefetch links in the head with the new one.
     * The custom link[href][rel="router-preload"] elements will be not readded to the head
     * because we preload them with javascript, the others are preloaded by the browser
     * because it has native support for them and for that they must exist in the head
     * @param prefetchLinks
     */

  }, {
    key: "replacePrefetchLinkElements",
    value: function replacePrefetchLinkElements(prefetchLinks) {
      var _this = this;

      var head = document.head || document.getElementsByTagName("head")[0];
      this.removePrefetchLinks(head);
      prefetchLinks.forEach(function (linkElement) {
        _this.prefetchLinkElement(linkElement, head);
      });
    }
    /**
     * Load an url, will start an fetch request or load the response from the cache and returns the container
     * Also puts the container to the DOM and sets the title (if this option is active)
     */

  }, {
    key: "loadCached",
    value: function () {
      var _loadCached = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee(url) {
        var _this2 = this;

        var response;
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                response = this.loadResponseCached(url, false, true);
                return _context.abrupt("return", response.then(function (_response) {
                  if (!_this2.wrapper) {
                    throw new Error("[Pjax] you need a wrapper!");
                  }

                  Dom.putContainer(_response.container, _this2.wrapper);

                  if (_this2.parseTitle === true && _response.title) {
                    document.title = _response.title;
                  }

                  if (_this2.prefetchLinks === true && _response.prefetchLinks) {
                    _this2.replacePrefetchLinkElements(_response.prefetchLinks);
                  }

                  return _response.container;
                })["catch"](function (error) {
                  console.error(error); // Something went wrong (timeout, 404, 505...)

                  _this2.forceGoTo(url);

                  throw error;
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadCached(_x) {
        return _loadCached.apply(this, arguments);
      }

      return loadCached;
    }()
    /**
     * Load an url, will start an fetch request or load from the cache (and set it to the cache) and will return a `Response` object
     * @param url Url to get from cache or to make the request for
     * @param forceCache Foce to use the browser build in cache, for more information see `force-cache` on https://developer.mozilla.org/en-US/docs/Web/API/Request/cache
     * @param fallback If there is an error, make a normal browser request and reload the page you should not use this on prefetching urls
     */

  }, {
    key: "loadResponseCached",
    value: function () {
      var _loadResponseCached = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2(url) {
        var _this3 = this;

        var forceCache,
            fallback,
            cachedResponse,
            options,
            response,
            _args2 = arguments;
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                forceCache = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : false;
                fallback = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : true;

                if (!this.cacheEnabled) {
                  _context2.next = 6;
                  break;
                }

                cachedResponse = Pjax.cache.get(url);

                if (!(cachedResponse && cachedResponse.then)) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", cachedResponse.then(function (response) {
                  // console.debug('cachedResponse', response);
                  return response;
                }));

              case 6:
                options = forceCache ? {
                  cache: "force-cache"
                } : {};
                response = src.HttpService.get(url, undefined, "html", {}, options).then(function (data) {
                  return Dom.parseResponse(data, _this3.parseTitle, _this3.containerSelector, _this3.prefetchLinks);
                })["catch"](function (error) {
                  console.error(error);

                  if (fallback) {
                    _this3.forceGoTo(url);
                  }

                  throw error;
                });

                if (this.cacheEnabled && response) {
                  Pjax.cache.set(url, response);
                } else {
                  Pjax.cache.reset();
                }

                return _context2.abrupt("return", response);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function loadResponseCached(_x2) {
        return _loadResponseCached.apply(this, arguments);
      }

      return loadResponseCached;
    }()
    /**
     * Attach the eventlisteners
     */

  }, {
    key: "bindEvents",
    value: function bindEvents(listenAllLinks, listenPopstate) {
      // you can also use the rv-router for this
      if (listenAllLinks) {
        document.addEventListener("click", this.onLinkClickIntern.bind(this));
      }

      if (listenPopstate) {
        window.addEventListener("popstate", this.onStateChange.bind(this));
      }
    }
    /**
     * Force the browser to go to a certain url
     */

  }, {
    key: "forceGoTo",
    value: function forceGoTo(url) {
      console.warn("forceGoTo", url);

      if (url && url.href) {
        window.location = url;
      }

      if (typeof url === "string") {
        window.location.href = url;
      }
    }
  }, {
    key: "onLinkClickIntern",
    value: function onLinkClickIntern(evt) {
      var el = (0,dom/* getElementFromEvent */._f)(evt);

      while (el && !Pjax.getHref(el)) {
        el = el.parentNode; // TODO testme
      }

      if (!el || el.nodeName !== "A") {
        return;
      }

      var href = Pjax.getHref(el); // Already managed by the rv-route binder

      if (el.classList.contains("route") || el.hasAttribute("rv-route")) {
        return;
      }

      if (!href) {
        throw new Error("Url is not defined, you can't cache the link without the url. Please make shure your element has the href attribute or pass the url directly to this function.");
      } // Already managed by the rv-route binder


      if (el.classList.contains("route") || el.hasAttribute("rv-route")) {
        return false;
      }

      return this.onLinkClick(evt, el, href);
    }
    /**
     * Callback called from click event
     */

  }, {
    key: "onLinkClick",
    value: function onLinkClick(evt, el, href) {
      // normalize url, returns the relative url for internal urls and the full url for external urls
      href = (0,src_url/* normalizeUrl */.D5)(href);

      if (!href) {
        throw new Error("href is falsy");
      }

      var follow = Pjax.preventCheck(evt, el, href);

      if (follow) {
        evt.stopPropagation();
        evt.preventDefault();
        this.dispatcher.trigger("linkClicked", el, evt);
        this.goTo(href);
      }
    }
    /**
     * Method called after a 'popstate' or from .goTo()
     */

  }, {
    key: "onStateChange",
    value: function onStateChange(event) {
      var newUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getCurrentUrl();
      // normalize url, returns the relative url for internal urls and the full url for external urls
      newUrl = (0,src_url/* normalizeUrl */.D5)(newUrl);
      var oldUrl = (0,src_url/* normalizeUrl */.D5)(this.history.currentStatus().url);

      if (this.changeBrowserUrl && oldUrl === newUrl) {
        // console.debug('ignore');
        return false;
      }

      this.history.add(newUrl);
      var oldContainer = Dom.getContainer(document, this.containerSelector);
      var newContainer = this.loadCached(newUrl);
      var transition = this.getTransition();
      this.transitionProgress = true;
      this.dispatcher.trigger("initStateChange", this.viewId, this.history.currentStatus(), this.history.prevStatus());
      var transitionInstance = transition.init(oldContainer, newContainer);
      newContainer.then(this.onNewContainerLoaded.bind(this));
      transitionInstance.then(this.onTransitionEnd.bind(this));
    }
    /**
     * Function called as soon the new container is ready
     */

  }, {
    key: "onNewContainerLoaded",
    value: function onNewContainerLoaded(container) {
      var currentStatus = this.history.currentStatus();
      currentStatus.namespace = Dom.getNamespace(container);
      var dataset = (0,src.getDataset)(container);
      this.dispatcher.trigger("newPageReady", this.viewId, this.history.currentStatus(), this.history.prevStatus(), container, container.innerHTML, dataset, false // true if this is the first time newPageReady is tiggered / true on initialisation
      );
    }
    /**
     * Function called as soon the transition is finished
     */

  }, {
    key: "onTransitionEnd",
    value: function onTransitionEnd() {
      this.transitionProgress = false;
      this.dispatcher.trigger("transitionCompleted", this.viewId, this.history.currentStatus(), this.history.prevStatus());
    }
    /**
     * Init the events
     */

  }, {
    key: "init",
    value: function init(wrapper, listenAllLinks, listenPopstate) {
      var initalResponse = Dom.parseInitial(this.parseTitle, this.containerSelector, this.prefetchLinks);
      var url = window.location.pathname; // Reload the current site with pajax to cache the inital page

      if (this.cacheEnabled) {
        var currentUrl = (0,src_url/* normalizeUrl */.D5)(window.location.href);

        if (!Pjax.cache.get(url)) {
          this.loadResponseCached(currentUrl, false, false);
        }
      }

      this.replacePrefetchLinkElements(initalResponse.prefetchLinks);
      this.wrapper = wrapper;
      this.history.add(this.getCurrentUrl(), Dom.getNamespace(initalResponse.container)); // Fire for the current view.

      this.dispatcher.trigger("initStateChange", this.viewId, this.history.currentStatus());
      var dataset = (0,src.getDataset)(initalResponse.container);
      this.dispatcher.trigger("newPageReady", this.viewId, this.history.currentStatus(), {}, initalResponse.container, initalResponse.container.innerHTML, dataset, true // true if this is the first time newPageReady is tiggered / true on initialisation
      );
      this.dispatcher.trigger("transitionCompleted", this.viewId, this.history.currentStatus());
      this.bindEvents(listenAllLinks, listenPopstate);
    }
  }]);

  return Pjax;
}();

defineProperty_default()(Pjax, "cache", new BaseCache());

defineProperty_default()(Pjax, "instances", {});


// CONCATENATED MODULE: ./node_modules/@ribajs/router/src/services/index.ts




/***/ }),

/***/ 8187:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "_E": () => /* reexport */ BarWrapperService,
  "KG": () => /* reexport */ EASDKWrapperService,
  "xq": () => /* reexport */ ShopifyApp,
  "vJ": () => /* reexport */ shopifyEasdkModule
});

// UNUSED EXPORTS: BarComponent, ModalWrapperService, UserWrapperService, WrapperService

// NAMESPACE OBJECT: ./node_modules/@ribajs/shopify-easdk/src/components/index.ts
var components_namespaceObject = {};
__webpack_require__.r(components_namespaceObject);
__webpack_require__.d(components_namespaceObject, {
  "BarComponent": () => BarComponent
});

// NAMESPACE OBJECT: ./node_modules/@ribajs/shopify-easdk/src/services/index.ts
var services_namespaceObject = {};
__webpack_require__.r(services_namespaceObject);
__webpack_require__.d(services_namespaceObject, {
  "BarWrapperService": () => BarWrapperService,
  "EASDKWrapperService": () => EASDKWrapperService,
  "ModalWrapperService": () => ModalWrapperService,
  "UserWrapperService": () => UserWrapperService,
  "WrapperService": () => WrapperService
});

// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/interfaces/shopify-easdk.ts
/**
 * type definitions for Shopify's Embedded App SDK
 * @see https://help.shopify.com/api/sdks/embedded-app-sdk
 */
var ShopifyApp = window.ShopifyApp;
// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/interfaces/index.ts

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(7757);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(8926);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(4575);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js
var assertThisInitialized = __webpack_require__(1506);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(6525);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(3913);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(2205);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(8585);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(9754);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(9713);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@ribajs/core/src/index.ts
var src = __webpack_require__(425);
// EXTERNAL MODULE: ./node_modules/@ribajs/utils/src/dom.ts
var dom = __webpack_require__(8277);
// EXTERNAL MODULE: ./node_modules/@ribajs/shopify-easdk/src/components/bar/bar.component.pug
var bar_component = __webpack_require__(8891);
var bar_component_default = /*#__PURE__*/__webpack_require__.n(bar_component);

// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/components/bar/bar.component.ts











function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }





var BarComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(BarComponent, _Component);

  var _super = _createSuper(BarComponent);

  createClass_default()(BarComponent, null, [{
    key: "observedAttributes",
    get: function get() {
      return ["buttons", "title", "icon", "pagination", "breadcrumb", "loading", "show-fallback-bar"];
    }
  }]);

  function BarComponent(element) {
    var _this;

    classCallCheck_default()(this, BarComponent);

    _this = _super.call(this, element);

    defineProperty_default()(assertThisInitialized_default()(_this), "bar", new BarWrapperService());

    defineProperty_default()(assertThisInitialized_default()(_this), "scope", {
      showFallbackBar: false
    });

    _this.init(BarComponent.observedAttributes);

    _this.listenForConfigChanges();

    return _this;
  }

  createClass_default()(BarComponent, [{
    key: "listenForConfigChanges",
    value: function listenForConfigChanges() {
      var _this2 = this;

      this.bar.event.on("bar:setShowFallbackBar", function (showFallbackBar) {
        _this2.scope.showFallbackBar = showFallbackBar;
      });
      this.bar.event.on("bar:initialize", function (fallback, config) {
        if (_this2.scope.buttons !== config.buttons) {
          _this2.scope.buttons = config.buttons;
        }

        if (_this2.scope.breadcrumb !== config.breadcrumb) {
          _this2.scope.breadcrumb = config.breadcrumb;
        }

        if (_this2.scope.title !== config.title) {
          _this2.scope.title = config.title;
        }

        if (_this2.scope.icon !== config.icon) {
          _this2.scope.icon = config.icon;
        }

        if (_this2.scope.pagination !== config.pagination) {
          _this2.scope.pagination = config.pagination;
        }

        console.debug("bar:initialize", fallback, config);
      });
      this.bar.event.on("bar:setTitle", function (fallback, title) {
        if (_this2.scope.title !== title) {
          _this2.scope.title = title;
        }

        console.debug("bar:setTitle", fallback, title);
      });
      this.bar.event.on("bar:loading", function (fallback, loading) {
        if (_this2.scope.loading !== loading.on) {
          _this2.scope.loading = loading.on;
        }

        console.debug("bar:loading", fallback, loading);
      });
      this.bar.event.on("bar:setPagination", function (fallback, pagination) {
        if (_this2.scope.pagination !== pagination) {
          _this2.scope.pagination = pagination;
        }

        console.debug("bar:setPagination", fallback, pagination);
      });
      this.bar.event.on("bar:setBreadcrumb", function (fallback, breadcrumb) {
        if (_this2.scope.breadcrumb !== breadcrumb) {
          _this2.scope.breadcrumb = breadcrumb;
        }

        console.debug("bar:setBreadcrumb", fallback, breadcrumb);
      });
    }
  }, {
    key: "beforeBind",
    value: function () {
      var _beforeBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee() {
        return regenerator_default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return get_default()(getPrototypeOf_default()(BarComponent.prototype), "beforeBind", this).call(this);

              case 2:
                this.scope.buttons = this.bar.buttons;
                this.scope.breadcrumb = this.bar.breadcrumb;
                this.scope.title = this.bar.title;
                this.scope.icon = this.bar.icon;
                this.scope.pagination = this.bar.pagination;
                this.scope.showFallbackBar = this.bar.showFallbackBar;
                console.debug("beforeBind");

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function beforeBind() {
        return _beforeBind.apply(this, arguments);
      }

      return beforeBind;
    }()
  }, {
    key: "afterBind",
    value: function () {
      var _afterBind = asyncToGenerator_default()( /*#__PURE__*/regenerator_default().mark(function _callee2() {
        return regenerator_default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return get_default()(getPrototypeOf_default()(BarComponent.prototype), "afterBind", this).call(this);

              case 2:
                console.debug("afterBind", this.scope);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function afterBind() {
        return _afterBind.apply(this, arguments);
      }

      return afterBind;
    }()
  }, {
    key: "requiredAttributes",
    value: function requiredAttributes() {
      return [];
    } // deconstructor

  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      get_default()(getPrototypeOf_default()(BarComponent.prototype), "disconnectedCallback", this).call(this);
    }
  }, {
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(attributeName, oldValue, newValue, namespace) {
      get_default()(getPrototypeOf_default()(BarComponent.prototype), "attributeChangedCallback", this).call(this, attributeName, oldValue, newValue, namespace);

      if (attributeName === "buttons") {
        this.bar.initialize(this.scope);
      }

      if (attributeName === "title") {
        this.bar.setTitle(this.scope.title);
      }

      if (attributeName === "title" && this.scope.icon) {
        this.bar.setIcon(this.scope.icon);
      }

      if (attributeName === "pagination") {
        this.bar.setPagination(this.scope.pagination);
      }

      if (attributeName === "breadcrumb") {
        this.bar.setBreadcrumb(this.scope.breadcrumb);
      }

      if (attributeName === "loading") {
        if (this.scope.loading) {
          this.bar.loadingOn();
        } else {
          this.bar.loadingOff();
        }
      }

      if (attributeName === "show-fallback-bar") {
        this.bar.setShowFallbackBar(this.scope.showFallbackBar);
      }
    }
  }, {
    key: "template",
    value: function template() {
      var template = null; // Only set the component template if there no childs already

      if ((0,dom/* hasChildNodesTrim */.Np)(this.el)) {
        console.debug("Do not template, because element has child nodes");
        return template;
      } else {
        template = bar_component_default()(this.scope);
        console.debug("Use template", template);
        return template;
      }
    }
  }]);

  return BarComponent;
}(src.Component);

defineProperty_default()(BarComponent, "tagName", "rv-shopify-easdk-bar");
// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/components/index.ts

// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/services/wrapper.service.ts





var WrapperService = /*#__PURE__*/function () {
  createClass_default()(WrapperService, null, [{
    key: "inIframe",
    value: function inIframe() {
      try {
        return window.self !== window.top;
      } catch (e) {
        return true;
      }
    }
  }]);

  function WrapperService(shopifyApp) {
    classCallCheck_default()(this, WrapperService);

    defineProperty_default()(this, "event", new src.EventDispatcher("shopify-easdk"));

    defineProperty_default()(this, "shopifyApp", void 0);

    if (!shopifyApp && !ShopifyApp) {
      throw new Error(WrapperService.ERRORS.EASDK_NOT_FOUND);
    }

    this.shopifyApp = shopifyApp || ShopifyApp;
  }

  createClass_default()(WrapperService, [{
    key: "useFallback",
    value: function useFallback(force) {
      return !WrapperService.inIframe() || force;
    }
  }]);

  return WrapperService;
}();

defineProperty_default()(WrapperService, "ERRORS", {
  EASDK_NOT_FOUND: "Shopify's EASDK is required!\n    Add <script src=\"https://cdn.shopify.com/s/assets/external/app.js\"></script> to your html head.\n    See https://help.shopify.com/en/api/embedded-apps/embedded-app-sdk for more informations."
});
// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/services/shopify-easdk-bar.service.ts








function shopify_easdk_bar_service_createSuper(Derived) { var hasNativeReflectConstruct = shopify_easdk_bar_service_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function shopify_easdk_bar_service_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }



var BarWrapperService = /*#__PURE__*/function (_WrapperService) {
  inherits_default()(BarWrapperService, _WrapperService);

  var _super = shopify_easdk_bar_service_createSuper(BarWrapperService);

  /**
   * Singleton instace
   */

  /**
   * Holds the setted buttons (setted by initialize BarWrapper['method']) to access for the fallback mode
   */

  /**
   * Holds the setted breadcrumbs config to access for the fallback mode
   */

  /**
   * Holds the setted title string to access for the fallback mode
   */

  /**
   * Holds the icon url to access for the fallback mode.
   */

  /**
   *  Holds the pagination config to access for the fallback mode.
   */

  /**
   * Holds the loading status to subscribe for the fallback mode.
   * Inspired by https://medium.com/beautiful-angular/show-loader-on-every-request-in-angular-2-9a0fca86afef
   *
   * @type {LoadingStateWrapper>}
   * @memberof BarWrapperService
   */

  /**
   * With this BehaviorSubject you can force the visablity of the fallback bar
   *
   * @type {boolean>}
   * @memberof BarWrapperService
   */
  function BarWrapperService(shopifyApp) {
    var _this;

    classCallCheck_default()(this, BarWrapperService);

    _this = _super.call(this, shopifyApp);

    defineProperty_default()(assertThisInitialized_default()(_this), "buttons", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "breadcrumb", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "title", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "icon", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "pagination", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "loading", {
      on: false
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "showFallbackBar", false);

    defineProperty_default()(assertThisInitialized_default()(_this), "route", new src.EventDispatcher("main"));

    if (BarWrapperService.instance) {
      return possibleConstructorReturn_default()(_this, BarWrapperService.instance);
    }

    BarWrapperService.instance = assertThisInitialized_default()(_this);
    return _this;
  }
  /**
   * Accepts an object that defines how the top bar and buttons will look and behave.
   * This should almost always be called in the ready() method.
   * Default behavior if initialize is never called will result in some pretty safe defaults,
   * except that the loading spinner will never stop spinning.
   */


  createClass_default()(BarWrapperService, [{
    key: "initialize",
    value: function initialize(config) {
      this.buttons = config.buttons;
      this.breadcrumb = config.breadcrumb;
      this.title = config.title;
      this.icon = config.icon;
      this.pagination = config.pagination;
      this.event.trigger("bar:initialize", this.useFallback(false), {
        buttons: this.buttons,
        breadcrumb: this.breadcrumb,
        title: this.title,
        icon: this.icon,
        pagination: this.pagination
      });
      return this.shopifyApp.Bar.initialize(config);
    }
    /**
     * Force the visablity of the fallback bar which is normally only used outside the iframe
     *
     * @param {boolean} [forceFallback] Force the visablity of the fallback bar which is normally only used outside the iframe
     * @memberof BarWrapperService
     */

  }, {
    key: "setShowFallbackBar",
    value: function setShowFallbackBar(forceFallback) {
      var showFallbackBar = this.useFallback(forceFallback);

      if (this.showFallbackBar !== showFallbackBar) {
        this.showFallbackBar = showFallbackBar;
        this.event.trigger("bar:setShowFallbackBar", this.showFallbackBar);
      }
    }
    /**
     * Restarts the loading bar. It is a best practice to call it when moving between pages or firing off AJAX requests.
     * Fallback mode inspired by https://medium.com/beautiful-angular/show-loader-on-every-request-in-angular-2-9a0fca86afef
     * @param {boolean} [forceFallback] Force the fallback mode which is used if you are not in the shopify iframe
     * @param {('determinate' | 'indeterminate' | 'buffer' | 'query')} [mode='determinate'] The progress-bar supports four modes.
     * @param {('primary' | 'accent' | 'warn')} [color] The color of a progress-bar can be changed by using the color property.
     * @returns {void}
     * @memberof BarWrapperService
     */

  }, {
    key: "loadingOn",
    value: function loadingOn() {
      var forceFallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (this.loading.on !== true) {
        var fallback = this.useFallback(forceFallback);
        this.loading = {
          on: true
        };
        console.debug("loadingOn", fallback, this.loading);
        this.event.trigger("bar:loading", fallback, this.loading);
        this.event.trigger("bar:loadingOn", fallback, this.loading);
        return this.shopifyApp.Bar.loadingOn();
      }
    }
    /**
     * Stops the loading spinner. Should probably be called on every page in shopifyApp.ready().
     * Fallback mode inspired by https://medium.com/beautiful-angular/show-loader-on-every-request-in-angular-2-9a0fca86afef
     */

  }, {
    key: "loadingOff",
    value: function loadingOff() {
      if (this.loading.on !== false) {
        this.loading = {
          on: false
        };
        var fallback = this.useFallback(false);
        console.debug("loadingOff", fallback);
        this.event.trigger("bar:loading", fallback, this.loading);
        this.event.trigger("bar:loadingOff", fallback, this.loading);
        return this.shopifyApp.Bar.loadingOff();
      }
    }
    /**
     * Listen for route events to set the loading spinner automatically.
     * This is a custom method and not part of the officially Shopify EASDK!
     *
     * @param forceFallback
     * @memberof BarWrapperService
     */

  }, {
    key: "autoLoading",
    value: function autoLoading() {
      var _this2 = this;

      var forceFallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.route.on("newPageReady", function () // viewId: string,
      // currentStatus: State,
      // prevStatus: State,
      // container: HTMLElement,
      // newPageRawHTML: string,
      // dataset: any,
      // isFirstPageLoad: boolean
      {
        _this2.loadingOff();
      });
      this.route.on("initStateChange", function ()
      /*viewId: string, currentStatus: State, prevStatus: State*/
      {
        _this2.loadingOn(forceFallback);
      });
    }
    /**
     * Manually set the title string in the top bar. See shopifyApp.Bar.initialize().
     */

  }, {
    key: "setTitle",
    value: function setTitle() {
      var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

      if (this.title !== title) {
        this.title = title; // for the fallback

        this.event.trigger("bar:setTitle", this.useFallback(false), this.title);
        return this.shopifyApp.Bar.setTitle(title);
      }
    }
    /**
     * Automatically set the title on route change, needs the title property in rbia route dataset
     */

  }, {
    key: "autoTitle",
    value: function autoTitle(formatter) {
      var _this3 = this;

      this.route.on("newPageReady", function (viewId, currentStatus, prevStatus, container, newPageRawHTML, dataset) // isFirstPageLoad: boolean
      {
        if (formatter) {
          formatter(dataset.title).then(function (title) {
            _this3.setTitle(title);
          })["catch"](function (error) {
            console.error(error);
          });
        } else {
          _this3.setTitle(dataset.title);
        }
      });
    }
    /**
     * Manually set the icon of the top bar from a URL. See shopifyApp.Bar.initialize().
     * @param icon
     */

  }, {
    key: "setIcon",
    value: function setIcon(icon) {
      if (this.icon !== icon) {
        this.icon = icon;
        this.event.trigger("bar:setIcon", this.useFallback(false), this.icon);
        return this.shopifyApp.Bar.setIcon(this.icon);
      }
    }
    /**
     * Automatically set the icon on route change, needs the icon property in rbia route dataset
     */

  }, {
    key: "autoIcon",
    value: function autoIcon()
    /*forceFallback = false*/
    {
      var _this4 = this;

      this.route.on("newPageReady", function (viewId, currentStatus, prevStatus, container, newPageRawHTML, dataset) // isFirstPageLoad: boolean
      {
        _this4.setTitle(dataset.icon);
      });
    }
    /**
     * Manually set the pagination arrows, or pass undefined to remove them entirely. See ShopifyApp.Bar.initialize().
     */

  }, {
    key: "setPagination",
    value: function setPagination(config) {
      if (this.pagination !== config) {
        this.pagination = config;
        this.event.trigger("bar:setPagination", this.useFallback(false), this.pagination);
        this.shopifyApp.Bar.setPagination(config);
      }
    }
    /**
     * Manually set the breadcrumb in the top bar for an extra level of navigation.
     * Pass a button object, or pass undefined to remove it entirely. See shopifyApp.Bar.initialize().
     * @param config
     * @memberof BarWrapperService
     */

  }, {
    key: "setBreadcrumb",
    value: function setBreadcrumb(config) {
      if (this.breadcrumb !== config) {
        this.breadcrumb = config;
        this.event.trigger("bar:setBreadcrumb", this.useFallback(false), this.breadcrumb);
        return this.shopifyApp.Bar.setBreadcrumb(config);
      }
    }
  }]);

  return BarWrapperService;
}(WrapperService);

defineProperty_default()(BarWrapperService, "instance", void 0);
// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/services/shopify-easdk-modal.service.ts








function shopify_easdk_modal_service_createSuper(Derived) { var hasNativeReflectConstruct = shopify_easdk_modal_service_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function shopify_easdk_modal_service_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var ModalWrapperService = /*#__PURE__*/function (_WrapperService) {
  inherits_default()(ModalWrapperService, _WrapperService);

  var _super = shopify_easdk_modal_service_createSuper(ModalWrapperService);

  // Singleton instace
  // TODO
  function ModalWrapperService(shopifyApp) {
    var _this;

    classCallCheck_default()(this, ModalWrapperService);

    _this = _super.call(this, shopifyApp);

    defineProperty_default()(assertThisInitialized_default()(_this), "dialog", void 0);

    if (ModalWrapperService.instance) {
      return possibleConstructorReturn_default()(_this, ModalWrapperService.instance);
    }

    ModalWrapperService.instance = assertThisInitialized_default()(_this);
    return _this;
  }
  /**
   * Opens a modal dialog in the Shopify admin that in turn loads an iframe inside of it with the passed in URL.
   * It accepts a src attribute to be loaded, a title for the top of the bar,
   * and a configuration of primary and secondary buttons identical to Bar.initialize().
   * It also accepts a callback function that is called when the modal is closed.
   *
   * To learn how to communicate from the modal iframe to the app iframe, read Modal & App Communication.
   *
   * @see https://help.shopify.com/api/sdks/shopify-apps/embedded-app-sdk/features#modal-and-application-communication
   * @param {ModalInit} init
   * @param {(result, data) => void} fn
   * @memberof Modal
   */


  createClass_default()(ModalWrapperService, [{
    key: "open",
    value: function open(init, fn) {
      var _this2 = this;

      var forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var fallback = this.useFallback(forceFallback);
      this.event.trigger("open", fallback, init);
      this.shopifyApp.Modal.open(init, function (confirmed, data) {
        // modal closed
        _this2.event.trigger("closed", fallback, confirmed, data);

        if (typeof fn === "function") {
          fn(confirmed, data);
        }
      });
    }
    /**
     * Opens a Javascript style alert() in the admin.
     * When the modal is closed the optional callback is called and a modal close message is sent.
     * For this Wrapper you can get a Observable to get the close result by calling the afterClosed function you get as the return value.
     *
     * @param options
     * @param fn not used in this wrapper, use afterClosed you get as return value instead!
     * @memberof ModalWrapperService
     */

  }, {
    key: "alert",
    value: function alert(options, fn) {
      var _this3 = this;

      var forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var fallback = this.useFallback(forceFallback);
      console.debug("alert", options);
      this.event.trigger("alert", fallback, options);
      this.shopifyApp.Modal.alert(options, function (confirmed) {
        // modal closed
        _this3.event.trigger("closed", fallback, confirmed);

        if (typeof fn === "function") {
          fn(confirmed);
        }
      });
    }
    /**
     * Opens a Javascript style confirm() in the admin.
     * When the modal is closed the optional callback is called and a modal close message is sent.
     * The callback has the status of the closure passed in.
     *
     * @param options
     * @param fn `result` of callback is true if the user has accepted
     * @memberof Modal
     */

  }, {
    key: "confirm",
    value: function confirm(options, fn) {
      var _this4 = this;

      var forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var fallback = this.useFallback(forceFallback);
      console.debug("alert", fallback, options);
      this.event.trigger("alert", fallback, options);
      this.shopifyApp.Modal.confirm(options, function (confirmed) {
        // modal closed
        _this4.event.trigger("closed", fallback, confirmed);

        if (typeof fn === "function") {
          fn(confirmed);
        }
      });
    }
    /**
     * Opens a Javascript style input() dialog in the admin.
     * When the modal is closed the optional callback is called and a modal close message is sent.
     * The callback has the status of the closure and the contents of the input box passed in.
     *
     * @param {ModalInputOptions} options
     * @param {(result, data) => void} fn
     * @memberof Modal
     */

  }, {
    key: "input",
    value: function input(options, fn) {
      var _this5 = this;

      var forceFallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var fallback = this.useFallback(forceFallback);
      console.debug("alert", fallback, options);
      this.event.trigger("alert", fallback, options);
      this.shopifyApp.Modal.input(options, function (confirmed, data) {
        // modal closed
        _this5.event.trigger("input", fallback, confirmed, data);

        if (typeof fn === "function") {
          fn(confirmed, data);
        }
      });
    }
    /**
     * Closes the currently open modal window and manually sets the result and data payload.
     * Result expects a true or false and data can contain the message payload, or nothing.
     *
     * @param {boolean} result
     * @param {string} data
     * @memberof Modal
     */

  }, {
    key: "close",
    value: function close(result, data) {
      return this.shopifyApp.Modal.close(result, data);
    }
    /**
     * Sets the height of the currently open modal window up to a maximum height of 700px and a minimum of 100px.
     * The height is applied to the body (excluding the header and footer) of the rendered modal.
     *
     * @param {number} height
     * @memberof Modal
     */

  }, {
    key: "setHeight",
    value: function setHeight(height) {
      return this.shopifyApp.Modal.setHeight(height);
    }
    /**
     * Opens a modal dialog containing a list of the products or collections available in the store,
     * with a search field for filtering results.
     * The modal can be used for selecting one or more products/collections, using the resource picker's options.
     *
     * The callback passed into the resource picker is invoked when the dialog is closed or a button is pressed.
     * The callback is passed a success flag (boolean) which will be true if products are selected.
     * The second parameter is a data object (JSON) which contains the selected products (if any)
     * and any errors that may have surfaced.
     *
     * @param {ProductPickerOptions} options
     * @param {(success: boolean, data: {products: [any], errors: [String]}) => void} fn
     * @memberof Modal
     */

  }, {
    key: "productPicker",
    value: function productPicker(options, fn) {
      return this.shopifyApp.Modal.productPicker(options, fn);
    }
    /**
     * The collection picker has the same interface as the product picker.
     *
     * @param {ProductPickerOptions} options
     * @param {ProductPickerCallback} fn
     * @memberof Modal
     */

  }, {
    key: "collectionPicker",
    value: function collectionPicker(options, fn) {
      return this.shopifyApp.Modal.collectionPicker(options, fn);
    }
  }]);

  return ModalWrapperService;
}(WrapperService);

defineProperty_default()(ModalWrapperService, "instance", void 0);
// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/services/shopify-easdk-user.service.ts








function shopify_easdk_user_service_createSuper(Derived) { var hasNativeReflectConstruct = shopify_easdk_user_service_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function shopify_easdk_user_service_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }


var UserWrapperService = /*#__PURE__*/function (_WrapperService) {
  inherits_default()(UserWrapperService, _WrapperService);

  var _super = shopify_easdk_user_service_createSuper(UserWrapperService);

  // Singleton instace
  function UserWrapperService(shopifyApp) {
    var _this;

    classCallCheck_default()(this, UserWrapperService);

    _this = _super.call(this, shopifyApp);

    if (UserWrapperService.instance) {
      return possibleConstructorReturn_default()(_this, UserWrapperService.instance);
    }

    UserWrapperService.instance = assertThisInitialized_default()(_this);
    return _this;
  }

  createClass_default()(UserWrapperService, [{
    key: "current",
    get: function get() {
      if (this.shopifyApp.User) {
        return this.shopifyApp.User.current;
      } else {
        // this.shopifyApp.User is undefined if we are not in iframe
        return undefined; // TODO
      }
    }
  }]);

  return UserWrapperService;
}(WrapperService);

defineProperty_default()(UserWrapperService, "instance", void 0);
// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/services/shopify-easdk.service.ts








function shopify_easdk_service_createSuper(Derived) { var hasNativeReflectConstruct = shopify_easdk_service_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function shopify_easdk_service_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

// rxjs
// import { Promise, Subscription, BehaviorSubject, Subject } from 'rxjs';

/* tslint:disable:member-ordering variable-name */




 // import { AlertComponent } from './alert/alert.component';
// import { ConfirmComponent } from './confirm/confirm.component';
// import { OpenComponent } from './open/open.component';

var EASDKWrapperService = /*#__PURE__*/function (_WrapperService) {
  inherits_default()(EASDKWrapperService, _WrapperService);

  var _super = shopify_easdk_service_createSuper(EASDKWrapperService);

  function EASDKWrapperService(shopifyApp) {
    var _this;

    classCallCheck_default()(this, EASDKWrapperService);

    _this = _super.call(this, shopifyApp);

    defineProperty_default()(assertThisInitialized_default()(_this), "event", new src.EventDispatcher("shopify-easdk"));

    defineProperty_default()(assertThisInitialized_default()(_this), "config", {
      shopOrigin: "",
      apiKey: ""
    });

    defineProperty_default()(assertThisInitialized_default()(_this), "message", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "Bar", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "Modal", void 0);

    defineProperty_default()(assertThisInitialized_default()(_this), "User", void 0);

    _this.Bar = new BarWrapperService(_this.shopifyApp);
    _this.Modal = new ModalWrapperService(_this.shopifyApp);
    _this.User = new UserWrapperService(_this.shopifyApp);

    if (EASDKWrapperService.instance) {
      return possibleConstructorReturn_default()(_this, EASDKWrapperService.instance);
    }

    _this.listenForMessage();

    EASDKWrapperService.instance = assertThisInitialized_default()(_this);
    return _this;
  }
  /**
   * Receive EASDK messages and listen for them
   * Subscribe `message$' to get the messages!
   * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
   */


  createClass_default()(EASDKWrapperService, [{
    key: "listenForMessage",
    value: function listenForMessage() {
      var _this2 = this;

      window.addEventListener("message", function (event) {
        var data = {};
        var message = "";

        try {
          var _data = JSON.parse(event.data);

          data = _data.data;
          message = _data.message;
        } catch (error) {
          console.debug("Error on parse message data", error);
        }

        _this2.message = {
          message: message,
          data: data
        };
        console.debug("Receive message:", event, message, data);
      }, false);
      this.event.on("bar:loading", function (fallback, loading) {
        console.debug("bar:loading", fallback, loading);
      });
      this.event.on("bar:loadingOn", function (fallback, loading) {
        console.debug("bar:loadingOn", fallback, loading);
      });
      this.event.on("bar:loadingOff", function (fallback, loading) {
        console.debug("bar:loadingOff", fallback, loading);
      });
      this.event.on("bar:setTitle", function (fallback, title) {
        console.debug("bar:setTitle", fallback, title);
      });
      this.event.on("bar:setIcon", function (fallback, icon) {
        console.debug("bar:setIcon", fallback, icon);
      });
      this.event.on("bar:setPagination", function (fallback, config) {
        console.debug("bar:setPagination", fallback, config);
      });
      this.event.on("bar:setBreadcrumb", function (fallback, config) {
        console.debug("bar:setBreadcrumb", fallback, config);
      });
    }
    /**
     * Should be called immediately after the script file has loaded,
     * as early as possible on the page (not in a jQuery.ready() or something).
     * It will initialize data values, add postMessage listeners,
     * check that the app is embedded in an iframe, and setup our initializers.
     */

  }, {
    key: "init",
    value: function init(config) {
      this.config = config;
      this.shopifyApp.init(config);
      return;
    }
    /**
     * Works similarly to jQuery's ready() function.
     * It can be called many times on a page, it accepts functions,
     * and when the Admin and the app are loaded it will call the functions in order.
     *
     * ```
     * shopifyApp.ready(function(){
     *   alert("Ready");
     * });
     * ```
     */

  }, {
    key: "ready",
    value: function ready(cb) {
      return this.shopifyApp.ready(cb);
    }
    /**
     * Used to rewrite the current URL. This is called automatically and probably doesn't need to be explicitly called at all.
     *
     * @param {string} path The path to rewrite in the current URL outsite of the iframe
     * @returns {void}
     * @memberof EASDKWrapperService
     */

  }, {
    key: "pushState",
    value: function pushState(path) {
      return this.shopifyApp.pushState(path);
    }
    /**
     * Displays a message in the Shopify admin chrome styled as a notice. Use only for successful or neutral messages.
     * `shopifyApp.flashNotice("Unicorn was created successfully.");`
     *
     * @param message The message to show
     * @param forceFallback Force the fallback mode which is used if you are not in the shopify iframe
     * @memberof EASDKWrapperService
     */

  }, {
    key: "flashNotice",
    value: function flashNotice(message) {
      var forceFallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.event.trigger("flashNotice", message, forceFallback);
      return this.shopifyApp.flashNotice(message);
    }
    /**
     * Displays a message in the Shopify admin chrome styled as an error. Use only for errors or failures.
     *
     * `shopifyApp.flashError("Unicorn could not be created.");`
     *
     * @param {string} message The message to show
     * @param {boolean} [forceFallback] Force the fallback mode which is used if you are not in the shopify iframe
     * @param {string} [action] Label for the optional action button, only available in fallback mode
     * @param {() => Promise<void>} [onAction] Promise which fires when the action button is clicked
     * @returns {void}
     * @memberof EASDKWrapperService
     */

  }, {
    key: "flashError",
    value: function flashError(message) {
      var forceFallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.event.trigger("flashError", message, forceFallback);
      return this.shopifyApp.flashError(message);
    }
    /**
     * Dispatches away from the app and into another section in the Shopify admin.
     * The path should be prefixed with a slash, but should not include the /admin part.
     * Example: /customers/120999015 or /settings/domains.
     *
     * @param {string} path The path to redirect the user
     * @returns {void}
     * @memberof EASDKWrapperService
     */

  }, {
    key: "redirect",
    value: function redirect(path) {
      var forceFallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      console.debug("redirect", path);

      if (this.useFallback(forceFallback)) {
        var config = this.config;

        if (!config.shopOrigin || config.shopOrigin.length <= 0) {
          console.error("You need to call the init function first!");
          return;
        }

        var href = config.shopOrigin + "/admin" + path;
        console.debug("redirect in fallbackmode to", href);
        window.location.href = href;
      } else {
        return this.shopifyApp.redirect(path);
      }
    }
  }]);

  return EASDKWrapperService;
}(WrapperService);

defineProperty_default()(EASDKWrapperService, "instance", void 0);
// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/services/index.ts





// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/shopify-easdk.module.ts
 // import * as formatters from './formatters;
// import * as binders from './binders';


var shopifyEasdkModule = {
  formatters: {},
  binders: {},
  services: services_namespaceObject,
  components: components_namespaceObject
};

// CONCATENATED MODULE: ./node_modules/@ribajs/shopify-easdk/src/index.ts

 // export * from './formatters';
// export * from './binders';

 // export * from './types';



/***/ }),

/***/ 417:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DZ": () => /* binding */ times,
/* harmony export */   "gX": () => /* binding */ deferred,
/* harmony export */   "Ds": () => /* binding */ debounce,
/* harmony export */   "P2": () => /* binding */ throttle
/* harmony export */ });
var times = function times(n, cb) {
  for (var i = 0; i < n; i++) {
    cb();
  }
};
/**
 * Return a new "Deferred" object
 * https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Deferred
 *
 * @return
 */

var deferred = function deferred() {
  var obj = {};
  var prom = new Promise(function (resolve, reject) {
    obj.resolve = resolve;
    obj.reject = reject;
  });
  obj.promise = prom;
  return obj;
};
/**
 * The debounce function receives our function as a parameter
 * It is recommended to use this method for scroll events, but the event should still be passive
 * This method uses uses internaly the requestAnimationFrame method
 * @see https://css-tricks.com/styling-based-on-scroll-position/
 * @see https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript
 */

var debounce = function debounce(fn) {
  // This holds the requestAnimationFrame reference, so we can cancel it if we wish
  var frame; // The debounce function returns a new function that can receive a variable number of arguments

  return function () {
    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    // If the frame variable has been defined, clear it now, and queue for next frame
    if (frame) {
      cancelAnimationFrame(frame);
    } // Queue our function call for the next frame


    frame = requestAnimationFrame(function () {
      // Call our function and pass any params we received
      fn.apply(void 0, params);
    });
  };
};
/**
 * The throttle function receives our function as a parameter
 * It is recommended to use this method for resize events
 * Throttling is a technique in which, no matter how many times the user fires the event, the attached function will be executed only once in a given time interval.
 * @see https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript
 * @see https://gist.github.com/peduarte/969217eac456538789e8fac8f45143b4
 */

var throttle = function throttle(fn) {
  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var timerId = null;
  return function () {
    for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      params[_key2] = arguments[_key2];
    }

    if (timerId === null) {
      timerId = window.setTimeout(function () {
        fn.apply(void 0, params);
        timerId = null;
      }, wait);
    }
  };
};

/***/ }),

/***/ 8277:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Np": () => /* binding */ hasChildNodesTrim,
/* harmony export */   "d9": () => /* binding */ getInputValue,
/* harmony export */   "X5": () => /* binding */ scrollTo,
/* harmony export */   "_f": () => /* binding */ getElementFromEvent,
/* harmony export */   "cc": () => /* binding */ getViewportDimensions,
/* harmony export */   "Cd": () => /* binding */ ready,
/* harmony export */   "ve": () => /* binding */ loadScript,
/* harmony export */   "Kr": () => /* binding */ getUID
/* harmony export */ });
/* unused harmony exports MAX_UID, elementIsHidden, elementIsVisable, selectAll */
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7757);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8926);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);


var MAX_UID = 1000;
/**
 * Calls el.hasChildNodes but ignores empty strings, the default hasChildNodes would return ture on `<div> </div>`.
 * Very useful to check within a component if the component has set child elements to load or overwrite the component template
 * @param el
 */

var hasChildNodesTrim = function hasChildNodesTrim(el) {
  if (!el.hasChildNodes()) {
    return false;
  }

  var childNodes = el.childNodes;

  if (childNodes.length === 1 && childNodes[0].nodeType === 3) {
    var _childNodes$0$nodeVal;

    if (!childNodes[0].nodeValue || ((_childNodes$0$nodeVal = childNodes[0].nodeValue) === null || _childNodes$0$nodeVal === void 0 ? void 0 : _childNodes$0$nodeVal.trim()) === "") {
      return false;
    }
  }

  return true;
};
/**
 *
 */

var getInputValue = function getInputValue(el) {
  var results = [];

  if (el.type === "checkbox") {
    return el.checked;
  } else if (el.type === "select-multiple") {
    var options = el.options;

    for (var key in options) {
      if (options[key]) {
        var option = options[key];

        if (option.selected) {
          results.push(option.value);
        }
      }
    }

    return results;
  } else if (el.hasAttribute("contenteditable")) {
    return el.innerHTML; // TODO write test for contenteditable
  } else {
    return el.value;
  }
};
var elementIsHidden = function elementIsHidden(el) {
  return el.hasAttribute("hidden") || el.style.display === "none" || el.style.visibility === "hidden" || window.getComputedStyle(el).display === "none" || window.getComputedStyle(el).visibility === "hidden";
};
var elementIsVisable = function elementIsVisable(el) {
  return !elementIsHidden(el);
};
/**
 * Scrolls to an element by event and selector
 *
 * Attributes:
 *  * scroll-element="query-selector"
 * @see https://stackoverflow.com/a/31987330
 * @param element
 * @param to
 * @param duration
 */

var scrollTo = function scrollTo(to, offset, scrollElement) {
  var angle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "vertical";
  var behavior = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "smooth";

  if (!scrollElement) {
    scrollElement = window;
  }

  var top = 0;
  var left = 0;

  if (typeof scrollElement.pageYOffset === "number") {
    if (angle === "vertical") {
      top = to.getBoundingClientRect().top + scrollElement.pageYOffset - offset;
    } else {
      left = to.getBoundingClientRect().left + scrollElement.pageXOffset - offset;
    }
  } else {
    if (angle === "vertical") {
      top = to.offsetTop - offset;
    } else {
      left = to.offsetLeft - offset;
    }
  } // if is is window to scroll


  scrollElement.scroll({
    behavior: behavior,
    left: left,
    top: top
  });
};
var getElementFromEvent = function getElementFromEvent(event) {
  var el = event.target || event.currentTarget || event.relatedTarget || // JQuery event
  event.delegateTarget || event.fromElement;
  return el;
};
var getViewportDimensions = function getViewportDimensions() {
  var w = Math.max(document.documentElement ? document.documentElement.clientWidth : 0, window.innerWidth || 0);
  var h = Math.max(document.documentElement ? document.documentElement.clientHeight : 0, window.innerHeight || 0);
  return {
    h: h,
    w: w
  };
};
/**
 * Select all of an contenteditable or input element
 * @param element The element you want to select
 */

var selectAll = function selectAll(element) {
  // need setTimeout for safari
  setTimeout(function () {
    if (typeof element.selectionStart !== "undefined") {
      element.selectionStart = 0;
      element.selectionEnd = 999;
    }

    if (typeof element.select === "function") {
      element.select();
    }

    if (typeof element.setSelectionRange === "function") {
      element.setSelectionRange(0, 999);
    }

    if (window.getSelection) {
      var range = document.createRange();
      range.selectNodeContents(element);
      var selection = window.getSelection();

      if (selection) {
        selection.removeAllRanges();
        selection.addRange(range);
        selection.selectAllChildren(element);
      }
    }

    if (document.body.createTextRange) {
      var _range = document.body.createTextRange(); // Creates TextRange object


      _range.moveToElementText(element); // sets Range


      _range.select(); // make selection.

    }

    if (document.execCommand) {
      document.execCommand("selectAll", false, undefined);
    }
  }, 0);
};
/**
 * Cross-browser Document Ready check
 * @see https://www.competa.com/blog/cross-browser-document-ready-with-vanilla-javascript/
 * @param callback
 */

var ready = function ready(callback) {
  if (!callback || typeof callback !== "function") {
    return new Error("The callback is required!");
  }

  var checkReady = function checkReady() {
    if (document.readyState !== "loading") {
      callback();

      if (document.attachEvent) {
        document.detachEvent("onreadystatechange", checkReady);
      }

      document.removeEventListener("DOMContentLoaded", checkReady);
    }
  };

  if (document.attachEvent) {
    document.attachEvent("onreadystatechange", checkReady);
  }

  if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", checkReady);
  }

  checkReady();
};
var loadScript = /*#__PURE__*/function () {
  var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(src, id) {
    var async,
        defer,
        script,
        _args = arguments;
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            async = _args.length > 2 && _args[2] !== undefined ? _args[2] : true;
            defer = _args.length > 3 && _args[3] !== undefined ? _args[3] : true;
            _context.next = 4;
            return new Promise(function (resolve, reject) {
              var script = document.getElementById(id);

              if (script) {
                console.warn("script already loaded, do nothing.");

                if (script.hasAttribute("loaded")) {
                  return resolve(script);
                }
              } else {
                script = document.createElement("script");
                script.type = "text/javascript";
                script.id = id;
                script.src = src;

                if (async) {
                  script.async = true;
                }

                if (defer) {
                  script.defer = true;
                }

                document.getElementsByTagName("head")[0].appendChild(script);
              } // IE


              if (script.readyState) {
                script.onreadystatechange = function () {
                  if (script.readyState === "loaded" || script.readyState === "complete") {
                    var _script;

                    script.onreadystatechange = null;
                    (_script = script) === null || _script === void 0 ? void 0 : _script.setAttribute("loaded", "true");
                    resolve(script);
                  }
                };
              } // Other browsers


              script.addEventListener("load", function () {
                var _script2;

                (_script2 = script) === null || _script2 === void 0 ? void 0 : _script2.setAttribute("loaded", "true");
                resolve(script);
              });
              script.addEventListener("error", function () {
                var _script3, _console;

                var error = new Error("Error on load script " + ((_script3 = script) === null || _script3 === void 0 ? void 0 : _script3.src));
                console.error(error);

                (_console = console).error.apply(_console, arguments);

                reject(error);
              });
            });

          case 4:
            script = _context.sent;
            return _context.abrupt("return", script);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function loadScript(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var getUID = function getUID(prefix) {
  do {
    prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
  } while (document.getElementById(prefix));

  return prefix;
};

/***/ }),

/***/ 25:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getElementFromEvent": () => /* reexport safe */ _dom__WEBPACK_IMPORTED_MODULE_1__._f,
/* harmony export */   "getUID": () => /* reexport safe */ _dom__WEBPACK_IMPORTED_MODULE_1__.Kr,
/* harmony export */   "classOf": () => /* reexport safe */ _type__WEBPACK_IMPORTED_MODULE_2__.eD
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(713);
/* harmony reexport (checked) */ if(__webpack_require__.o(_types__WEBPACK_IMPORTED_MODULE_0__, "classOf")) __webpack_require__.d(__webpack_exports__, { "classOf": function() { return _types__WEBPACK_IMPORTED_MODULE_0__.classOf; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_types__WEBPACK_IMPORTED_MODULE_0__, "getElementFromEvent")) __webpack_require__.d(__webpack_exports__, { "getElementFromEvent": function() { return _types__WEBPACK_IMPORTED_MODULE_0__.getElementFromEvent; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_types__WEBPACK_IMPORTED_MODULE_0__, "getUID")) __webpack_require__.d(__webpack_exports__, { "getUID": function() { return _types__WEBPACK_IMPORTED_MODULE_0__.getUID; } });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8277);
/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4498);







/***/ }),

/***/ 4498:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "o8": () => /* binding */ isUndefined,
/* harmony export */   "$K": () => /* binding */ isDefined,
/* harmony export */   "Kn": () => /* binding */ isObject,
/* harmony export */   "KF": () => /* binding */ getString,
/* harmony export */   "Dx": () => /* binding */ getNumber,
/* harmony export */   "uO": () => /* binding */ parseJsonString,
/* harmony export */   "kJ": () => /* binding */ isArray,
/* harmony export */   "hj": () => /* binding */ isNumber,
/* harmony export */   "jn": () => /* binding */ isBoolean,
/* harmony export */   "HD": () => /* binding */ isString,
/* harmony export */   "XM": () => /* binding */ justDigits,
/* harmony export */   "Vt": () => /* binding */ stripHtml,
/* harmony export */   "eV": () => /* binding */ camelCase,
/* harmony export */   "l7": () => /* binding */ extend,
/* harmony export */   "zo": () => /* binding */ concat,
/* harmony export */   "d9": () => /* binding */ clone,
/* harmony export */   "eD": () => /* binding */ classOf
/* harmony export */ });
/* unused harmony exports couldBeJson, isJson, isFunction, stringHasNumber, stringHasOnlyNumbers, stringIsPhoneNumber, escapeHtml */
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);

var couldBeJson = function couldBeJson(str) {
  if (!str || typeof str !== "string") {
    return false;
  }

  str = str.trim();
  return str.charAt(0) === "{" || str.charAt(0) === "[";
};
/**
 * Test if string is a json string
 * @param str
 */

var isJson = function isJson(str) {
  if (!str) {
    return false;
  }

  try {
    var val = JSON.parse(str);
    return Array.isArray(val) || _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(val) === "object" ? true : false;
  } catch (error) {
    return false;
  }
};
/**
 * Check if value is undefined
 */

var isUndefined = function isUndefined(value) {
  return typeof value === "undefined";
};
/**
 * Check if value is undefined
 */

var isDefined = function isDefined(value) {
  return !isUndefined(value);
};
/**
 * Check if type is Object
 * @see https://stackoverflow.com/a/4775737/1465919
 */

var isObject = function isObject(obj) {
  return isDefined(obj) && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(obj) === "object" && obj !== null;
};
/**
 * Parse value to string or return undefined if value is null
 * @param value
 */

var getString = function getString(value) {
  return (value === null || value === void 0 ? void 0 : value.toString) ? value.toString() : undefined;
};
/**
 * Parse value to number or return 0 if value is null or undefined
 * @param value
 */

var getNumber = function getNumber(value) {
  return value ? parseFloat(value) : undefined;
};
/**
 * Parses a json string with the special feature that json strings
 * can also havesingle quotations for defining the properties and values
 */

var parseJsonString = function parseJsonString(value) {
  var object = null;

  if (couldBeJson(value)) {
    if (isJson(value)) {
      object = JSON.parse(value) || null;
    } else {
      try {
        // Transform an invalid json string with single quotation to a valid json string with double quotation
        object = JSON.parse(value.replace(/'/g, '"')) || null;
      } catch (error) {
        console.warn(error);
      }
    }
  }

  return object;
};
/**
 * Check if value is a function
 */

var isFunction = function isFunction(value) {
  return typeof value === "function";
};
/**
 * Check if variable is an Array
 * @see https://stackoverflow.com/a/4775737/1465919
 */

var isArray = function isArray(value) {
  return Object.prototype.toString.call(value) === "[object Array]";
};
/**
 * Check whether variable is number or a string with numbers in JavaScript
 * @see https://stackoverflow.com/a/1421988/1465919
 */

var isNumber = function isNumber(value) {
  return !isNaN(parseFloat(value)) && !isNaN(value - 0);
};
/**
 * Check if type is Boolean
 * @see https://stackoverflow.com/a/28814615/1465919
 */

var isBoolean = function isBoolean(value) {
  return _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(value) === _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(true);
};
/**
 * Check if value is a string
 */

var isString = function isString(value) {
  return isDefined(value) && typeof value === "string";
};
/**
 * Check if string contains a number
 */

var stringHasNumber = function stringHasNumber(value) {
  return isString(value) && /\d/.test(value);
};
/**
 * Check if string contains only numbers
 */

var stringHasOnlyNumbers = function stringHasOnlyNumbers(value) {
  return /^\d+$/.test(value);
};
/**
 * Check if string contains only numbers, +, - and ()
 */

var stringIsPhoneNumber = function stringIsPhoneNumber(value) {
  return /^[0-9 ()+-]+$/.test(value);
};
/**
 * Just get the digits of a string, useful to remove px pixel from css value
 *
 * @see http://stackoverflow.com/a/1100653/1465919
 */

var justDigits = function justDigits(str) {
  var num = str.replace(/[^-\d.]/g, "");

  if (!isNumber(num)) {
    return 0;
  } else {
    return Number(num);
  }
};
var escapeHtml = function escapeHtml(str) {
  var tagsToReplace = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;"
  };
  return str.replace(/[&<>]/g, function (tag) {
    return tagsToReplace[tag] || tag;
  });
};
var stripHtml = function stripHtml(html) {
  var tmp = document.createElement("DIV");
  tmp.innerHTML = html;
  return tmp.textContent || tmp.innerText || "";
};
/**
 * Returns a camel-cased version of the string. Used when translating an
 * element's attribute name into a property name for the component's scope.
 * @param string
 */

var camelCase = function camelCase(str) {
  return str.replace(/-([a-z0-9])/g, function (grouped) {
    return grouped[1].toUpperCase();
  });
};
/**
 * Merge the contents of two or more objects together into the first object.
 * @param deep If true, the merge becomes recursive (aka. deep copy).
 * @param target An object that will receive the new properties
 * @param objects The objects containing additional properties to merge in.
 * @see http://www.damirscorner.com/blog/posts/20180216-VariableNumberOfArgumentsInTypescript.html
 * Copied from here:
 * @see https://gomakethings.com/merging-objects-with-vanilla-javascript/
 */

var extend = function extend(deep) {
  var extended = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // Merge the object into the extended object
  var merge = function merge(obj) {
    for (var prop in obj) {
      // eslint-disable-next-line no-prototype-builtins
      if (obj.hasOwnProperty(prop)) {
        if (deep && Object.prototype.toString.call(obj[prop]) === "[object Object]") {
          // If we're doing a deep merge and the property is an object
          extended[prop] = extend(true, extended[prop], obj[prop]);
        } else {
          // Otherwise, do a regular merge
          extended[prop] = obj[prop];
        }
      }
    }
  }; // Loop through each object and conduct a merge


  for (var i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i++) {
    merge(i + 2 < 2 || arguments.length <= i + 2 ? undefined : arguments[i + 2]);
  }

  return extended;
};
/**
 * Concat the contents of two objects together into the first object and return the concatenated object.
 * @param deep If true, the merge becomes recursive (aka. deep copy).
 * @param object1 An first object containing properties to concat.
 * @param object2 The second object containing properties to concat.
 *
 * Note: This is actually just the same as extend with only two objects. Redundant.
 */

var concat = function concat(deep, object1, object2) {
  object1 = extend(deep, object1 || {}, object2 || {});
  return object1;
};
/**
 * Clone an object or array
 * @param deep If true, the merge becomes recursive (aka. deep copy).
 * @param val The value(s) to clone
 */

var clone = function clone(deep, val) {
  if (isArray(val)) {
    if (deep) {
      return val.map(function (x) {
        return clone(true, x);
      });
    } else {
      return val.slice();
    }
  }

  if (isObject(val)) {
    return extend(deep, {}, val);
  }

  if (isString(val)) {
    return val.repeat(1);
  }

  return val;
}; // Get the class "that"

/**
 *
 * @param that
 */

var classOf = function classOf(that) {
  return that.constructor;
};
/**
 * TODO: Would like to do it with class parameter T for the parent class:
 *
   export function classOf<T = any>(that: T) {
     return that.constructor as typeof T;
   };
 *
 * but getting TypeScript error:
 * Property 'constructor' does not exist on type 'T'.
 */

/***/ }),

/***/ 9066:
/***/ (() => {



/***/ }),

/***/ 713:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony import */ var _deferred__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9066);
/* harmony import */ var _deferred__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deferred__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (checked) */ if(__webpack_require__.o(_deferred__WEBPACK_IMPORTED_MODULE_0__, "classOf")) __webpack_require__.d(__webpack_exports__, { "classOf": function() { return _deferred__WEBPACK_IMPORTED_MODULE_0__.classOf; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_deferred__WEBPACK_IMPORTED_MODULE_0__, "getElementFromEvent")) __webpack_require__.d(__webpack_exports__, { "getElementFromEvent": function() { return _deferred__WEBPACK_IMPORTED_MODULE_0__.getElementFromEvent; } });
/* harmony reexport (checked) */ if(__webpack_require__.o(_deferred__WEBPACK_IMPORTED_MODULE_0__, "getUID")) __webpack_require__.d(__webpack_exports__, { "getUID": function() { return _deferred__WEBPACK_IMPORTED_MODULE_0__.getUID; } });


/***/ }),

/***/ 5263:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D5": () => /* binding */ normalizeUrl,
/* harmony export */   "Gr": () => /* binding */ getUrl,
/* harmony export */   "k9": () => /* binding */ onRoute,
/* harmony export */   "UZ": () => /* binding */ onParentRoute,
/* harmony export */   "Qu": () => /* binding */ cleanLink,
/* harmony export */   "EA": () => /* binding */ getPort,
/* harmony export */   "xf": () => /* binding */ isExternalUrl
/* harmony export */ });
/* unused harmony exports getUrlParameter, getLocation, isAbsoluteUrl, isInternalUrl, getHash, updateHash, removeHash */
/**
 * get param from hash
 */
var getUrlParameter = function getUrlParameter(name, url) {
  if (!url) {
    url = window.location.href;
  }

  name = name.replace(/[[\]]/g, "\\$&");
  var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
  var results = regex.exec(url);

  if (!results) {
    return null;
  }

  if (!results[2]) {
    return "";
  }

  return decodeURIComponent(results[2].replace(/\+/g, " "));
};
/**
 * get location object ofpath or address bar
 * @see http://stackoverflow.com/a/736970/1465919
 *
 * @example
 * var l = getLocation("http://example.com:3000/pathname/?search=test#hash");
 * =>
 * l.protocol; // => "http:"
 * l.host;     // => "example.com:3000"
 * l.hostname; // => "example.com"
 * l.port;     // => "3000"
 * l.pathname; // => "/pathname/"
 * l.hash;     // => "#hash"
 * l.search;   // => "?search=test"
 * l.origin;   // => "http://example.com:3000"
 */

var getLocation = function getLocation(url) {
  if (!url) {
    return window.location;
  }

  var l = document.createElement("a");
  l.href = url;
  return l;
};
/**
 * If the webapps url is https://mysupersite.org and the url is https://mysupersite.org/subpage?search=test
 * this method will return /subpage?search=test
 * If the url is https://anothersite.org/subpage?search=test this method will return https://anothersite.org/subpage?search=test
 * @param url
 */

var normalizeUrl = function normalizeUrl(url) {
  var checkLocation = getLocation(url);
  var hostname = getLocation().hostname;

  if (checkLocation.hostname === hostname) {
    return checkLocation.pathname + checkLocation.search;
  } else {
    return getUrl(url);
  }
};
/**
 * Return the current full url
 *
 * @return {string} currentUrl
 */

var getUrl = function getUrl(url) {
  var location = getLocation(url);
  return location.protocol + "//" + location.host + location.pathname + location.search;
};
/**
 * Check if we are on the route
 */

var onRoute = function onRoute(checkUrl) {
  if (checkUrl) {
    var location = getLocation();
    var pathname = location.pathname;
    var hostname = location.hostname;
    var checkLocation = getLocation(checkUrl);
    var checkPathname = checkLocation.pathname;
    var checkHostname = checkLocation.hostname;
    return hostname === checkHostname && pathname === checkPathname;
  }

  return false;
};
/**
 * Check if the current location url stats with a url or is equal
 */

var onParentRoute = function onParentRoute(checkUrl) {
  if (checkUrl) {
    var location = getLocation();
    var pathname = location.pathname;
    var hostname = location.hostname;
    var checkLocation = getLocation(checkUrl);
    var checkPathname = checkLocation.pathname;
    var checkHostname = checkLocation.hostname;
    return hostname === checkHostname && pathname.startsWith(checkPathname);
  }

  return false;
};
/**
 * Given an url, return it without the hash
 *
 * @param url
 * @return newCleanUrl
 */

var cleanLink = function cleanLink(url) {
  return url.replace(/#.*/, "");
};
/**
 * Return the port number normalized, eventually you can pass a string to be normalized.
 *
 * @param p
 * @return port
 */

var getPort = function getPort(p, url) {
  var location = getLocation(url);
  var port = typeof p !== "undefined" ? p : location.port;
  var protocol = location.protocol;

  if (port !== "") {
    return Number(port);
  }

  if (protocol === "http:") {
    return 80;
  }

  if (protocol === "https:") {
    return 443;
  }
};
/**
 * Test if url is absolute or relative
 * @see https://stackoverflow.com/a/19709846/1465919
 */

var isAbsoluteUrl = function isAbsoluteUrl(url) {
  if (!url) {
    return false;
  }

  var isProtokoll = new RegExp("^(?:[a-z]+:)?//", "i");
  var isAbsolute = isProtokoll.test(url) || url.startsWith("mailto:") || url.startsWith("tel:") || url.startsWith("fax:");
  return isAbsolute;
};
var isExternalUrl = function isExternalUrl(absoluteUrl) {
  if (isAbsoluteUrl(absoluteUrl)) {
    var location = getLocation();
    var host = location.protocol + "//" + location.hostname;
    var isExternal = true;

    if (absoluteUrl.startsWith(host)) {
      isExternal = false;
    }

    return isExternal;
  }

  return false;
};
var isInternalUrl = function isInternalUrl(url) {
  return !isExternalUrl(url);
};
/**
 * Get hash from address bar or url if set
 */

var getHash = function getHash(url) {
  return getLocation(url).hash;
};
/**
 * Change hash from address bar
 */

var updateHash = function updateHash(hash) {
  return window.location.hash = hash;
};
/**
 * Remove hash from address bar
 */

var removeHash = function removeHash() {
  return history.pushState("", document.title, window.location.pathname + window.location.search);
};

/***/ }),

/***/ 3010:
/***/ ((module) => {


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};



/***/ }),

/***/ 3704:
/***/ ((__unused_webpack_module, exports) => {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(chars){
  "use strict";

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = chars.indexOf(base64[i]);
      encoded2 = chars.indexOf(base64[i+1]);
      encoded3 = chars.indexOf(base64[i+2]);
      encoded4 = chars.indexOf(base64[i+3]);

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");


/***/ }),

/***/ 5548:
/***/ ((module) => {

/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :
  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : 
  false;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  return ary.map(function(chunk) {
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      return buf;
    }

    return chunk;
  });
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary).forEach(function(part) {
    bb.append(part);
  });

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  return new Blob(mapArrayBufferViews(ary), options || {});
};

if (typeof Blob !== 'undefined') {
  BlobBuilderConstructor.prototype = Blob.prototype;
  BlobConstructor.prototype = Blob.prototype;
}

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();


/***/ }),

/***/ 6077:
/***/ ((module) => {

/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};


/***/ }),

/***/ 3861:
/***/ ((module) => {


module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};

/***/ }),

/***/ 1227:
/***/ ((module, exports, __webpack_require__) => {

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = __webpack_require__(2447)(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};


/***/ }),

/***/ 2447:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = __webpack_require__(7824);
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


/***/ }),

/***/ 3549:
/***/ ((module) => {

module.exports = (function () {
  if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')(); // eslint-disable-line no-new-func
  }
})();


/***/ }),

/***/ 5983:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


module.exports = __webpack_require__(2192);

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(4455);


/***/ }),

/***/ 2192:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Module dependencies.
 */

var transports = __webpack_require__(3352);
var Emitter = __webpack_require__(8746);
var debug = __webpack_require__(4802)('engine.io-client:socket');
var index = __webpack_require__(7355);
var parser = __webpack_require__(4455);
var parseuri = __webpack_require__(4187);
var parseqs = __webpack_require__(1830);

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (typeof location !== 'undefined' && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (typeof location !== 'undefined' ? location.hostname : 'localhost');
  this.port = opts.port || (typeof location !== 'undefined' && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.withCredentials = false !== opts.withCredentials;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // detect ReactNative environment
  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

  // other options for Node.js or ReactNative client
  if (typeof self === 'undefined' || this.isReactNative) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(6496);
Socket.transports = __webpack_require__(3352);
Socket.parser = __webpack_require__(4455);

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    withCredentials: options.withCredentials || this.withCredentials,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void (0),
    isReactNative: this.isReactNative
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(JSON.parse(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};


/***/ }),

/***/ 6496:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Module dependencies.
 */

var parser = __webpack_require__(4455);
var Emitter = __webpack_require__(8746);

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // results of ReactNative environment detection
  this.isReactNative = opts.isReactNative;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};


/***/ }),

/***/ 3352:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(2777);
var XHR = __webpack_require__(3416);
var JSONP = __webpack_require__(9785);
var websocket = __webpack_require__(4442);

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}


/***/ }),

/***/ 9785:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Module requirements.
 */

var Polling = __webpack_require__(9015);
var inherit = __webpack_require__(3861);
var globalThis = __webpack_require__(3549);

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    callbacks = globalThis.___eio = (globalThis.___eio || []);
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (typeof addEventListener === 'function') {
    addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};


/***/ }),

/***/ 3416:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global attachEvent */

/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(2777);
var Polling = __webpack_require__(9015);
var Emitter = __webpack_require__(8746);
var inherit = __webpack_require__(3861);
var debug = __webpack_require__(4802)('engine.io-client:polling-xhr');
var globalThis = __webpack_require__(3549);

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;
  opts.withCredentials = this.withCredentials;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = this.withCredentials;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          try {
            var contentType = xhr.getResponseHeader('Content-Type');
            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
              xhr.responseType = 'arraybuffer';
            }
          } catch (e) {}
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (typeof document !== 'undefined') {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (typeof document !== 'undefined') {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (typeof document !== 'undefined') {
  if (typeof attachEvent === 'function') {
    attachEvent('onunload', unloadHandler);
  } else if (typeof addEventListener === 'function') {
    var terminationEvent = 'onpagehide' in globalThis ? 'pagehide' : 'unload';
    addEventListener(terminationEvent, unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}


/***/ }),

/***/ 9015:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(6496);
var parseqs = __webpack_require__(1830);
var parser = __webpack_require__(4455);
var inherit = __webpack_require__(3861);
var yeast = __webpack_require__(2281);
var debug = __webpack_require__(4802)('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = __webpack_require__(2777);
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};


/***/ }),

/***/ 4442:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(6496);
var parser = __webpack_require__(4455);
var parseqs = __webpack_require__(1830);
var inherit = __webpack_require__(3861);
var yeast = __webpack_require__(2281);
var debug = __webpack_require__(4802)('engine.io-client:websocket');

var BrowserWebSocket, NodeWebSocket;

if (typeof WebSocket !== 'undefined') {
  BrowserWebSocket = WebSocket;
} else if (typeof self !== 'undefined') {
  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
}

if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(418);
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocketImpl = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;

  var opts = {};

  if (!this.isReactNative) {
    opts.agent = this.agent;
    opts.perMessageDeflate = this.perMessageDeflate;

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
  }

  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws =
      this.usingBrowserWebSocket && !this.isReactNative
        ? protocols
          ? new WebSocketImpl(uri, protocols)
          : new WebSocketImpl(uri)
        : new WebSocketImpl(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
};


/***/ }),

/***/ 2777:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(8058);
var globalThis = __webpack_require__(3549);

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new globalThis[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};


/***/ }),

/***/ 8746:
/***/ ((module) => {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  // Remove event specific arrays for event types that no
  // one is subscribed for to avoid memory leak.
  if (callbacks.length === 0) {
    delete this._callbacks['$' + event];
  }

  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};

  var args = new Array(arguments.length - 1)
    , callbacks = this._callbacks['$' + event];

  for (var i = 1; i < arguments.length; i++) {
    args[i - 1] = arguments[i];
  }

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),

/***/ 4802:
/***/ ((module, exports, __webpack_require__) => {

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(7616);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}


/***/ }),

/***/ 7616:
/***/ ((module, exports, __webpack_require__) => {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(810);

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),

/***/ 810:
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),

/***/ 4455:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * Module dependencies.
 */

var keys = __webpack_require__(7990);
var hasBinary = __webpack_require__(3466);
var sliceBuffer = __webpack_require__(9718);
var after = __webpack_require__(6906);
var utf8 = __webpack_require__(3414);

var base64encoder;
if (typeof ArrayBuffer !== 'undefined') {
  base64encoder = __webpack_require__(3704);
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(5548);

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '', n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || (length != (n = Number(length)))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};


/***/ }),

/***/ 7990:
/***/ ((module) => {


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};


/***/ }),

/***/ 3414:
/***/ ((module) => {

/*! https://mths.be/utf8js v2.1.2 by @mathias */

var stringFromCharCode = String.fromCharCode;

// Taken from https://mths.be/punycode
function ucs2decode(string) {
	var output = [];
	var counter = 0;
	var length = string.length;
	var value;
	var extra;
	while (counter < length) {
		value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// high surrogate, and there is a next character
			extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) { // low surrogate
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// unmatched surrogate; only append this code unit, in case the next
				// code unit is the high surrogate of a surrogate pair
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

// Taken from https://mths.be/punycode
function ucs2encode(array) {
	var length = array.length;
	var index = -1;
	var value;
	var output = '';
	while (++index < length) {
		value = array[index];
		if (value > 0xFFFF) {
			value -= 0x10000;
			output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
			value = 0xDC00 | value & 0x3FF;
		}
		output += stringFromCharCode(value);
	}
	return output;
}

function checkScalarValue(codePoint, strict) {
	if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
		if (strict) {
			throw Error(
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
				' is not a scalar value'
			);
		}
		return false;
	}
	return true;
}
/*--------------------------------------------------------------------------*/

function createByte(codePoint, shift) {
	return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
}

function encodeCodePoint(codePoint, strict) {
	if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
		return stringFromCharCode(codePoint);
	}
	var symbol = '';
	if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
		symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
	}
	else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
		if (!checkScalarValue(codePoint, strict)) {
			codePoint = 0xFFFD;
		}
		symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
		symbol += createByte(codePoint, 6);
	}
	else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
		symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
		symbol += createByte(codePoint, 12);
		symbol += createByte(codePoint, 6);
	}
	symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
	return symbol;
}

function utf8encode(string, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	var codePoints = ucs2decode(string);
	var length = codePoints.length;
	var index = -1;
	var codePoint;
	var byteString = '';
	while (++index < length) {
		codePoint = codePoints[index];
		byteString += encodeCodePoint(codePoint, strict);
	}
	return byteString;
}

/*--------------------------------------------------------------------------*/

function readContinuationByte() {
	if (byteIndex >= byteCount) {
		throw Error('Invalid byte index');
	}

	var continuationByte = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	if ((continuationByte & 0xC0) == 0x80) {
		return continuationByte & 0x3F;
	}

	// If we end up here, it’s not a continuation byte
	throw Error('Invalid continuation byte');
}

function decodeSymbol(strict) {
	var byte1;
	var byte2;
	var byte3;
	var byte4;
	var codePoint;

	if (byteIndex > byteCount) {
		throw Error('Invalid byte index');
	}

	if (byteIndex == byteCount) {
		return false;
	}

	// Read first byte
	byte1 = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	// 1-byte sequence (no continuation bytes)
	if ((byte1 & 0x80) == 0) {
		return byte1;
	}

	// 2-byte sequence
	if ((byte1 & 0xE0) == 0xC0) {
		byte2 = readContinuationByte();
		codePoint = ((byte1 & 0x1F) << 6) | byte2;
		if (codePoint >= 0x80) {
			return codePoint;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 3-byte sequence (may include unpaired surrogates)
	if ((byte1 & 0xF0) == 0xE0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
		if (codePoint >= 0x0800) {
			return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 4-byte sequence
	if ((byte1 & 0xF8) == 0xF0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		byte4 = readContinuationByte();
		codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
			(byte3 << 0x06) | byte4;
		if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
			return codePoint;
		}
	}

	throw Error('Invalid UTF-8 detected');
}

var byteArray;
var byteCount;
var byteIndex;
function utf8decode(byteString, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	byteArray = ucs2decode(byteString);
	byteCount = byteArray.length;
	byteIndex = 0;
	var codePoints = [];
	var tmp;
	while ((tmp = decodeSymbol(strict)) !== false) {
		codePoints.push(tmp);
	}
	return ucs2encode(codePoints);
}

module.exports = {
	version: '2.1.2',
	encode: utf8encode,
	decode: utf8decode
};


/***/ }),

/***/ 7187:
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}


/***/ }),

/***/ 3466:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global Blob File */

/*
 * Module requirements.
 */

var isArray = __webpack_require__(5826);

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' ||
                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' ||
                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary (obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
    (withNativeBlob && obj instanceof Blob) ||
    (withNativeFile && obj instanceof File)
  ) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}


/***/ }),

/***/ 8058:
/***/ ((module) => {


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}


/***/ }),

/***/ 8129:
/***/ ((module) => {

// Module
var code = "<div class=\"accordion\"> <div class=\"card\" rv-each-item=\"items\"> <button type=\"button\" class=\"btn btn-link card-header d-flex\" rv-on-click=\"toggle | args item %item%\" rv-aria-expanded=\"item.show\"> <span class=\"card-header-text mr-auto\" rv-html=\"item.title\"></span> <bs4-icon class=\"ml-auto\" rv-show=\"collapseIconSrc\" rv-src=\"collapseIconSrc\" rv-size=\"collapseIconSize\" rv-direction=\"item.iconDirection\"></bs4-icon> </button> <div class=\"collapse\" rv-data-index=\"%item%\"> <div class=\"card-body\" rv-template=\"item.content\"></div> </div> </div> </div> ";
// Exports
module.exports = code;

/***/ }),

/***/ 3090:
/***/ ((module) => {

// Module
var code = "<ul class=\"list-unstyled list-contents list-contents-level-1\"> <li class=\"nav-item nav-item-level-1\" rv-each-anachor=\"anchors\"> <a class=\"nav-link p-0\" rv-href=\"anachor.href\" rv-html=\"anachor.title\" rv-scroll-to-on-click=\"anachor.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"anachor.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-2\"> <li class=\"nav-item nav-item-level-2\" rv-each-child=\"anachor.childs\"> <a class=\"nav-link p-0\" rv-href=\"child.href\" rv-html=\"child.title\" rv-scroll-to-on-click=\"child.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"child.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-3\"> <li class=\"nav-item nav-item-level-3\" rv-each-childchild=\"child.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchild.href\" rv-html=\"childchild.title\" rv-scroll-to-on-click=\"childchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchild.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-4\"> <li class=\"nav-item nav-item-level-4\" rv-each-childchildchild=\"childchild.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchildchild.href\" rv-html=\"childchildchild.title\" rv-scroll-to-on-click=\"childchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchild.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-5\"> <li class=\"nav-item nav-item-level-5\" rv-each-childchildchildchild=\"childchildchild.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchild.href\" rv-html=\"childchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchildchild.childs | size | gt 0\" class=\"list-unstyled list-contents list-contents-level-6\"> <li class=\"nav-item nav-item-level-6\" rv-each-childchildchildchildchild=\"childchildchildchild.childs\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchildchild.href\" rv-html=\"childchildchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>";
// Exports
module.exports = code;

/***/ }),

/***/ 6939:
/***/ ((module) => {

// Module
var code = "<form> </form>";
// Exports
module.exports = code;

/***/ }),

/***/ 3627:
/***/ ((module) => {

// Module
var code = "<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" rv-add-class=\"modal.contextualClass | prepend 'modal-'\"> <div class=\"modal-dialog\"> <div class=\"modal-content\"> <div class=\"modal-header\" rv-show=\"modal.title\"> <h5 class=\"modal-title\" rv-template=\"modal.title\"></h5> <button type=\"button\" class=\"close\" aria-label=\"Close\" rv-on-click=\"dismiss\"> <span aria-hidden=\"true\">&times;</span> </button> </div> <div class=\"modal-body\"> <p rv-template=\"modal.message\"></p> </div> <div class=\"modal-footer\" rv-show=\"modal.buttons | size | gt 0\"> <div rv-each-button=\"modal.buttons\"> <button type=\"button\" class=\"btn\" rv-add-class=\"button.class\" rv-on-click=\"button.action\" rv-template=\"modal.label\"></button> </div> </div> </div> </div> </div>";
// Exports
module.exports = code;

/***/ }),

/***/ 3876:
/***/ ((module) => {

// Module
var code = "<div class=\"toast-container\"> <div aria-live=\"polite\" aria-atomic=\"true\" class=\"toast-item-container\" rv-add-class=\"positionClass\"> <div rv-each-toast=\"notifications\"> <div rv-if=\"toast.type | eq 'toast'\"> <bs4-toast-item rv-index=\"%toast%\" rv-parent rv-icon-url=\"iconUrl\" rv-co-toast=\"toast\"></bs4-toast-item> </div> </div> </div> </div> <div rv-each-modal=\"notifications\"> <div rv-if=\"modal.type | eq 'modal'\"> <bs4-modal-item rv-index=\"%modal%\" rv-parent rv-icon-url=\"iconUrl\" rv-co-modal=\"modal\"></bs4-modal-item> </div> </div>";
// Exports
module.exports = code;

/***/ }),

/***/ 9566:
/***/ ((module) => {

// Module
var code = "<ul class=\"list-unstyled list-scrollspy list-scrollspy-level-1\"> <li class=\"nav-item nav-item-level-1\" rv-each-anachor=\"anchors\" rv-bs4-scrollspy-active=\"anachor.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link\" rv-href=\"anachor.href\" rv-html=\"anachor.title\" rv-scroll-to-on-click=\"anachor.href\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"anachor.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-2\"> <li class=\"nav-item nav-item-level-2\" rv-each-child=\"anachor.childs\" rv-bs4-scrollspy-active=\"child.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link\" rv-href=\"child.href\" rv-html=\"child.title\" rv-scroll-to-on-click=\"child.href\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"child.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-3\"> <li class=\"nav-item nav-item-level-3\" rv-each-childchild=\"child.childs\" rv-bs4-scrollspy-active=\"childchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchild.href\" rv-html=\"childchild.title\" rv-scroll-to-on-click=\"childchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchild.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-4\"> <li class=\"nav-item nav-item-level-4\" rv-each-childchildchild=\"childchild.childs\" rv-bs4-scrollspy-active=\"childchildchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchildchild.href\" rv-html=\"childchildchild.title\" rv-scroll-to-on-click=\"childchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchild.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-5\"> <li class=\"nav-item nav-item-level-5\" rv-each-childchildchildchild=\"childchildchild.childs\" rv-bs4-scrollspy-active=\"childchildchildchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchild.href\" rv-html=\"childchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> <ul rv-if=\"childchildchildchild.childs | size | gt 0\" class=\"list-unstyled list-scrollspy list-scrollspy-level-6\"> <li class=\"nav-item nav-item-level-6\" rv-each-childchildchildchildchild=\"childchildchildchild.childs\" rv-bs4-scrollspy-active=\"childchildchildchildchild.href\" rv-data-offset=\"offset\" rv-data-offset-bottom=\"offsetBottom\"> <a class=\"nav-link p-0\" rv-href=\"childchildchildchildchild.href\" rv-html=\"childchildchildchildchild.title\" rv-scroll-to-on-click=\"childchildchildchildchild.href\" rv-data-scroll-element=\"scrollElement\" rv-data-offset=\"scrollOffset\"></a> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>";
// Exports
module.exports = code;

/***/ }),

/***/ 4091:
/***/ ((module) => {

// Module
var code = "<div rv-add-class=\"'drop' | append dropdownDirection\"> <div class=\"dropdown-toggle dropdown-toggle-share\" rv-id=\"dropdownId\" rv-template=\"labelTemplate\"></div> <div class=\"dropdown-menu\" rv-aria-labelledby=\"dropdownId\"> <a rv-each-item=\"shareItems\" rv-show=\"item.available\" rv-download=\"item.type | eq 'download'\" rv-type=\"item.type\" target=\"_blank\" rv-on-click=\"shareOnService\" class=\"dropdown-item\" rv-href=\"item.url\" rv-html=\"item.label\"></a> </div> </div> ";
// Exports
module.exports = code;

/***/ }),

/***/ 5588:
/***/ ((module) => {

// Module
var code = "<div class=\"share-label\" rv-on-click=\"share\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" rv-text=\"label\"></div> ";
// Exports
module.exports = code;

/***/ }),

/***/ 229:
/***/ ((module) => {

// Module
var code = "<button rv-show=\"controls\" class=\"btn btn-link slideshow-controls slideshow-control-prev\" rv-add-class=\"controlsPositionClass\" role=\"button\" data-slide=\"prev\" rv-on-click=\"prev\"> <bs4-icon rv-if=\"controlPrevIconSrc\" rv-src=\"controlPrevIconSrc\" direction=\"left\" size=\"24\"></bs4-icon> <span rv-hide=\"controlPrevIconSrc\" class=\"btn btn-link slideshow-control-fallback-prev-icon\" aria-hidden=\"true\"></span> <span class=\"sr-only\">Previous</span> </button> <button rv-show=\"controls\" class=\"btn btn-link slideshow-controls slideshow-control-next\" rv-add-class=\"controlsPositionClass\" role=\"button\" data-slide=\"next\" rv-on-click=\"next\"> <bs4-icon rv-if=\"controlNextIconSrc\" rv-src=\"controlNextIconSrc\" direction=\"right\" size=\"24\"></bs4-icon> <span rv-hide=\"controlNextIconSrc\" class=\"slideshow-control-fallback-next-icon\" aria-hidden=\"true\"></span> <span class=\"sr-only\">Next</span> </button> ";
// Exports
module.exports = code;

/***/ }),

/***/ 3794:
/***/ ((module) => {

// Module
var code = "<ol rv-if=\"indicators\" class=\"slideshow-indicators\" rv-add-class=\"indicatorsPositionClass\"> <li rv-each-slide=\"items\" rv-class-active=\"slide.active\" rv-on-click=\"goTo | args slide.index\"> <bs4-icon rv-hide=\"slide.active\" rv-src=\"indicatorInactiveIconSrc\" size=\"16\"></bs4-icon> <bs4-icon rv-show=\"slide.active\" rv-src=\"indicatorActiveIconSrc\" size=\"16\"></bs4-icon> </li> </ol> ";
// Exports
module.exports = code;

/***/ }),

/***/ 48:
/***/ ((module) => {

// Module
var code = "<div class=\"slideshow-inner\"> <div rv-each-slide=\"items\" rv-class=\"slide.class\" rv-class-active=\"slide.active\" rv-id=\"'slide-' | append slide.handle\" rv-index=\"slide.index\" rv-html=\"slide.content\"></div> </div> ";
// Exports
module.exports = code;

/***/ }),

/***/ 4922:
/***/ ((module) => {

// Module
var code = "<ul rv-scrollbar-draggable rv-aria-orientation=\"optionTabsAngle\" role=\"tablist\" class=\"nav nav-tabs flex-scrollbar-x-auto scrollbar-y-hidden\"> <li class=\"nav-item\" rv-each-tab=\"items\"> <button role=\"tab\" class=\"btn btn-link nav-link\" rv-class-active=\"tab.active\" rv-id=\"'tab-title-' | append tab.handle\" rv-aria-controls=\"'tab-content-' | append tab.handle\" rv-on-click=\"activate | args tab\" rv-html=\"tab.title\"></button> </li> </ul> <div class=\"tab-content\"> <div rv-each-tab=\"items\" role=\"tabpanel\" class=\"tab-pane\" rv-class-show=\"tab.active\" rv-class-active=\"tab.active\" rv-id=\"'tab-content-' | append tab.handle\" rv-aria-labelledby=\"'tab-title-' | append tab.handle\" rv-template=\"tab.content\"></div> </div> ";
// Exports
module.exports = code;

/***/ }),

/***/ 9640:
/***/ ((module) => {

// Module
var code = "<div class=\"row\"> <div class=\"col-auto\"> <div class=\"nav flex-column nav-pills\" role=\"tablist\" rv-aria-orientation=\"optionTabsAngle\"> <div class=\"nav-item\" rv-each-tab=\"items\"> <button class=\"btn btn-link nav-link\" role=\"tab\" rv-class-active=\"tab.active\" rv-id=\"'tab-title-' | append tab.handle\" rv-aria-controls=\"'tab-content-' | append tab.handle\" rv-on-click=\"activate | args tab\" rv-html=\"tab.title\"></button> </div> </div> </div> <div class=\"col-auto\"> <div class=\"tab-content\"> <div rv-each-tab=\"items\" role=\"tabpanel\" class=\"tab-pane\" rv-class-show=\"tab.active\" rv-class-active=\"tab.active\" rv-id=\"'tab-content-' | append tab.handle\" rv-aria-labelledby=\"'tab-title-' | append tab.handle\" rv-template=\"tab.content\"></div> </div> </div> </div> ";
// Exports
module.exports = code;

/***/ }),

/***/ 2859:
/***/ ((module) => {

// Module
var code = "<div class=\"toast my-1\" rv-add-class=\"toast.contextualClass | prepend 'toast-'\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\"> <div class=\"toast-header\" rv-show=\"toast.title\"> <img id=\"toastImage\" rv-if=\"iconUrl\" rv-src=\"iconUrl\" class=\"rounded mr-2\" alt=\"toast icon\"> <strong class=\"mr-auto\" rv-template=\"toast.title\"></strong> <button type=\"button\" class=\"ml-2 mb-1 close\" rv-on-click=\"dismiss\" aria-label=\"Close\"> <span aria-hidden=\"true\">&times;</span> </button> </div> <div class=\"toast-body\" rv-template=\"toast.message\"></div> </div>";
// Exports
module.exports = code;

/***/ }),

/***/ 8315:
/***/ ((module) => {

// Module
var code = "<div class=\"share-label\" rv-on-click=\"share\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" rv-i18n-text=\"labelI18n\"></div> ";
// Exports
module.exports = code;

/***/ }),

/***/ 7355:
/***/ ((module) => {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),

/***/ 5826:
/***/ ((module) => {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ 9755:
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.5.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( _i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
					dataPriv.get( this, "events" ) || Object.create( null )
				)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px";
				tr.style.height = "1px";
				trChild.style.height = "9px";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = (
					dataPriv.get( cur, "events" ) || Object.create( null )
				)[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script
			if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			if ( typeof props.top === "number" ) {
				props.top += "px";
			}
			if ( typeof props.left === "number" ) {
				props.left += "px";
			}
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ 7824:
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ 1830:
/***/ ((__unused_webpack_module, exports) => {

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};


/***/ }),

/***/ 4187:
/***/ ((module) => {

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    uri.pathNames = pathNames(uri, uri['path']);
    uri.queryKey = queryKey(uri, uri['query']);

    return uri;
};

function pathNames(obj, path) {
    var regx = /\/{2,9}/g,
        names = path.replace(regx, "/").split("/");

    if (path.substr(0, 1) == '/' || path.length === 0) {
        names.splice(0, 1);
    }
    if (path.substr(path.length - 1, 1) == '/') {
        names.splice(names.length - 1, 1);
    }

    return names;
}

function queryKey(uri, query) {
    var data = {};

    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
        if ($1) {
            data[$1] = $2;
        }
    });

    return data;
}


/***/ }),

/***/ 8891:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;;return pug_html;};
module.exports = template;

/***/ }),

/***/ 7055:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var pug_has_own_property = Object.prototype.hasOwnProperty;

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = pug_merge;
function pug_merge(a, b) {
  if (arguments.length === 1) {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++) {
      attrs = pug_merge(attrs, a[i]);
    }
    return attrs;
  }

  for (var key in b) {
    if (key === 'class') {
      var valA = a[key] || [];
      a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);
    } else if (key === 'style') {
      var valA = pug_style(a[key]);
      valA = valA && valA[valA.length - 1] !== ';' ? valA + ';' : valA;
      var valB = pug_style(b[key]);
      valB = valB && valB[valB.length - 1] !== ';' ? valB + ';' : valB;
      a[key] = valA + valB;
    } else {
      a[key] = b[key];
    }
  }

  return a;
}

/**
 * Process array, object, or string as a string of classes delimited by a space.
 *
 * If `val` is an array, all members of it and its subarrays are counted as
 * classes. If `escaping` is an array, then whether or not the item in `val` is
 * escaped depends on the corresponding item in `escaping`. If `escaping` is
 * not an array, no escaping is done.
 *
 * If `val` is an object, all the keys whose value is truthy are counted as
 * classes. No escaping is done.
 *
 * If `val` is a string, it is counted as a class. No escaping is done.
 *
 * @param {(Array.<string>|Object.<string, boolean>|string)} val
 * @param {?Array.<string>} escaping
 * @return {String}
 */
exports.classes = pug_classes;
function pug_classes_array(val, escaping) {
  var classString = '',
    className,
    padding = '',
    escapeEnabled = Array.isArray(escaping);
  for (var i = 0; i < val.length; i++) {
    className = pug_classes(val[i]);
    if (!className) continue;
    escapeEnabled && escaping[i] && (className = pug_escape(className));
    classString = classString + padding + className;
    padding = ' ';
  }
  return classString;
}
function pug_classes_object(val) {
  var classString = '',
    padding = '';
  for (var key in val) {
    if (key && val[key] && pug_has_own_property.call(val, key)) {
      classString = classString + padding + key;
      padding = ' ';
    }
  }
  return classString;
}
function pug_classes(val, escaping) {
  if (Array.isArray(val)) {
    return pug_classes_array(val, escaping);
  } else if (val && typeof val === 'object') {
    return pug_classes_object(val);
  } else {
    return val || '';
  }
}

/**
 * Convert object or string to a string of CSS styles delimited by a semicolon.
 *
 * @param {(Object.<string, string>|string)} val
 * @return {String}
 */

exports.style = pug_style;
function pug_style(val) {
  if (!val) return '';
  if (typeof val === 'object') {
    var out = '';
    for (var style in val) {
      /* istanbul ignore else */
      if (pug_has_own_property.call(val, style)) {
        out = out + style + ':' + val[style] + ';';
      }
    }
    return out;
  } else {
    return val + '';
  }
}

/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = pug_attr;
function pug_attr(key, val, escaped, terse) {
  if (
    val === false ||
    val == null ||
    (!val && (key === 'class' || key === 'style'))
  ) {
    return '';
  }
  if (val === true) {
    return ' ' + (terse ? key : key + '="' + key + '"');
  }
  var type = typeof val;
  if (
    (type === 'object' || type === 'function') &&
    typeof val.toJSON === 'function'
  ) {
    val = val.toJSON();
  }
  if (typeof val !== 'string') {
    val = JSON.stringify(val);
    if (!escaped && val.indexOf('"') !== -1) {
      return ' ' + key + "='" + val.replace(/'/g, '&#39;') + "'";
    }
  }
  if (escaped) val = pug_escape(val);
  return ' ' + key + '="' + val + '"';
}

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} terse whether to use HTML5 terse boolean attributes
 * @return {String}
 */
exports.attrs = pug_attrs;
function pug_attrs(obj, terse) {
  var attrs = '';

  for (var key in obj) {
    if (pug_has_own_property.call(obj, key)) {
      var val = obj[key];

      if ('class' === key) {
        val = pug_classes(val);
        attrs = pug_attr(key, val, false, terse) + attrs;
        continue;
      }
      if ('style' === key) {
        val = pug_style(val);
      }
      attrs += pug_attr(key, val, false, terse);
    }
  }

  return attrs;
}

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

var pug_match_html = /["&<>]/;
exports.escape = pug_escape;
function pug_escape(_html) {
  var html = '' + _html;
  var regexResult = pug_match_html.exec(html);
  if (!regexResult) return _html;

  var result = '';
  var i, lastIndex, escape;
  for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {
    switch (html.charCodeAt(i)) {
      case 34:
        escape = '&quot;';
        break;
      case 38:
        escape = '&amp;';
        break;
      case 60:
        escape = '&lt;';
        break;
      case 62:
        escape = '&gt;';
        break;
      default:
        continue;
    }
    if (lastIndex !== i) result += html.substring(lastIndex, i);
    lastIndex = i + 1;
    result += escape;
  }
  if (lastIndex !== i) return result + html.substring(lastIndex, i);
  else return result;
}

/**
 * Re-throw the given `err` in context to the
 * the pug in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @param {String} str original source
 * @api private
 */

exports.rethrow = pug_rethrow;
function pug_rethrow(err, filename, lineno, str) {
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  try {
    str = str || __webpack_require__(2661).readFileSync(filename, 'utf8');
  } catch (ex) {
    pug_rethrow(err, null, lineno);
  }
  var context = 3,
    lines = str.split('\n'),
    start = Math.max(lineno - context, 0),
    end = Math.min(lines.length, lineno + context);

  // Error context
  var context = lines
    .slice(start, end)
    .map(function(line, i) {
      var curr = i + start + 1;
      return (curr == lineno ? '  > ' : '    ') + curr + '| ' + line;
    })
    .join('\n');

  // Alter exception message
  err.path = filename;
  try {
    err.message =
      (filename || 'Pug') +
      ':' +
      lineno +
      '\n' +
      context +
      '\n\n' +
      err.message;
  } catch (e) {}
  throw err;
}


/***/ }),

/***/ 5666:
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ 6809:
/***/ ((module, exports, __webpack_require__) => {


/**
 * Module dependencies.
 */

var url = __webpack_require__(3678);
var parser = __webpack_require__(9113);
var Manager = __webpack_require__(2739);
var debug = __webpack_require__(3669)('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(2739);
exports.Socket = __webpack_require__(8584);


/***/ }),

/***/ 2739:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * Module dependencies.
 */

var eio = __webpack_require__(5983);
var Socket = __webpack_require__(8584);
var Emitter = __webpack_require__(5848);
var parser = __webpack_require__(9113);
var on = __webpack_require__(5464);
var bind = __webpack_require__(6077);
var debug = __webpack_require__(3669)('socket.io-client:manager');
var indexOf = __webpack_require__(7355);
var Backoff = __webpack_require__(3010);

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    if (timeout === 0) {
      openSub.destroy(); // prevents a race condition with the 'open' event
    }

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};


/***/ }),

/***/ 5464:
/***/ ((module) => {


/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}


/***/ }),

/***/ 8584:
/***/ ((module, exports, __webpack_require__) => {


/**
 * Module dependencies.
 */

var parser = __webpack_require__(9113);
var Emitter = __webpack_require__(5848);
var toArray = __webpack_require__(4042);
var on = __webpack_require__(5464);
var bind = __webpack_require__(6077);
var debug = __webpack_require__(3669)('socket.io-client:socket');
var parseqs = __webpack_require__(1830);
var hasBin = __webpack_require__(3466);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.flags = {};
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  if (!this.io.reconnecting) this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  this.flags = {};

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({type: parser.CONNECT, query: query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  var sameNamespace = packet.nsp === this.nsp;
  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';

  if (!sameNamespace && !rootNamespaceError) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags.compress = compress;
  return this;
};

/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */

Socket.prototype.binary = function (binary) {
  this.flags.binary = binary;
  return this;
};


/***/ }),

/***/ 3678:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(4187);
var debug = __webpack_require__(3669)('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || (typeof location !== 'undefined' && location);
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}


/***/ }),

/***/ 5848:
/***/ ((module) => {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  // Remove event specific arrays for event types that no
  // one is subscribed for to avoid memory leak.
  if (callbacks.length === 0) {
    delete this._callbacks['$' + event];
  }

  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};

  var args = new Array(arguments.length - 1)
    , callbacks = this._callbacks['$' + event];

  for (var i = 1; i < arguments.length; i++) {
    args[i - 1] = arguments[i];
  }

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),

/***/ 3669:
/***/ ((module, exports, __webpack_require__) => {

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(1350);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}


/***/ }),

/***/ 1350:
/***/ ((module, exports, __webpack_require__) => {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(4241);

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),

/***/ 4241:
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),

/***/ 2326:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(5826);
var isBuf = __webpack_require__(6066);
var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');
var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if (typeof data === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (typeof data === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};


/***/ }),

/***/ 9113:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/**
 * Module dependencies.
 */

var debug = __webpack_require__(1618)('socket.io-parser');
var Emitter = __webpack_require__(5778);
var binary = __webpack_require__(2326);
var isArray = __webpack_require__(5826);
var isBuf = __webpack_require__(6066);

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    var payload = tryStringify(obj.data);
    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch(e){
    return false;
  }
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  }

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';
    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i === str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch(e){
    return false;
  }
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}


/***/ }),

/***/ 6066:
/***/ ((module) => {


module.exports = isBuf;

var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

var isView = function (obj) {
  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
};

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (withNativeBuffer && Buffer.isBuffer(obj)) ||
          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
}


/***/ }),

/***/ 5778:
/***/ ((module) => {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  // Remove event specific arrays for event types that no
  // one is subscribed for to avoid memory leak.
  if (callbacks.length === 0) {
    delete this._callbacks['$' + event];
  }

  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};

  var args = new Array(arguments.length - 1)
    , callbacks = this._callbacks['$' + event];

  for (var i = 1; i < arguments.length; i++) {
    args[i - 1] = arguments[i];
  }

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),

/***/ 1618:
/***/ ((module, exports, __webpack_require__) => {

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(968);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}


/***/ }),

/***/ 968:
/***/ ((module, exports, __webpack_require__) => {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(8896);

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),

/***/ 8896:
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),

/***/ 4042:
/***/ ((module) => {

module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}


/***/ }),

/***/ 2281:
/***/ ((module) => {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;


/***/ })

}]);