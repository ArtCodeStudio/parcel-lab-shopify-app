import { ParcellabOrder, ParcellabArticle, ParcellabSearchResponse } from 'parcellab';
import { ParcelLabSettings } from '../interfaces';
import { SettingsService } from '../settings/settings.service';
import { DebugService, EventService, Interfaces, ShopService, ProductsService, OrdersService, ShopifyConnectService, IShopifyConnect, ShopifyModuleOptions, CheckoutsService } from 'nest-shopify';
declare type AnyWebhookOrder = Interfaces.WebhooksReponse.WebhookOrdersFulfilled | Interfaces.WebhooksReponse.WebhookOrdersPaid | Interfaces.WebhooksReponse.WebhookOrdersPartiallyFulfilled | Interfaces.WebhooksReponse.WebhookOrdersUpdated | Interfaces.WebhooksReponse.WebhookOrdersCreate;
declare type AnyWebhookFulfillment = Interfaces.WebhooksReponse.WebhookFulfillmentCreate | Interfaces.WebhooksReponse.WebhookFulfillmentUpdate;
export declare class ParcelLabTrackingService {
    protected readonly shopifyModuleOptions: ShopifyModuleOptions;
    protected readonly shopifyEvents: EventService;
    protected readonly shopify: ShopifyConnectService;
    protected readonly parcelLabSettings: SettingsService;
    protected readonly shop: ShopService;
    protected readonly product: ProductsService;
    protected readonly checkout: CheckoutsService;
    protected readonly order: OrdersService;
    protected logger: DebugService;
    protected testMode: boolean;
    constructor(shopifyModuleOptions: ShopifyModuleOptions, shopifyEvents: EventService, shopify: ShopifyConnectService, parcelLabSettings: SettingsService, shop: ShopService, product: ProductsService, checkout: CheckoutsService, order: OrdersService);
    list(myshopifyDomain: string, search?: string, page?: number, size?: number): Promise<ParcellabSearchResponse>;
    protected addEventListeners(): void;
    protected onOrderCancelled(myshopifyDomain: string, data: Interfaces.WebhooksReponse.WebhookOrdersCancelled): Promise<void>;
    protected onOrderCreate(myshopifyDomain: string, data: Interfaces.WebhooksReponse.WebhookOrdersCreate): Promise<void>;
    protected onOrderFulfilled(myshopifyDomain: string, data: Interfaces.WebhooksReponse.WebhookOrdersFulfilled): Promise<void>;
    protected onOrderPaid(myshopifyDomain: string, data: Interfaces.WebhooksReponse.WebhookOrdersPaid): Promise<void>;
    protected onOrderPartiallyFulfilled(myshopifyDomain: string, data: Interfaces.WebhooksReponse.WebhookOrdersPartiallyFulfilled): Promise<void>;
    protected onOrderUpdated(myshopifyDomain: string, data: Interfaces.WebhooksReponse.WebhookOrdersUpdated): Promise<void>;
    protected onOrderDelete(myshopifyDomain: string, data: Interfaces.WebhooksReponse.WebhookOrdersCreate): Promise<void>;
    protected onFulfillmentsCreate(myshopifyDomain: string, data: Interfaces.WebhooksReponse.WebhookFulfillmentCreate): Promise<void>;
    protected onFulfillmentsUpdate(myshopifyDomain: string, data: Interfaces.WebhooksReponse.WebhookFulfillmentUpdate): Promise<void>;
    protected updateOrCreateTracking(myshopifyDomain: string, shopifyFulfillment: AnyWebhookFulfillment, overwrite?: Partial<ParcellabOrder>): Promise<string[]>;
    protected updateOrCreateOrder(myshopifyDomain: string, shopifyOrder: AnyWebhookOrder, overwrite?: Partial<ParcellabOrder>): Promise<string[]>;
    protected transformTracking(shopifyAuth: IShopifyConnect, parcelLabSettings: ParcelLabSettings, shopifyFulfillment: AnyWebhookFulfillment | Interfaces.Fulfillment, shopifyOrder?: Partial<Interfaces.Order>, order?: ParcellabOrder): Promise<ParcellabOrder>;
    protected transformOrder(shopifyAuth: IShopifyConnect, parcelLabSettings: ParcelLabSettings, shopifyOrder: Partial<Interfaces.Order>): Promise<ParcellabOrder>;
    protected transformLineItems(shopifyAuth: IShopifyConnect, shopifyOrder: Partial<Interfaces.Order>, lineItems?: Interfaces.DraftOrder['line_items'] | Interfaces.Order['line_items']): Promise<ParcellabArticle[]>;
    protected getOrderNo(shopifyOrder?: Partial<Interfaces.Order>, shopifyFulfillment?: AnyWebhookFulfillment | Interfaces.Fulfillment, order?: ParcellabOrder): string;
    protected getCancelled(shopifyOrder?: Partial<Interfaces.Order>, shopifyFulfillment?: AnyWebhookFulfillment | Interfaces.Fulfillment, order?: ParcellabOrder): boolean;
    protected getArticleUrl(shopifyAuth: IShopifyConnect, shopifyOrder: Partial<Interfaces.Order>, product: Partial<Interfaces.Product>, prepend?: string): Promise<string>;
    protected getShopDomain(shopifyAuth: IShopifyConnect, shopifyOrder: Partial<Interfaces.Order>): Promise<string>;
    protected getShopDomainFromNoteAttributes(shopifyOrder: Partial<Interfaces.Order>): string;
    protected getArticleNo(lineItem: Interfaces.DraftLineItem | Interfaces.LineItem | Interfaces.ProductVariant): Promise<string>;
    protected getClient(shopifyAuth: IShopifyConnect): Promise<string>;
    protected getLocaleCode(shopifyAuth: IShopifyConnect, shopifyOrder?: Partial<Interfaces.Order>): Promise<string>;
    protected getLocalCodeFromNoteAttributes(shopifyOrder?: Partial<Interfaces.Order>): string;
    protected getName(shopifyOrder: Partial<Interfaces.Order>): string | undefined;
    protected getShopifyAuth(domain: string): Promise<IShopifyConnect>;
    protected getProductData(shopifyAuth: IShopifyConnect, shopifyOrder: Partial<Interfaces.Order>, lineItem: Interfaces.LineItem): Promise<{
        articleNo?: string;
        articleCategory?: string;
        articleImageUrl?: string;
        articleUrl?: string;
    }>;
    protected getShopifyOrder(shopifyAuth: IShopifyConnect, fulfillment: AnyWebhookFulfillment | Interfaces.Fulfillment): Promise<Partial<Interfaces.Order> | null>;
    protected getOrderData(shopifyAuth: IShopifyConnect, parcelLabSettings: ParcelLabSettings, fulfillment: AnyWebhookFulfillment | Interfaces.Fulfillment, shopifyOrder: Partial<Interfaces.Order>): Promise<ParcellabOrder | null>;
    protected getCheckout(shopifyAuth: IShopifyConnect, checkoutToken: string): Promise<Partial<Interfaces.Checkout>>;
    protected getVariant(product: Partial<Interfaces.Product>, variant_id: number): Promise<Interfaces.ProductVariant | null>;
    protected getProductImageSource(product: Partial<Interfaces.Product>, variant_id: number): string;
    protected handleCourierName(courier?: string): string;
    protected validateCourier(parcelLabSettings: ParcelLabSettings, trackingNumber?: string, courier?: string): Promise<{
        courier: string;
        trackingNumber: string;
    }>;
    protected getCourier(parcelLabSettings: ParcelLabSettings, shopifyFulfillment?: AnyWebhookFulfillment | Interfaces.Fulfillment | null, order?: ParcellabOrder | null, shopifyOrder?: Partial<Interfaces.Order>, shopifyCheckout?: Partial<Interfaces.Checkout>): Promise<string>;
    protected transformCheckoutShippingToCourier(shippingMethodTitle: string, fallbackName?: string): string;
}
export {};
